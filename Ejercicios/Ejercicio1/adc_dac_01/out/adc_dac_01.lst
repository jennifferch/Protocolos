
examples/c/sapi/ejercicios/adc_dac_01/out/adc_dac_01.elf:     file format elf32-littlearm
examples/c/sapi/ejercicios/adc_dac_01/out/adc_dac_01.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a003989

Program Header:
0x70000001 off    0x0000c3c4 vaddr 0x1a0043c4 paddr 0x1a0043c4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x0000059c flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x000043cc memsz 0x000043cc flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a0043cc align 2**15
         filesz 0x000000cc memsz 0x000000cc flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043c4  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  10000000  1a0043cc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000100cc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000100cc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000100cc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000100cc  2**2
                  CONTENTS
  6 .bss          000004cc  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000100cc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000100cc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000100cc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000100cc  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a0043c4  1a0043c4  0000c3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000100cc  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000100cc  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000100cc  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000100cc  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000100cc  2**2
                  CONTENTS
 17 .noinit       00000000  1000059c  1000059c  000100cc  2**2
                  CONTENTS
 18 .debug_info   000195b8  00000000  00000000  000100cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00003e53  00000000  00000000  00029684  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000b1fe  00000000  00000000  0002d4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000c80  00000000  00000000  000386d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000b30  00000000  00000000  00039355  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000bec0  00000000  00000000  00039e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000fba7  00000000  00000000  00045d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001fe36  00000000  00000000  000558ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  00075722  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000039  00000000  00000000  00075792  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000021a4  00000000  00000000  000757cc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0043c4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000059c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002428 l     F .text	000000ac uartProcessIRQ
10000564 l     O .bss	00000004 rxIsrCallbackUART0
10000568 l     O .bss	00000004 txIsrCallbackUART0
1000056c l     O .bss	00000004 txIsrCallbackUART2
10000570 l     O .bss	00000004 txIsrCallbackUART3
1a0041d8 l     O .text	00000048 lpcUarts
10000574 l     O .bss	00000004 rxIsrCallbackUART2
10000578 l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 adc_dac.c
100000d0 l     O .bss	00000228 fp
100002f8 l     O .bss	00000230 fs
10000528 l     O .bss	00000028 uartBuff
00000000 l    df *ABS*	00000000 ff.c
1a000618 l     F .text	0000000a ld_word
1a000624 l     F .text	00000016 ld_dword
1a00063c l     F .text	00000008 st_word
1a000644 l     F .text	00000014 st_dword
1a000658 l     F .text	00000012 mem_cpy
1a00066c l     F .text	0000000a mem_set
1a000678 l     F .text	0000001e mem_cmp
1a000698 l     F .text	00000010 chk_chr
1a0006a8 l     F .text	00000018 clust2sect
1a0006c0 l     F .text	00000024 ld_clust
1a0006e4 l     F .text	00000024 st_clust
1a000708 l     F .text	000000d0 create_name
1a0007d8 l     F .text	00000056 get_ldnumber
1a000830 l     F .text	00000034 validate
1a000864 l     F .text	00000054 sync_window
1a0008b8 l     F .text	00000034 move_window
1a0008ec l     F .text	0000007c check_fs
1a000968 l     F .text	000002d4 find_volume
1a000c3c l     F .text	0000010a put_fat
1a000d48 l     F .text	000000d0 get_fat
1a000e18 l     F .text	000000b0 dir_sdi
1a000ec8 l     F .text	000000ca create_chain
1a000f94 l     F .text	0000007c remove_chain
1a001010 l     F .text	00000126 dir_next
1a001138 l     F .text	00000054 dir_find
1a00118c l     F .text	0000008c follow_path
1a001218 l     F .text	0000004c dir_alloc
1a001264 l     F .text	0000003a dir_register
1a0012a0 l     F .text	0000008c sync_fs
10000550 l     O .bss	00000002 Fsid
10000554 l     O .bss	00000004 FatFs
00000000 l    df *ABS*	00000000 mmc.c
1a0017c8 l     F .text	00000004 chk_power
1a0017cc l     F .text	00000024 SSPSend
1a0017f0 l     F .text	00000018 xmit_spi
1a00182c l     F .text	0000001c rcvr_spi
1a001848 l     F .text	00000024 wait_ready
1a00186c l     F .text	00000018 deselect
1a001884 l     F .text	00000024 select_
1a0018a8 l     F .text	0000007e send_cmd
1a001928 l     F .text	0000005c xmit_datablock
1a001984 l     F .text	00000064 rcvr_datablock
10000558 l     O .bss	00000001 Timer1
10000559 l     O .bss	00000001 Timer2
1000055a l     O .bss	00000001 CardType
10000000 l     O .data	00000001 Stat
00000000 l    df *ABS*	00000000 sapi_rtc.c
1000055b l     O .bss	00000001 init.10204
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000008 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a001fc0 l     F .text	00000010 clearInterrupt
1a001fd0 l     F .text	00000060 serveInterrupt
1000000c l     O .data	00000048 ultrasonicSensors
1a00409c l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002138 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0026cc l     F .text	00000002 errorOcurred
1a0026d0 l     F .text	00000002 doNothing
10000054 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a0028c4 l     F .text	00000040 Board_LED_Init
1a002904 l     F .text	0000003c Board_TEC_Init
1a002940 l     F .text	0000003c Board_GPIO_Init
1a00297c l     F .text	00000038 Board_SPI_Init
1a0029b4 l     F .text	00000024 Board_I2C_Init
1a0029d8 l     F .text	00000030 Board_ADC_Init
1a004220 l     O .text	00000012 GpioPorts
1a00423c l     O .text	00000008 GpioButtons
1a004244 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004250 l     O .text	0000000c InitClkStates
1a00425c l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002b30 l     F .text	0000002c Chip_UART_GetIndex
1a0042f4 l     O .text	00000008 UART_BClock
1a0042fc l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002cd4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002ce8 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002eb8 l     F .text	000000a8 pll_calc_divs
1a002f60 l     F .text	00000104 pll_get_frac
1a003064 l     F .text	00000048 Chip_Clock_FindBaseClock
1a0032d0 l     F .text	00000022 Chip_Clock_GetDivRate
1000057c l     O .bss	00000008 audio_usb_pll_freq
1a004310 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00437c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 rtc_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003720 l     F .text	0000001a SSP_Write2BFifo
1a00373c l     F .text	00000018 SSP_Write1BFifo
1a003754 l     F .text	0000002a SSP_Read2BFifo
1a003780 l     F .text	0000002a SSP_Read1BFifo
1a0037ac l     F .text	00000014 Chip_SSP_GetClockIndex
1a0037c0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000094 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a0043cc l       .ARM.exidx	00000000 __exidx_end
1a0043cc l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a0043c4 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
00000000 l       *UND*	00000000 _printf_float
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a0043c4 l       .bss_RAM5	00000000 __init_array_end
1a0043c4 l       .bss_RAM5	00000000 __preinit_array_end
1000059c l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a0043c4 l       .bss_RAM5	00000000 __init_array_start
1a0043c4 l       .bss_RAM5	00000000 __preinit_array_start
1a0030f8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a003a70 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a002750 g     F .text	00000040 TIMER2_IRQHandler
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a002d80 g     F .text	00000016 Chip_ADC_DeInit
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a003aa4 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
1a003684 g     F .text	00000030 Chip_RTC_GetFullTime
1a002670 g     F .text	0000003e delayRead
10000560 g     O .bss	00000004 callBackFuncParams
1a000188  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a002e4c g     F .text	0000000c Chip_ADC_SetResolution
1a0023f8 g     F .text	00000030 SysTick_Handler
1a002bb0 g     F .text	00000040 Chip_UART_SetBaud
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a0001a0  w    F .text	00000002 PendSV_Handler
1a000184  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
53ff3eb6 g       *ABS*	00000000 __valid_user_code_checksum
1a001f0c g     F .text	00000034 rtcRead
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a002790 g     F .text	00000040 TIMER3_IRQHandler
1a00335c g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a0019e8 g     F .text	00000158 disk_initialize
1a003a10 g     F .text	00000000 .hidden __aeabi_uldivmod
1000059c g       .noinit	00000000 _noinit
1a002598 g     F .text	00000018 uartWriteString
10000598 g     O .bss	00000004 SystemCoreClock
1a002b5c g     F .text	00000054 Chip_UART_Init
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a002d28 g     F .text	00000018 readAdcVal
1a000194  w    F .text	00000002 UsageFault_Handler
1a003424 g     F .text	0000004c Chip_Clock_GetRate
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
10000588 g     O .bss	00000008 tickCounter
1a001b40 g     F .text	00000014 disk_status
1a002ab8 g     F .text	0000006c Board_SetupClocking
1a000300 g     F .text	00000064 itoa
1a004238 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001c88 g     F .text	00000284 disk_ioctl
1a00203c g     F .text	0000000a GPIO1_IRQHandler
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a001f70 g     F .text	00000034 rtcInit
1a0002fc g     O .text	00000004 CRP_WORD
1a002d18 g     F .text	0000000e setStartMode
1a003fac g     F .text	0000004c __libc_init_array
1a003d40 g     F .text	0000026a .hidden __udivdi3
1a002054 g     F .text	0000008c adcInit
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a002a2c g     F .text	0000003c Board_Init
1a003a0c g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0037ec g     F .text	000000b0 Chip_SSP_RWFrames_Blocking
1a0001a8  w    F .text	00000002 RTC_IRQHandler
1000059c g       .bss	00000000 _ebss
1a002e58 g     F .text	00000026 Chip_ADC_EnableChannel
1a0026d4 g     F .text	0000003c TIMER0_IRQHandler
1a00237c g     F .text	0000007c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a003958 g     F .text	00000030 Chip_I2C_SetClockRate
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a0030ac g     F .text	0000004c Chip_Clock_EnableCrystal
1a003654 g     F .text	0000002e Chip_RTC_SetFullTime
1a002d98 g     F .text	00000008 Chip_ADC_ReadValue
1a0001ac g     F .text	0000001a data_init
1a00363c g     F .text	00000018 Chip_RTC_Enable
1a002df8 g     F .text	00000020 Chip_ADC_SetStartMode
1a002710 g     F .text	00000040 TIMER1_IRQHandler
1a003934 g     F .text	00000024 Chip_I2C_Init
1a0025b0 g     F .text	0000000a UART2_IRQHandler
1a003268 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a003618 g     F .text	00000022 Chip_RTC_ResetClockTickCounter
1a0040a0 g     O .text	00000136 gpioPinsInit
1a00257c g     F .text	0000001a uartWriteByte
1a0037d8 g     F .text	00000012 Chip_SSP_SetClockRate
1a002048 g     F .text	0000000a GPIO2_IRQHandler
1a0020e0 g     F .text	00000058 adcRead
1a003338 g     F .text	00000024 Chip_Clock_GetBaseClock
100000d0 g       .bss	00000000 _bss
1a002da0 g     F .text	00000038 Chip_ADC_ReadStatus
1a002e18 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0017a4 g     F .text	00000024 f_close
1a002650 g     F .text	00000020 delayInit
1a001808 g     F .text	00000024 SSPReceive
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a00389c g     F .text	0000003e Chip_SSP_SetBitRate
1a00371c g     F .text	00000002 Chip_GPIO_Init
1a004234 g     O .text	00000004 OscRateIn
1a002500 g     F .text	0000007c uartInit
1000059c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a002164 g     F .text	0000019c gpioInit
1a0036d4 g     F .text	00000048 Chip_RTC_Init
1a003aa0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a0033f0 g     F .text	00000034 Chip_Clock_Disable
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a003114 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003ff8 g     F .text	00000010 memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a000604 g     F .text	00000014 main
1a001708 g     F .text	0000009c f_sync
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a0025c8 g     F .text	00000050 spiInit
1a000198  w    F .text	00000002 SVC_Handler
10000004 g     O .data	00000004 DWT_CTRL
1a0024d4 g     F .text	00000018 uartTxReady
1a00132c g     F .text	00000058 f_mount
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a003368 g     F .text	0000003c Chip_Clock_EnableOpts
1a003130 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0035c0 g     F .text	00000058 fpuInit
1a0031e8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002a68 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a002618 g     F .text	00000038 delay
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0033d8 g     F .text	00000018 Chip_Clock_RTCEnable
1a002300 g     F .text	00000058 gpioWrite
1a002d40 g     F .text	00000040 Chip_ADC_Init
1a002a84 g     F .text	00000034 Board_SetupMuxing
1a001f40 g     F .text	00000030 rtcWrite
1a002bf0 g     F .text	000000e4 Chip_UART_SetBaudFDR
1a002358 g     F .text	0000000c tickRead
10000590 g     O .bss	00000008 tickRateMS
1a002e80 g     F .text	00000022 Chip_ADC_SetBurstCmd
1a0001a8  w    F .text	00000002 ETH_IRQHandler
1000055c g     O .bss	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0024ec g     F .text	00000014 uartTxWrite
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000178 g       .text	00000000 __section_table_end
1a0038dc g     F .text	00000038 Chip_SSP_Init
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a002a08 g     F .text	00000024 Board_Debug_Init
1a002dd8 g     F .text	0000001e Chip_ADC_Int_SetChannelCmd
100000cc g       .data	00000000 _edata
1a003914 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a001560 g     F .text	000001a8 f_write
1a003470 g     F .text	00000150 Chip_SetupCoreClock
1a002030 g     F .text	0000000a GPIO0_IRQHandler
1a001384 g     F .text	000001dc f_open
1a001bdc g     F .text	000000ac disk_write
1a000000 g     O .text	00000114 g_pfnVectors
1a003988 g     F .text	00000084 ResetISR
1a002ea4 g     F .text	00000014 SystemCoreClockUpdate
1a0036b4 g     F .text	00000020 Chip_RTC_CalibCounterCmd
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a003aa0  w    F .text	00000002 .hidden __aeabi_idiv0
1a000470 g     F .text	00000194 adcLog
1a000190  w    F .text	00000002 BusFault_Handler
1a001b54 g     F .text	00000088 disk_read
1a0033a4 g     F .text	00000034 Chip_Clock_Enable
1a0025bc g     F .text	0000000a UART3_IRQHandler
1a0026b0 g     F .text	0000001c delayWrite
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a003a40 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a0027d0 g     F .text	000000f4 boardInit
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a002364 g     F .text	00000018 tickPowerSet
1a000364 g     F .text	0000010c stringDateTime
1a0032f4 g     F .text	00000044 Chip_Clock_SetBaseClock
1a001fa4 g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a002b24 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 89 39 00 1a 85 01 00 1a 89 01 00 1a     .....9..........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a b6 3e ff 53     .............>.S
	...
1a00002c:	99 01 00 1a 9d 01 00 1a 00 00 00 00 a1 01 00 1a     ................
1a00003c:	f9 23 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     .#..............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a d5 26 00 1a 11 27 00 1a 51 27 00 1a     .....&...'..Q'..
1a00007c:	91 27 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     .'..............
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a b1 25 00 1a     ....y........%..
1a0000ac:	bd 25 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     .%..............
1a0000bc:	a9 01 00 1a 31 20 00 1a 3d 20 00 1a 49 20 00 1a     ....1 ..= ..I ..
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a0043cc 	.word	0x1a0043cc
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000cc 	.word	0x000000cc
1a000120:	1a0043cc 	.word	0x1a0043cc
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0043cc 	.word	0x1a0043cc
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0043cc 	.word	0x1a0043cc
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0043cc 	.word	0x1a0043cc
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	000004cc 	.word	0x000004cc
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f002 f954 	bl	1a002428 <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop

1a000198 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <SVC_Handler>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop

1a0001a0 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <PendSV_Handler>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <PendSV_Handler+0x4>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <itoa>:

 */
/*===========================================================================*/
char* itoa(int value, char* result, int base) {
   // check that the base if valid
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a000300:	1e93      	subs	r3, r2, #2
1a000302:	2b22      	cmp	r3, #34	; 0x22
1a000304:	d903      	bls.n	1a00030e <itoa+0xe>
1a000306:	2300      	movs	r3, #0
1a000308:	700b      	strb	r3, [r1, #0]
      tmp_char = *ptr;
      *ptr--= *ptr1;
      *ptr1++ = tmp_char;
   }
   return result;
}
1a00030a:	4608      	mov	r0, r1
1a00030c:	4770      	bx	lr
 * Written by Lukás Chmela
 * Released under GPLv3.

 */
/*===========================================================================*/
char* itoa(int value, char* result, int base) {
1a00030e:	b4f0      	push	{r4, r5, r6, r7}
1a000310:	460d      	mov	r5, r1
1a000312:	e001      	b.n	1a000318 <itoa+0x18>
   int tmp_value;

   do {
      tmp_value = value;
      value /= base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a000314:	4635      	mov	r5, r6
   char* ptr = result, *ptr1 = result, tmp_char;
   int tmp_value;

   do {
      tmp_value = value;
      value /= base;
1a000316:	4620      	mov	r0, r4
1a000318:	fb90 f4f2 	sdiv	r4, r0, r2
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a00031c:	1c6e      	adds	r6, r5, #1
1a00031e:	fb02 0314 	mls	r3, r2, r4, r0
1a000322:	3323      	adds	r3, #35	; 0x23
1a000324:	4f0e      	ldr	r7, [pc, #56]	; (1a000360 <itoa+0x60>)
1a000326:	5cfb      	ldrb	r3, [r7, r3]
1a000328:	702b      	strb	r3, [r5, #0]
   } while ( value );
1a00032a:	2c00      	cmp	r4, #0
1a00032c:	d1f2      	bne.n	1a000314 <itoa+0x14>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a00032e:	2800      	cmp	r0, #0
1a000330:	da02      	bge.n	1a000338 <itoa+0x38>
1a000332:	1cae      	adds	r6, r5, #2
1a000334:	232d      	movs	r3, #45	; 0x2d
1a000336:	706b      	strb	r3, [r5, #1]
   *ptr-- = '\0';
1a000338:	1e72      	subs	r2, r6, #1
1a00033a:	2300      	movs	r3, #0
1a00033c:	7033      	strb	r3, [r6, #0]
/*===========================================================================*/
char* itoa(int value, char* result, int base) {
   // check that the base if valid
   if (base < 2 || base > 36) { *result = '\0'; return result; }

   char* ptr = result, *ptr1 = result, tmp_char;
1a00033e:	460b      	mov	r3, r1
   } while ( value );

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
   while(ptr1 < ptr) {
1a000340:	e009      	b.n	1a000356 <itoa+0x56>
      tmp_char = *ptr;
1a000342:	4614      	mov	r4, r2
1a000344:	f814 0901 	ldrb.w	r0, [r4], #-1
      *ptr--= *ptr1;
1a000348:	461d      	mov	r5, r3
1a00034a:	f815 6b01 	ldrb.w	r6, [r5], #1
1a00034e:	7016      	strb	r6, [r2, #0]
      *ptr1++ = tmp_char;
1a000350:	7018      	strb	r0, [r3, #0]
1a000352:	462b      	mov	r3, r5
   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
   while(ptr1 < ptr) {
      tmp_char = *ptr;
      *ptr--= *ptr1;
1a000354:	4622      	mov	r2, r4
   } while ( value );

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
   while(ptr1 < ptr) {
1a000356:	4293      	cmp	r3, r2
1a000358:	d3f3      	bcc.n	1a000342 <itoa+0x42>
      tmp_char = *ptr;
      *ptr--= *ptr1;
      *ptr1++ = tmp_char;
   }
   return result;
}
1a00035a:	4608      	mov	r0, r1
1a00035c:	bcf0      	pop	{r4, r5, r6, r7}
1a00035e:	4770      	bx	lr
1a000360:	1a004008 	.word	0x1a004008

1a000364 <stringDateTime>:
/*=============================================================================*/
/* Enviar la fecha y hora en formato "DD/MM/YYYY, HH:MM:SS" */
void stringDateTime( rtc_t * rtc ){
1a000364:	b538      	push	{r3, r4, r5, lr}
1a000366:	4604      	mov	r4, r0

   /* Conversion de entero a ascii con base decimal */
   itoa( (int) (rtc->mday), (char*)uartBuff[3], 10 ); /* 10 significa decimal */
1a000368:	78c0      	ldrb	r0, [r0, #3]
1a00036a:	493e      	ldr	r1, [pc, #248]	; (1a000464 <stringDateTime+0x100>)
1a00036c:	220a      	movs	r2, #10
1a00036e:	f7ff ffc7 	bl	1a000300 <itoa>
   /* Envio el dia */
   if( (rtc->mday)<10 ){
1a000372:	78e3      	ldrb	r3, [r4, #3]
1a000374:	2b09      	cmp	r3, #9
1a000376:	d803      	bhi.n	1a000380 <stringDateTime+0x1c>
      uartWriteByte( UART_USB, '0' );
1a000378:	2003      	movs	r0, #3
1a00037a:	2130      	movs	r1, #48	; 0x30
1a00037c:	f002 f8fe 	bl	1a00257c <uartWriteByte>
   }
   uartWriteString( UART_USB, uartBuff[3] );
1a000380:	4d38      	ldr	r5, [pc, #224]	; (1a000464 <stringDateTime+0x100>)
1a000382:	2003      	movs	r0, #3
1a000384:	4629      	mov	r1, r5
1a000386:	f002 f907 	bl	1a002598 <uartWriteString>
   uartWriteByte( UART_USB, '/' );
1a00038a:	2003      	movs	r0, #3
1a00038c:	212f      	movs	r1, #47	; 0x2f
1a00038e:	f002 f8f5 	bl	1a00257c <uartWriteByte>

   /* Conversion de entero a ascii con base decimal */
   itoa( (int) (rtc->month), (char*)uartBuff[3], 10 ); /* 10 significa decimal */
1a000392:	78a0      	ldrb	r0, [r4, #2]
1a000394:	4629      	mov	r1, r5
1a000396:	220a      	movs	r2, #10
1a000398:	f7ff ffb2 	bl	1a000300 <itoa>
   /* Envio el mes */
   if( (rtc->month)<10 ){
1a00039c:	78a3      	ldrb	r3, [r4, #2]
1a00039e:	2b09      	cmp	r3, #9
1a0003a0:	d803      	bhi.n	1a0003aa <stringDateTime+0x46>
      uartWriteByte( UART_USB, '0' );
1a0003a2:	2003      	movs	r0, #3
1a0003a4:	2130      	movs	r1, #48	; 0x30
1a0003a6:	f002 f8e9 	bl	1a00257c <uartWriteByte>
   }
   uartWriteString( UART_USB, uartBuff[3] );
1a0003aa:	4d2e      	ldr	r5, [pc, #184]	; (1a000464 <stringDateTime+0x100>)
1a0003ac:	2003      	movs	r0, #3
1a0003ae:	4629      	mov	r1, r5
1a0003b0:	f002 f8f2 	bl	1a002598 <uartWriteString>
   uartWriteByte( UART_USB, '/' );
1a0003b4:	2003      	movs	r0, #3
1a0003b6:	212f      	movs	r1, #47	; 0x2f
1a0003b8:	f002 f8e0 	bl	1a00257c <uartWriteByte>

   /* Conversion de entero a ascii con base decimal */
   itoa( (int) (rtc->year), (char*)uartBuff[3], 10 ); /* 10 significa decimal */
1a0003bc:	8820      	ldrh	r0, [r4, #0]
1a0003be:	4629      	mov	r1, r5
1a0003c0:	220a      	movs	r2, #10
1a0003c2:	f7ff ff9d 	bl	1a000300 <itoa>
   /* Envio el año */
   if( (rtc->year)<10 ){
1a0003c6:	8823      	ldrh	r3, [r4, #0]
1a0003c8:	2b09      	cmp	r3, #9
1a0003ca:	d803      	bhi.n	1a0003d4 <stringDateTime+0x70>
      uartWriteByte( UART_USB, '0' );
1a0003cc:	2003      	movs	r0, #3
1a0003ce:	2130      	movs	r1, #48	; 0x30
1a0003d0:	f002 f8d4 	bl	1a00257c <uartWriteByte>
   }
   uartWriteString( UART_USB, uartBuff[3] );
1a0003d4:	4d23      	ldr	r5, [pc, #140]	; (1a000464 <stringDateTime+0x100>)
1a0003d6:	2003      	movs	r0, #3
1a0003d8:	4629      	mov	r1, r5
1a0003da:	f002 f8dd 	bl	1a002598 <uartWriteString>
   uartWriteString( UART_USB, ", ");
1a0003de:	2003      	movs	r0, #3
1a0003e0:	4921      	ldr	r1, [pc, #132]	; (1a000468 <stringDateTime+0x104>)
1a0003e2:	f002 f8d9 	bl	1a002598 <uartWriteString>


   /* Conversion de entero a ascii con base decimal */
   itoa( (int) (rtc->hour), (char*)uartBuff[3], 10 ); /* 10 significa decimal */
1a0003e6:	7960      	ldrb	r0, [r4, #5]
1a0003e8:	4629      	mov	r1, r5
1a0003ea:	220a      	movs	r2, #10
1a0003ec:	f7ff ff88 	bl	1a000300 <itoa>
   /* Envio la hora */
   if( (rtc->hour)<10 ){
1a0003f0:	7963      	ldrb	r3, [r4, #5]
1a0003f2:	2b09      	cmp	r3, #9
1a0003f4:	d803      	bhi.n	1a0003fe <stringDateTime+0x9a>
      uartWriteByte( UART_USB, '0' );
1a0003f6:	2003      	movs	r0, #3
1a0003f8:	2130      	movs	r1, #48	; 0x30
1a0003fa:	f002 f8bf 	bl	1a00257c <uartWriteByte>
   }
   uartWriteString( UART_USB, uartBuff[3] );
1a0003fe:	4d19      	ldr	r5, [pc, #100]	; (1a000464 <stringDateTime+0x100>)
1a000400:	2003      	movs	r0, #3
1a000402:	4629      	mov	r1, r5
1a000404:	f002 f8c8 	bl	1a002598 <uartWriteString>
   uartWriteByte( UART_USB, ':' );
1a000408:	2003      	movs	r0, #3
1a00040a:	213a      	movs	r1, #58	; 0x3a
1a00040c:	f002 f8b6 	bl	1a00257c <uartWriteByte>

   /* Conversion de entero a ascii con base decimal */
   itoa( (int) (rtc->min), (char*)uartBuff[3], 10 ); /* 10 significa decimal */
1a000410:	79a0      	ldrb	r0, [r4, #6]
1a000412:	4629      	mov	r1, r5
1a000414:	220a      	movs	r2, #10
1a000416:	f7ff ff73 	bl	1a000300 <itoa>
   /* Envio los minutos */
   if( (rtc->min)<10 ){
1a00041a:	79a3      	ldrb	r3, [r4, #6]
1a00041c:	2b09      	cmp	r3, #9
1a00041e:	d803      	bhi.n	1a000428 <stringDateTime+0xc4>
	  uartWriteByte( UART_USB, '0' );
1a000420:	2003      	movs	r0, #3
1a000422:	2130      	movs	r1, #48	; 0x30
1a000424:	f002 f8aa 	bl	1a00257c <uartWriteByte>
   }

   uartWriteString( UART_USB, uartBuff[3] );
1a000428:	4d0e      	ldr	r5, [pc, #56]	; (1a000464 <stringDateTime+0x100>)
1a00042a:	2003      	movs	r0, #3
1a00042c:	4629      	mov	r1, r5
1a00042e:	f002 f8b3 	bl	1a002598 <uartWriteString>
   uartWriteByte( UART_USB, ':' );
1a000432:	2003      	movs	r0, #3
1a000434:	213a      	movs	r1, #58	; 0x3a
1a000436:	f002 f8a1 	bl	1a00257c <uartWriteByte>

   /* Conversion de entero a ascii con base decimal */
   itoa( (int) (rtc->sec), (char*)uartBuff[3], 10 ); /* 10 significa decimal */
1a00043a:	79e0      	ldrb	r0, [r4, #7]
1a00043c:	4629      	mov	r1, r5
1a00043e:	220a      	movs	r2, #10
1a000440:	f7ff ff5e 	bl	1a000300 <itoa>
   /* Envio los segundos */
   if( (rtc->sec)<10 ){
1a000444:	79e3      	ldrb	r3, [r4, #7]
1a000446:	2b09      	cmp	r3, #9
1a000448:	d803      	bhi.n	1a000452 <stringDateTime+0xee>
	  uartWriteByte( UART_USB, '0' );
1a00044a:	2003      	movs	r0, #3
1a00044c:	2130      	movs	r1, #48	; 0x30
1a00044e:	f002 f895 	bl	1a00257c <uartWriteByte>
   }
   uartWriteString( UART_USB, uartBuff[3] );
1a000452:	2003      	movs	r0, #3
1a000454:	4903      	ldr	r1, [pc, #12]	; (1a000464 <stringDateTime+0x100>)
1a000456:	f002 f89f 	bl	1a002598 <uartWriteString>

   /* Envio un 'enter' */
   uartWriteString( UART_USB, "\r\n");
1a00045a:	2003      	movs	r0, #3
1a00045c:	4903      	ldr	r1, [pc, #12]	; (1a00046c <stringDateTime+0x108>)
1a00045e:	f002 f89b 	bl	1a002598 <uartWriteString>
1a000462:	bd38      	pop	{r3, r4, r5, pc}
1a000464:	10000546 	.word	0x10000546
1a000468:	1a004050 	.word	0x1a004050
1a00046c:	1a004054 	.word	0x1a004054

1a000470 <adcLog>:
}

// Implementacion de funcion de la tarea logTask
void adcLog( void ){
1a000470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000474:	b090      	sub	sp, #64	; 0x40
   adcConfig( ADC_ENABLE );
1a000476:	2000      	movs	r0, #0
1a000478:	f001 fdec 	bl	1a002054 <adcInit>

   // SPI configuration
   spiConfig( SPI0 );
1a00047c:	2000      	movs	r0, #0
1a00047e:	f002 f8a3 	bl	1a0025c8 <spiInit>

   UINT nbytes;

   if( f_mount( &fs, "", 0 ) != FR_OK ){
1a000482:	4856      	ldr	r0, [pc, #344]	; (1a0005dc <adcLog+0x16c>)
1a000484:	4956      	ldr	r1, [pc, #344]	; (1a0005e0 <adcLog+0x170>)
1a000486:	2200      	movs	r2, #0
1a000488:	f000 ff50 	bl	1a00132c <f_mount>
         // Check whether the SD card is correctly connected
   }

   // Estructura RTC
   rtc_t rtc;
   rtc.year = 2018;
1a00048c:	f240 73e2 	movw	r3, #2018	; 0x7e2
1a000490:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   rtc.month = 7;
1a000494:	2307      	movs	r3, #7
1a000496:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
   rtc.mday = 27;
1a00049a:	231b      	movs	r3, #27
1a00049c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   rtc.wday = 1;
1a0004a0:	2301      	movs	r3, #1
1a0004a2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   rtc.hour = 10;
1a0004a6:	230a      	movs	r3, #10
1a0004a8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   rtc.min = 35;
1a0004ac:	2323      	movs	r3, #35	; 0x23
1a0004ae:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
   rtc.sec= 0;
1a0004b2:	f04f 0900 	mov.w	r9, #0
1a0004b6:	f88d 903b 	strb.w	r9, [sp, #59]	; 0x3b

   bool_t val = rtcConfig( &rtc );
1a0004ba:	a80d      	add	r0, sp, #52	; 0x34
1a0004bc:	f001 fd58 	bl	1a001f70 <rtcInit>
   delay(2000);
1a0004c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
1a0004c4:	2100      	movs	r1, #0
1a0004c6:	f002 f8a7 	bl	1a002618 <delay>
   uint16_t muestraCH3 = 0;

   delay_t delay1;
   delay_t delay2;

   delayConfig( &delay1, 600 );
1a0004ca:	a806      	add	r0, sp, #24
1a0004cc:	f44f 7216 	mov.w	r2, #600	; 0x258
1a0004d0:	2300      	movs	r3, #0
1a0004d2:	f002 f8bd 	bl	1a002650 <delayInit>
   delayConfig( &delay2, 300 );
1a0004d6:	4668      	mov	r0, sp
1a0004d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
1a0004dc:	2300      	movs	r3, #0
1a0004de:	f002 f8b7 	bl	1a002650 <delayInit>
   bool_t val = rtcConfig( &rtc );
   delay(2000);

   bool_t ledState1 = OFF;

   uint32_t i = 0;
1a0004e2:	46ca      	mov	sl, r9

   // ---------- REPETIR POR SIEMPRE --------------------------
   while( TRUE )
   {
	   /* delayRead retorna TRUE */
	        if ( delayRead( &delay1 ) ){
1a0004e4:	a806      	add	r0, sp, #24
1a0004e6:	f002 f8c3 	bl	1a002670 <delayRead>
1a0004ea:	2800      	cmp	r0, #0
1a0004ec:	d05f      	beq.n	1a0005ae <adcLog+0x13e>

	           /* Leo Entradas Analogicas */
	           muestraCH1 = adcRead( CH1 );
1a0004ee:	2041      	movs	r0, #65	; 0x41
1a0004f0:	f001 fdf6 	bl	1a0020e0 <adcRead>
1a0004f4:	4607      	mov	r7, r0
	           muestraCH2 = adcRead( CH2 );
1a0004f6:	2040      	movs	r0, #64	; 0x40
1a0004f8:	f001 fdf2 	bl	1a0020e0 <adcRead>
1a0004fc:	4606      	mov	r6, r0
	           muestraCH3 = adcRead( CH3 );
1a0004fe:	203f      	movs	r0, #63	; 0x3f
1a000500:	f001 fdee 	bl	1a0020e0 <adcRead>
1a000504:	4680      	mov	r8, r0

	           val = rtcRead( &rtc );
1a000506:	a80d      	add	r0, sp, #52	; 0x34
1a000508:	f001 fd00 	bl	1a001f0c <rtcRead>

	           f_open( &fp, FILENAME, FA_WRITE | FA_OPEN_APPEND );
1a00050c:	4c35      	ldr	r4, [pc, #212]	; (1a0005e4 <adcLog+0x174>)
1a00050e:	4620      	mov	r0, r4
1a000510:	4935      	ldr	r1, [pc, #212]	; (1a0005e8 <adcLog+0x178>)
1a000512:	2232      	movs	r2, #50	; 0x32
1a000514:	f000 ff36 	bl	1a001384 <f_open>

	           /* Conversión de muestra entera a ascii con base decimal */
	           itoa( muestraCH1, uartBuff[0], 10 ); /* 10 significa decimal */
1a000518:	4d34      	ldr	r5, [pc, #208]	; (1a0005ec <adcLog+0x17c>)
1a00051a:	4638      	mov	r0, r7
1a00051c:	4629      	mov	r1, r5
1a00051e:	220a      	movs	r2, #10
1a000520:	f7ff feee 	bl	1a000300 <itoa>
	           itoa( muestraCH2, uartBuff[1], 10 ); /* 10 significa decimal */
1a000524:	f105 070a 	add.w	r7, r5, #10
1a000528:	4630      	mov	r0, r6
1a00052a:	4639      	mov	r1, r7
1a00052c:	220a      	movs	r2, #10
1a00052e:	f7ff fee7 	bl	1a000300 <itoa>
	           itoa( muestraCH3, uartBuff[2], 10 ); /* 10 significa decimal */
1a000532:	f105 0614 	add.w	r6, r5, #20
1a000536:	4640      	mov	r0, r8
1a000538:	4631      	mov	r1, r6
1a00053a:	220a      	movs	r2, #10
1a00053c:	f7ff fee0 	bl	1a000300 <itoa>

	           /* Enviar muestra*/
	           uartWriteString( UART_USB, uartBuff[0] );
1a000540:	2003      	movs	r0, #3
1a000542:	4629      	mov	r1, r5
1a000544:	f002 f828 	bl	1a002598 <uartWriteString>
	           uartWriteString( UART_USB, ";\t" );
1a000548:	4d29      	ldr	r5, [pc, #164]	; (1a0005f0 <adcLog+0x180>)
1a00054a:	2003      	movs	r0, #3
1a00054c:	4629      	mov	r1, r5
1a00054e:	f002 f823 	bl	1a002598 <uartWriteString>

	           f_write( &fp, "CH1\t", 4, &nbytes );
1a000552:	4620      	mov	r0, r4
1a000554:	4927      	ldr	r1, [pc, #156]	; (1a0005f4 <adcLog+0x184>)
1a000556:	2204      	movs	r2, #4
1a000558:	ab0f      	add	r3, sp, #60	; 0x3c
1a00055a:	f001 f801 	bl	1a001560 <f_write>

	           uartWriteString( UART_USB, uartBuff[1] );
1a00055e:	2003      	movs	r0, #3
1a000560:	4639      	mov	r1, r7
1a000562:	f002 f819 	bl	1a002598 <uartWriteString>
	           uartWriteString( UART_USB, ";\t" );
1a000566:	2003      	movs	r0, #3
1a000568:	4629      	mov	r1, r5
1a00056a:	f002 f815 	bl	1a002598 <uartWriteString>

	           f_write( &fp, "CH2\t", 4, &nbytes );
1a00056e:	4620      	mov	r0, r4
1a000570:	4921      	ldr	r1, [pc, #132]	; (1a0005f8 <adcLog+0x188>)
1a000572:	2204      	movs	r2, #4
1a000574:	ab0f      	add	r3, sp, #60	; 0x3c
1a000576:	f000 fff3 	bl	1a001560 <f_write>

	           uartWriteString( UART_USB, uartBuff[2] );
1a00057a:	2003      	movs	r0, #3
1a00057c:	4631      	mov	r1, r6
1a00057e:	f002 f80b 	bl	1a002598 <uartWriteString>
	           uartWriteString( UART_USB, ";\t" );
1a000582:	2003      	movs	r0, #3
1a000584:	4629      	mov	r1, r5
1a000586:	f002 f807 	bl	1a002598 <uartWriteString>

	           f_write( &fp, "CH3\t", 4, &nbytes );
1a00058a:	4620      	mov	r0, r4
1a00058c:	491b      	ldr	r1, [pc, #108]	; (1a0005fc <adcLog+0x18c>)
1a00058e:	2204      	movs	r2, #4
1a000590:	ab0f      	add	r3, sp, #60	; 0x3c
1a000592:	f000 ffe5 	bl	1a001560 <f_write>

	           stringDateTime( &rtc );
1a000596:	a80d      	add	r0, sp, #52	; 0x34
1a000598:	f7ff fee4 	bl	1a000364 <stringDateTime>

	           f_write( &fp, "HORA\t", 5, &nbytes );
1a00059c:	4620      	mov	r0, r4
1a00059e:	4918      	ldr	r1, [pc, #96]	; (1a000600 <adcLog+0x190>)
1a0005a0:	2205      	movs	r2, #5
1a0005a2:	ab0f      	add	r3, sp, #60	; 0x3c
1a0005a4:	f000 ffdc 	bl	1a001560 <f_write>

	           f_close(&fp);
1a0005a8:	4620      	mov	r0, r4
1a0005aa:	f001 f8fb 	bl	1a0017a4 <f_close>
	        }

	        /* delayRead retorna TRUE*/
	        if ( delayRead( &delay2 ) ){
1a0005ae:	4668      	mov	r0, sp
1a0005b0:	f002 f85e 	bl	1a002670 <delayRead>
1a0005b4:	2800      	cmp	r0, #0
1a0005b6:	d095      	beq.n	1a0004e4 <adcLog+0x74>
	           ledState1 = !ledState1;
1a0005b8:	f089 0901 	eor.w	r9, r9, #1
	           gpioWrite( LED1, ledState1 );
1a0005bc:	202b      	movs	r0, #43	; 0x2b
1a0005be:	4649      	mov	r1, r9
1a0005c0:	f001 fe9e 	bl	1a002300 <gpioWrite>

	           i++;
1a0005c4:	f10a 0a01 	add.w	sl, sl, #1
	           if( i == 20 )
1a0005c8:	f1ba 0f14 	cmp.w	sl, #20
1a0005cc:	d18a      	bne.n	1a0004e4 <adcLog+0x74>
	              delayWrite( &delay2, 1000 );
1a0005ce:	4668      	mov	r0, sp
1a0005d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0005d4:	2300      	movs	r3, #0
1a0005d6:	f002 f86b 	bl	1a0026b0 <delayWrite>
1a0005da:	e783      	b.n	1a0004e4 <adcLog+0x74>
1a0005dc:	100002f8 	.word	0x100002f8
1a0005e0:	1a004070 	.word	0x1a004070
1a0005e4:	100000d0 	.word	0x100000d0
1a0005e8:	1a004058 	.word	0x1a004058
1a0005ec:	10000528 	.word	0x10000528
1a0005f0:	1a004068 	.word	0x1a004068
1a0005f4:	1a00406c 	.word	0x1a00406c
1a0005f8:	1a004074 	.word	0x1a004074
1a0005fc:	1a00407c 	.word	0x1a00407c
1a000600:	1a004084 	.word	0x1a004084

1a000604 <main>:
}

/*===========================================================================*/

/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a000604:	b508      	push	{r3, lr}

   /* ------------- INICIALIZACIONES ------------- */

   /* Inicializar la placa */
   boardConfig();
1a000606:	f002 f8e3 	bl	1a0027d0 <boardInit>

   /* Inicializar UART_USB a 115200 baudios */
   uartConfig( UART_USB, 115200 );
1a00060a:	2003      	movs	r0, #3
1a00060c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000610:	f001 ff76 	bl	1a002500 <uartInit>

   adcLog();
1a000614:	f7ff ff2c 	bl	1a000470 <adcLog>

1a000618 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
1a000618:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
1a00061a:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a00061c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
1a000620:	4770      	bx	lr
1a000622:	bf00      	nop

1a000624 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
1a000624:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
1a000626:	7883      	ldrb	r3, [r0, #2]
1a000628:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
1a00062c:	7843      	ldrb	r3, [r0, #1]
1a00062e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
1a000632:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000634:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
1a000638:	4770      	bx	lr
1a00063a:	bf00      	nop

1a00063c <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a00063c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
1a00063e:	0a09      	lsrs	r1, r1, #8
1a000640:	7041      	strb	r1, [r0, #1]
1a000642:	4770      	bx	lr

1a000644 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000644:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a000646:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a00064a:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a00064c:	f3c1 4307 	ubfx	r3, r1, #16, #8
1a000650:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
1a000652:	0e09      	lsrs	r1, r1, #24
1a000654:	70c1      	strb	r1, [r0, #3]
1a000656:	4770      	bx	lr

1a000658 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
1a000658:	4613      	mov	r3, r2
1a00065a:	b12a      	cbz	r2, 1a000668 <mem_cpy+0x10>
		do *d++ = *s++; while (--cnt);
1a00065c:	780a      	ldrb	r2, [r1, #0]
1a00065e:	7002      	strb	r2, [r0, #0]
1a000660:	3001      	adds	r0, #1
1a000662:	3101      	adds	r1, #1
1a000664:	3b01      	subs	r3, #1
1a000666:	d1f9      	bne.n	1a00065c <mem_cpy+0x4>
1a000668:	4770      	bx	lr
1a00066a:	bf00      	nop

1a00066c <mem_set>:
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
1a00066c:	7001      	strb	r1, [r0, #0]
1a00066e:	3001      	adds	r0, #1
1a000670:	3a01      	subs	r2, #1
1a000672:	d1fb      	bne.n	1a00066c <mem_set>
}
1a000674:	4770      	bx	lr
1a000676:	bf00      	nop

1a000678 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
1a000678:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a00067a:	1c45      	adds	r5, r0, #1
1a00067c:	7803      	ldrb	r3, [r0, #0]
1a00067e:	1c4c      	adds	r4, r1, #1
1a000680:	7808      	ldrb	r0, [r1, #0]
1a000682:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
1a000684:	3a01      	subs	r2, #1
1a000686:	d003      	beq.n	1a000690 <mem_cmp+0x18>
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a000688:	4628      	mov	r0, r5
1a00068a:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
1a00068c:	2b00      	cmp	r3, #0
1a00068e:	d0f4      	beq.n	1a00067a <mem_cmp+0x2>

	return r;
}
1a000690:	4618      	mov	r0, r3
1a000692:	bc30      	pop	{r4, r5}
1a000694:	4770      	bx	lr
1a000696:	bf00      	nop

1a000698 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
1a000698:	e000      	b.n	1a00069c <chk_chr+0x4>
1a00069a:	3001      	adds	r0, #1
1a00069c:	7803      	ldrb	r3, [r0, #0]
1a00069e:	b10b      	cbz	r3, 1a0006a4 <chk_chr+0xc>
1a0006a0:	428b      	cmp	r3, r1
1a0006a2:	d1fa      	bne.n	1a00069a <chk_chr+0x2>
	return *str;
}
1a0006a4:	4618      	mov	r0, r3
1a0006a6:	4770      	bx	lr

1a0006a8 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
1a0006a8:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
1a0006aa:	6943      	ldr	r3, [r0, #20]
1a0006ac:	3b02      	subs	r3, #2
1a0006ae:	428b      	cmp	r3, r1
1a0006b0:	d904      	bls.n	1a0006bc <clust2sect+0x14>
	return clst * fs->csize + fs->database;
1a0006b2:	8943      	ldrh	r3, [r0, #10]
1a0006b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
1a0006b6:	fb01 0003 	mla	r0, r1, r3, r0
1a0006ba:	4770      	bx	lr
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
1a0006bc:	2000      	movs	r0, #0
	return clst * fs->csize + fs->database;
}
1a0006be:	4770      	bx	lr

1a0006c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
1a0006c0:	b570      	push	{r4, r5, r6, lr}
1a0006c2:	4606      	mov	r6, r0
1a0006c4:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
1a0006c6:	f101 001a 	add.w	r0, r1, #26
1a0006ca:	f7ff ffa5 	bl	1a000618 <ld_word>
1a0006ce:	4604      	mov	r4, r0
	if (fs->fs_type == FS_FAT32) {
1a0006d0:	7833      	ldrb	r3, [r6, #0]
1a0006d2:	2b03      	cmp	r3, #3
1a0006d4:	d105      	bne.n	1a0006e2 <ld_clust+0x22>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1a0006d6:	f105 0014 	add.w	r0, r5, #20
1a0006da:	f7ff ff9d 	bl	1a000618 <ld_word>
1a0006de:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	}

	return cl;
}
1a0006e2:	bd70      	pop	{r4, r5, r6, pc}

1a0006e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
1a0006e4:	b570      	push	{r4, r5, r6, lr}
1a0006e6:	4606      	mov	r6, r0
1a0006e8:	460d      	mov	r5, r1
1a0006ea:	4614      	mov	r4, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
1a0006ec:	f101 001a 	add.w	r0, r1, #26
1a0006f0:	b291      	uxth	r1, r2
1a0006f2:	f7ff ffa3 	bl	1a00063c <st_word>
	if (fs->fs_type == FS_FAT32) {
1a0006f6:	7833      	ldrb	r3, [r6, #0]
1a0006f8:	2b03      	cmp	r3, #3
1a0006fa:	d104      	bne.n	1a000706 <st_clust+0x22>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1a0006fc:	f105 0014 	add.w	r0, r5, #20
1a000700:	0c21      	lsrs	r1, r4, #16
1a000702:	f7ff ff9b 	bl	1a00063c <st_word>
1a000706:	bd70      	pop	{r4, r5, r6, pc}

1a000708 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
1a000708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00070c:	4682      	mov	sl, r0
1a00070e:	4689      	mov	r9, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
1a000710:	680f      	ldr	r7, [r1, #0]
1a000712:	f100 0b20 	add.w	fp, r0, #32
	mem_set(sfn, ' ', 11);
1a000716:	4658      	mov	r0, fp
1a000718:	2120      	movs	r1, #32
1a00071a:	220b      	movs	r2, #11
1a00071c:	f7ff ffa6 	bl	1a00066c <mem_set>
	si = i = 0; ni = 8;
1a000720:	2600      	movs	r6, #0
1a000722:	4633      	mov	r3, r6
1a000724:	f04f 0808 	mov.w	r8, #8
1a000728:	e000      	b.n	1a00072c <create_name+0x24>
1a00072a:	462b      	mov	r3, r5
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
1a00072c:	1c5d      	adds	r5, r3, #1
1a00072e:	5cfc      	ldrb	r4, [r7, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
1a000730:	2c20      	cmp	r4, #32
1a000732:	d92b      	bls.n	1a00078c <create_name+0x84>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
1a000734:	2c2f      	cmp	r4, #47	; 0x2f
1a000736:	d003      	beq.n	1a000740 <create_name+0x38>
1a000738:	2c5c      	cmp	r4, #92	; 0x5c
1a00073a:	d107      	bne.n	1a00074c <create_name+0x44>
1a00073c:	e000      	b.n	1a000740 <create_name+0x38>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
1a00073e:	3501      	adds	r5, #1
1a000740:	5d7b      	ldrb	r3, [r7, r5]
1a000742:	2b2f      	cmp	r3, #47	; 0x2f
1a000744:	d0fb      	beq.n	1a00073e <create_name+0x36>
1a000746:	2b5c      	cmp	r3, #92	; 0x5c
1a000748:	d0f9      	beq.n	1a00073e <create_name+0x36>
1a00074a:	e01f      	b.n	1a00078c <create_name+0x84>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
1a00074c:	2c2e      	cmp	r4, #46	; 0x2e
1a00074e:	d001      	beq.n	1a000754 <create_name+0x4c>
1a000750:	4546      	cmp	r6, r8
1a000752:	d308      	bcc.n	1a000766 <create_name+0x5e>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
1a000754:	f1b8 0f0b 	cmp.w	r8, #11
1a000758:	d02d      	beq.n	1a0007b6 <create_name+0xae>
1a00075a:	2c2e      	cmp	r4, #46	; 0x2e
1a00075c:	d12e      	bne.n	1a0007bc <create_name+0xb4>
			i = 8; ni = 11;				/* Goto extension */
1a00075e:	2608      	movs	r6, #8
1a000760:	f04f 080b 	mov.w	r8, #11
1a000764:	e7e1      	b.n	1a00072a <create_name+0x22>
			continue;
		}
		if (c >= 0x80) {				/* Extended character? */
1a000766:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00076a:	d12a      	bne.n	1a0007c2 <create_name+0xba>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
1a00076c:	4819      	ldr	r0, [pc, #100]	; (1a0007d4 <create_name+0xcc>)
1a00076e:	4621      	mov	r1, r4
1a000770:	f7ff ff92 	bl	1a000698 <chk_chr>
1a000774:	bb40      	cbnz	r0, 1a0007c8 <create_name+0xc0>
			if (IsLower(c)) c -= 0x20;	/* To upper */
1a000776:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
1a00077a:	b2db      	uxtb	r3, r3
1a00077c:	2b19      	cmp	r3, #25
1a00077e:	d801      	bhi.n	1a000784 <create_name+0x7c>
1a000780:	3c20      	subs	r4, #32
1a000782:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
1a000784:	f80b 4006 	strb.w	r4, [fp, r6]
1a000788:	3601      	adds	r6, #1
1a00078a:	e7ce      	b.n	1a00072a <create_name+0x22>
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
1a00078c:	443d      	add	r5, r7
1a00078e:	f8c9 5000 	str.w	r5, [r9]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
1a000792:	b1e6      	cbz	r6, 1a0007ce <create_name+0xc6>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a000794:	f89a 3020 	ldrb.w	r3, [sl, #32]
1a000798:	2be5      	cmp	r3, #229	; 0xe5
1a00079a:	d102      	bne.n	1a0007a2 <create_name+0x9a>
1a00079c:	2305      	movs	r3, #5
1a00079e:	f88a 3020 	strb.w	r3, [sl, #32]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
1a0007a2:	2c20      	cmp	r4, #32
1a0007a4:	d801      	bhi.n	1a0007aa <create_name+0xa2>
1a0007a6:	2304      	movs	r3, #4
1a0007a8:	e000      	b.n	1a0007ac <create_name+0xa4>
1a0007aa:	2300      	movs	r3, #0
1a0007ac:	f88a 302b 	strb.w	r3, [sl, #43]	; 0x2b

	return FR_OK;
1a0007b0:	2000      	movs	r0, #0
1a0007b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
1a0007b6:	2006      	movs	r0, #6
1a0007b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0007bc:	2006      	movs	r0, #6
1a0007be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c >= 0x80) {				/* Extended character? */
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
#else
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
1a0007c2:	2006      	movs	r0, #6
1a0007c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
1a0007c8:	2006      	movs	r0, #6
1a0007ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
1a0007ce:	2006      	movs	r0, #6
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
1a0007d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0007d4:	1a00408c 	.word	0x1a00408c

1a0007d8 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
1a0007d8:	6801      	ldr	r1, [r0, #0]
1a0007da:	b921      	cbnz	r1, 1a0007e6 <get_ldnumber+0xe>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
1a0007dc:	f04f 33ff 	mov.w	r3, #4294967295
1a0007e0:	e01f      	b.n	1a000822 <get_ldnumber+0x4a>
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
1a0007e2:	3201      	adds	r2, #1
1a0007e4:	e000      	b.n	1a0007e8 <get_ldnumber+0x10>
1a0007e6:	460a      	mov	r2, r1
1a0007e8:	7813      	ldrb	r3, [r2, #0]
1a0007ea:	2b20      	cmp	r3, #32
1a0007ec:	d901      	bls.n	1a0007f2 <get_ldnumber+0x1a>
1a0007ee:	2b3a      	cmp	r3, #58	; 0x3a
1a0007f0:	d1f7      	bne.n	1a0007e2 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
1a0007f2:	2b3a      	cmp	r3, #58	; 0x3a
1a0007f4:	d114      	bne.n	1a000820 <get_ldnumber+0x48>

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
1a0007f6:	b410      	push	{r4}

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
1a0007f8:	1c4c      	adds	r4, r1, #1
1a0007fa:	780b      	ldrb	r3, [r1, #0]
1a0007fc:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
1a0007fe:	2b09      	cmp	r3, #9
1a000800:	d805      	bhi.n	1a00080e <get_ldnumber+0x36>
1a000802:	4294      	cmp	r4, r2
1a000804:	d106      	bne.n	1a000814 <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
1a000806:	b943      	cbnz	r3, 1a00081a <get_ldnumber+0x42>
					vol = (int)i;
					*path = ++tt;
1a000808:	3201      	adds	r2, #1
1a00080a:	6002      	str	r2, [r0, #0]
1a00080c:	e00b      	b.n	1a000826 <get_ldnumber+0x4e>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
1a00080e:	f04f 33ff 	mov.w	r3, #4294967295
1a000812:	e008      	b.n	1a000826 <get_ldnumber+0x4e>
1a000814:	f04f 33ff 	mov.w	r3, #4294967295
1a000818:	e005      	b.n	1a000826 <get_ldnumber+0x4e>
1a00081a:	f04f 33ff 	mov.w	r3, #4294967295
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
1a00081e:	e002      	b.n	1a000826 <get_ldnumber+0x4e>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
1a000820:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
1a000822:	4618      	mov	r0, r3
1a000824:	4770      	bx	lr
1a000826:	4618      	mov	r0, r3
1a000828:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00082c:	4770      	bx	lr
1a00082e:	bf00      	nop

1a000830 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	void* dfp,		/* Pointer to the FIL/DIR object to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
1a000830:	b538      	push	{r3, r4, r5, lr}
1a000832:	460c      	mov	r4, r1
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
1a000834:	b170      	cbz	r0, 1a000854 <validate+0x24>
1a000836:	4605      	mov	r5, r0
1a000838:	6803      	ldr	r3, [r0, #0]
1a00083a:	b15b      	cbz	r3, 1a000854 <validate+0x24>
1a00083c:	781a      	ldrb	r2, [r3, #0]
1a00083e:	b14a      	cbz	r2, 1a000854 <validate+0x24>
1a000840:	88d9      	ldrh	r1, [r3, #6]
1a000842:	8882      	ldrh	r2, [r0, #4]
1a000844:	4291      	cmp	r1, r2
1a000846:	d105      	bne.n	1a000854 <validate+0x24>
1a000848:	7858      	ldrb	r0, [r3, #1]
1a00084a:	f001 f979 	bl	1a001b40 <disk_status>
1a00084e:	f010 0f01 	tst.w	r0, #1
1a000852:	d003      	beq.n	1a00085c <validate+0x2c>
		*fs = 0;				/* The object is invalid */
1a000854:	2300      	movs	r3, #0
1a000856:	6023      	str	r3, [r4, #0]
		res = FR_INVALID_OBJECT;
1a000858:	2009      	movs	r0, #9
1a00085a:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
1a00085c:	682b      	ldr	r3, [r5, #0]
1a00085e:	6023      	str	r3, [r4, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
1a000860:	2000      	movs	r0, #0
	}
	return res;
}
1a000862:	bd38      	pop	{r3, r4, r5, pc}

1a000864 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
1a000864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
1a000866:	78c3      	ldrb	r3, [r0, #3]
1a000868:	b303      	cbz	r3, 1a0008ac <sync_window+0x48>
1a00086a:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
1a00086c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
1a00086e:	f100 0730 	add.w	r7, r0, #48	; 0x30
1a000872:	7840      	ldrb	r0, [r0, #1]
1a000874:	4639      	mov	r1, r7
1a000876:	4632      	mov	r2, r6
1a000878:	2301      	movs	r3, #1
1a00087a:	f001 f9af 	bl	1a001bdc <disk_write>
1a00087e:	b9b8      	cbnz	r0, 1a0008b0 <sync_window+0x4c>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
1a000880:	2300      	movs	r3, #0
1a000882:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
1a000884:	6a23      	ldr	r3, [r4, #32]
1a000886:	1af3      	subs	r3, r6, r3
1a000888:	69a2      	ldr	r2, [r4, #24]
1a00088a:	4293      	cmp	r3, r2
1a00088c:	d212      	bcs.n	1a0008b4 <sync_window+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
1a00088e:	78a5      	ldrb	r5, [r4, #2]
1a000890:	e008      	b.n	1a0008a4 <sync_window+0x40>
					wsect += fs->fsize;
1a000892:	69a3      	ldr	r3, [r4, #24]
1a000894:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
1a000896:	7860      	ldrb	r0, [r4, #1]
1a000898:	4639      	mov	r1, r7
1a00089a:	4632      	mov	r2, r6
1a00089c:	2301      	movs	r3, #1
1a00089e:	f001 f99d 	bl	1a001bdc <disk_write>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
1a0008a2:	3d01      	subs	r5, #1
1a0008a4:	2d01      	cmp	r5, #1
1a0008a6:	d8f4      	bhi.n	1a000892 <sync_window+0x2e>
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
1a0008a8:	2000      	movs	r0, #0
1a0008aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0008ac:	2000      	movs	r0, #0
1a0008ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
1a0008b0:	2001      	movs	r0, #1
1a0008b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
1a0008b4:	2000      	movs	r0, #0
				}
			}
		}
	}
	return res;
}
1a0008b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a0008b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
1a0008b8:	b570      	push	{r4, r5, r6, lr}
1a0008ba:	4604      	mov	r4, r0
1a0008bc:	460d      	mov	r5, r1
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
1a0008be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
1a0008c0:	428b      	cmp	r3, r1
1a0008c2:	d010      	beq.n	1a0008e6 <move_window+0x2e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
1a0008c4:	f7ff ffce 	bl	1a000864 <sync_window>
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
1a0008c8:	4606      	mov	r6, r0
1a0008ca:	b968      	cbnz	r0, 1a0008e8 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
1a0008cc:	7860      	ldrb	r0, [r4, #1]
1a0008ce:	f104 0130 	add.w	r1, r4, #48	; 0x30
1a0008d2:	462a      	mov	r2, r5
1a0008d4:	2301      	movs	r3, #1
1a0008d6:	f001 f93d 	bl	1a001b54 <disk_read>
1a0008da:	b110      	cbz	r0, 1a0008e2 <move_window+0x2a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
1a0008dc:	2601      	movs	r6, #1
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
1a0008de:	f04f 35ff 	mov.w	r5, #4294967295
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
1a0008e2:	62e5      	str	r5, [r4, #44]	; 0x2c
1a0008e4:	e000      	b.n	1a0008e8 <move_window+0x30>
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
1a0008e6:	2600      	movs	r6, #0
			}
			fs->winsect = sector;
		}
	}
	return res;
}
1a0008e8:	4630      	mov	r0, r6
1a0008ea:	bd70      	pop	{r4, r5, r6, pc}

1a0008ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
1a0008ec:	b510      	push	{r4, lr}
1a0008ee:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
1a0008f0:	2300      	movs	r3, #0
1a0008f2:	70c3      	strb	r3, [r0, #3]
1a0008f4:	f04f 33ff 	mov.w	r3, #4294967295
1a0008f8:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a0008fa:	f7ff ffdd 	bl	1a0008b8 <move_window>
1a0008fe:	bb18      	cbnz	r0, 1a000948 <check_fs+0x5c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
1a000900:	f204 202e 	addw	r0, r4, #558	; 0x22e
1a000904:	f7ff fe88 	bl	1a000618 <ld_word>
1a000908:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a00090c:	4298      	cmp	r0, r3
1a00090e:	d11d      	bne.n	1a00094c <check_fs+0x60>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
1a000910:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a000914:	2be9      	cmp	r3, #233	; 0xe9
1a000916:	d005      	beq.n	1a000924 <check_fs+0x38>
1a000918:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00091a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
1a00091e:	4a0f      	ldr	r2, [pc, #60]	; (1a00095c <check_fs+0x70>)
1a000920:	4293      	cmp	r3, r2
1a000922:	d115      	bne.n	1a000950 <check_fs+0x64>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
1a000924:	f104 0066 	add.w	r0, r4, #102	; 0x66
1a000928:	f7ff fe7c 	bl	1a000624 <ld_dword>
1a00092c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
1a000930:	4b0b      	ldr	r3, [pc, #44]	; (1a000960 <check_fs+0x74>)
1a000932:	4298      	cmp	r0, r3
1a000934:	d00e      	beq.n	1a000954 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
1a000936:	f104 0082 	add.w	r0, r4, #130	; 0x82
1a00093a:	f7ff fe73 	bl	1a000624 <ld_dword>
1a00093e:	4b09      	ldr	r3, [pc, #36]	; (1a000964 <check_fs+0x78>)
1a000940:	4298      	cmp	r0, r3
1a000942:	d009      	beq.n	1a000958 <check_fs+0x6c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
1a000944:	2002      	movs	r0, #2
1a000946:	bd10      	pop	{r4, pc}
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a000948:	2004      	movs	r0, #4
1a00094a:	bd10      	pop	{r4, pc}

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
1a00094c:	2003      	movs	r0, #3
1a00094e:	bd10      	pop	{r4, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
1a000950:	2002      	movs	r0, #2
1a000952:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
1a000954:	2000      	movs	r0, #0
1a000956:	bd10      	pop	{r4, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
1a000958:	2000      	movs	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
1a00095a:	bd10      	pop	{r4, pc}
1a00095c:	009000eb 	.word	0x009000eb
1a000960:	00544146 	.word	0x00544146
1a000964:	33544146 	.word	0x33544146

1a000968 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
1a000968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00096c:	b084      	sub	sp, #16
1a00096e:	460e      	mov	r6, r1
1a000970:	4617      	mov	r7, r2
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
1a000972:	2300      	movs	r3, #0
1a000974:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
1a000976:	f7ff ff2f 	bl	1a0007d8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a00097a:	1e05      	subs	r5, r0, #0
1a00097c:	f2c0 812b 	blt.w	1a000bd6 <find_volume+0x26e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
1a000980:	4baa      	ldr	r3, [pc, #680]	; (1a000c2c <find_volume+0x2c4>)
1a000982:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
1a000986:	2c00      	cmp	r4, #0
1a000988:	f000 8127 	beq.w	1a000bda <find_volume+0x272>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
1a00098c:	6034      	str	r4, [r6, #0]

	mode &= ~FA_READ;					/* Desired access mode, write access or not */
1a00098e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
1a000992:	7823      	ldrb	r3, [r4, #0]
1a000994:	b173      	cbz	r3, 1a0009b4 <find_volume+0x4c>
		stat = disk_status(fs->drv);
1a000996:	7860      	ldrb	r0, [r4, #1]
1a000998:	f001 f8d2 	bl	1a001b40 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
1a00099c:	f010 0f01 	tst.w	r0, #1
1a0009a0:	d108      	bne.n	1a0009b4 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
1a0009a2:	2f00      	cmp	r7, #0
1a0009a4:	f000 811b 	beq.w	1a000bde <find_volume+0x276>
1a0009a8:	f010 0f04 	tst.w	r0, #4
1a0009ac:	f040 8119 	bne.w	1a000be2 <find_volume+0x27a>
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
1a0009b0:	2000      	movs	r0, #0
1a0009b2:	e137      	b.n	1a000c24 <find_volume+0x2bc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
1a0009b4:	2300      	movs	r3, #0
1a0009b6:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
1a0009b8:	b2e8      	uxtb	r0, r5
1a0009ba:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
1a0009bc:	f001 f814 	bl	1a0019e8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
1a0009c0:	f010 0f01 	tst.w	r0, #1
1a0009c4:	f040 810f 	bne.w	1a000be6 <find_volume+0x27e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
1a0009c8:	b11f      	cbz	r7, 1a0009d2 <find_volume+0x6a>
1a0009ca:	f010 0f04 	tst.w	r0, #4
1a0009ce:	f040 810c 	bne.w	1a000bea <find_volume+0x282>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
1a0009d2:	4620      	mov	r0, r4
1a0009d4:	2100      	movs	r1, #0
1a0009d6:	f7ff ff89 	bl	1a0008ec <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a0009da:	2802      	cmp	r0, #2
1a0009dc:	d014      	beq.n	1a000a08 <find_volume+0xa0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
1a0009de:	2600      	movs	r6, #0
1a0009e0:	e027      	b.n	1a000a32 <find_volume+0xca>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a0009e2:	eb04 1005 	add.w	r0, r4, r5, lsl #4
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a0009e6:	f890 31f2 	ldrb.w	r3, [r0, #498]	; 0x1f2
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a0009ea:	f500 70f7 	add.w	r0, r0, #494	; 0x1ee
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a0009ee:	b11b      	cbz	r3, 1a0009f8 <find_volume+0x90>
1a0009f0:	3008      	adds	r0, #8
1a0009f2:	f7ff fe17 	bl	1a000624 <ld_dword>
1a0009f6:	e000      	b.n	1a0009fa <find_volume+0x92>
1a0009f8:	2000      	movs	r0, #0
1a0009fa:	ab04      	add	r3, sp, #16
1a0009fc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a000a00:	f843 0c10 	str.w	r0, [r3, #-16]
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
1a000a04:	3501      	adds	r5, #1
1a000a06:	e000      	b.n	1a000a0a <find_volume+0xa2>
1a000a08:	2500      	movs	r5, #0
1a000a0a:	2d03      	cmp	r5, #3
1a000a0c:	d9e9      	bls.n	1a0009e2 <find_volume+0x7a>
1a000a0e:	2500      	movs	r5, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
1a000a10:	ab04      	add	r3, sp, #16
1a000a12:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a000a16:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a000a1a:	b126      	cbz	r6, 1a000a26 <find_volume+0xbe>
1a000a1c:	4620      	mov	r0, r4
1a000a1e:	4631      	mov	r1, r6
1a000a20:	f7ff ff64 	bl	1a0008ec <check_fs>
1a000a24:	e000      	b.n	1a000a28 <find_volume+0xc0>
1a000a26:	2003      	movs	r0, #3
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
1a000a28:	2801      	cmp	r0, #1
1a000a2a:	d902      	bls.n	1a000a32 <find_volume+0xca>
1a000a2c:	3501      	adds	r5, #1
1a000a2e:	2d03      	cmp	r5, #3
1a000a30:	d9ee      	bls.n	1a000a10 <find_volume+0xa8>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a000a32:	2804      	cmp	r0, #4
1a000a34:	f000 80db 	beq.w	1a000bee <find_volume+0x286>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a000a38:	2801      	cmp	r0, #1
1a000a3a:	f200 80da 	bhi.w	1a000bf2 <find_volume+0x28a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a000a3e:	f104 003b 	add.w	r0, r4, #59	; 0x3b
1a000a42:	f7ff fde9 	bl	1a000618 <ld_word>
1a000a46:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a000a4a:	f040 80d4 	bne.w	1a000bf6 <find_volume+0x28e>

		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
1a000a4e:	f104 0046 	add.w	r0, r4, #70	; 0x46
1a000a52:	f7ff fde1 	bl	1a000618 <ld_word>
1a000a56:	4680      	mov	r8, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
1a000a58:	b920      	cbnz	r0, 1a000a64 <find_volume+0xfc>
1a000a5a:	f104 0054 	add.w	r0, r4, #84	; 0x54
1a000a5e:	f7ff fde1 	bl	1a000624 <ld_dword>
1a000a62:	4680      	mov	r8, r0
		fs->fsize = fasize;
1a000a64:	f8c4 8018 	str.w	r8, [r4, #24]

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
1a000a68:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
1a000a6c:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a000a70:	f109 33ff 	add.w	r3, r9, #4294967295
1a000a74:	b2db      	uxtb	r3, r3
1a000a76:	2b01      	cmp	r3, #1
1a000a78:	f200 80bf 	bhi.w	1a000bfa <find_volume+0x292>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
1a000a7c:	fb08 f909 	mul.w	r9, r8, r9

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
1a000a80:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
1a000a84:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a000a86:	2d00      	cmp	r5, #0
1a000a88:	f000 80b9 	beq.w	1a000bfe <find_volume+0x296>
1a000a8c:	1e6b      	subs	r3, r5, #1
1a000a8e:	421d      	tst	r5, r3
1a000a90:	f040 80b7 	bne.w	1a000c02 <find_volume+0x29a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
1a000a94:	f104 0041 	add.w	r0, r4, #65	; 0x41
1a000a98:	f7ff fdbe 	bl	1a000618 <ld_word>
1a000a9c:	4682      	mov	sl, r0
1a000a9e:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a000aa0:	f010 0f0f 	tst.w	r0, #15
1a000aa4:	f040 80af 	bne.w	1a000c06 <find_volume+0x29e>

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
1a000aa8:	f104 0043 	add.w	r0, r4, #67	; 0x43
1a000aac:	f7ff fdb4 	bl	1a000618 <ld_word>
1a000ab0:	4607      	mov	r7, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
1a000ab2:	b920      	cbnz	r0, 1a000abe <find_volume+0x156>
1a000ab4:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a000ab8:	f7ff fdb4 	bl	1a000624 <ld_dword>
1a000abc:	4607      	mov	r7, r0

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
1a000abe:	f104 003e 	add.w	r0, r4, #62	; 0x3e
1a000ac2:	f7ff fda9 	bl	1a000618 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
1a000ac6:	4603      	mov	r3, r0
1a000ac8:	2800      	cmp	r0, #0
1a000aca:	f000 809e 	beq.w	1a000c0a <find_volume+0x2a2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
1a000ace:	eb00 0209 	add.w	r2, r0, r9
1a000ad2:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a000ad6:	4297      	cmp	r7, r2
1a000ad8:	f0c0 8099 	bcc.w	1a000c0e <find_volume+0x2a6>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
1a000adc:	1abf      	subs	r7, r7, r2
1a000ade:	fbb7 f5f5 	udiv	r5, r7, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
1a000ae2:	2d00      	cmp	r5, #0
1a000ae4:	f000 8095 	beq.w	1a000c12 <find_volume+0x2aa>
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a000ae8:	f64f 71f5 	movw	r1, #65525	; 0xfff5
1a000aec:	428d      	cmp	r5, r1
1a000aee:	d901      	bls.n	1a000af4 <find_volume+0x18c>
		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
		fmt = FS_FAT32;
1a000af0:	2703      	movs	r7, #3
1a000af2:	e000      	b.n	1a000af6 <find_volume+0x18e>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a000af4:	2702      	movs	r7, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a000af6:	f640 71f5 	movw	r1, #4085	; 0xff5
1a000afa:	428d      	cmp	r5, r1
1a000afc:	d800      	bhi.n	1a000b00 <find_volume+0x198>
1a000afe:	2701      	movs	r7, #1

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
1a000b00:	3502      	adds	r5, #2
1a000b02:	6165      	str	r5, [r4, #20]
		fs->volbase = bsect;								/* Volume start sector */
1a000b04:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
1a000b06:	4433      	add	r3, r6
1a000b08:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;						/* Data start sector */
1a000b0a:	4432      	add	r2, r6
1a000b0c:	62a2      	str	r2, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
1a000b0e:	2f03      	cmp	r7, #3
1a000b10:	d10f      	bne.n	1a000b32 <find_volume+0x1ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a000b12:	f104 005a 	add.w	r0, r4, #90	; 0x5a
1a000b16:	f7ff fd7f 	bl	1a000618 <ld_word>
1a000b1a:	2800      	cmp	r0, #0
1a000b1c:	d17b      	bne.n	1a000c16 <find_volume+0x2ae>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
1a000b1e:	f1ba 0f00 	cmp.w	sl, #0
1a000b22:	d17a      	bne.n	1a000c1a <find_volume+0x2b2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
1a000b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a000b28:	f7ff fd7c 	bl	1a000624 <ld_dword>
1a000b2c:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
1a000b2e:	00ad      	lsls	r5, r5, #2
1a000b30:	e00e      	b.n	1a000b50 <find_volume+0x1e8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
1a000b32:	f1ba 0f00 	cmp.w	sl, #0
1a000b36:	d072      	beq.n	1a000c1e <find_volume+0x2b6>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
1a000b38:	444b      	add	r3, r9
1a000b3a:	6263      	str	r3, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a000b3c:	2f02      	cmp	r7, #2
1a000b3e:	d101      	bne.n	1a000b44 <find_volume+0x1dc>
1a000b40:	006d      	lsls	r5, r5, #1
1a000b42:	e005      	b.n	1a000b50 <find_volume+0x1e8>
1a000b44:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a000b48:	f005 0501 	and.w	r5, r5, #1
1a000b4c:	eb05 0553 	add.w	r5, r5, r3, lsr #1
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a000b50:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
1a000b54:	ebb8 2f55 	cmp.w	r8, r5, lsr #9
1a000b58:	d363      	bcc.n	1a000c22 <find_volume+0x2ba>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a000b5a:	f04f 33ff 	mov.w	r3, #4294967295
1a000b5e:	6123      	str	r3, [r4, #16]
1a000b60:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
1a000b62:	2380      	movs	r3, #128	; 0x80
1a000b64:	7123      	strb	r3, [r4, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
1a000b66:	2f03      	cmp	r7, #3
1a000b68:	d12c      	bne.n	1a000bc4 <find_volume+0x25c>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
1a000b6a:	f104 0060 	add.w	r0, r4, #96	; 0x60
1a000b6e:	f7ff fd53 	bl	1a000618 <ld_word>
1a000b72:	2801      	cmp	r0, #1
1a000b74:	d126      	bne.n	1a000bc4 <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
1a000b76:	4620      	mov	r0, r4
1a000b78:	1c71      	adds	r1, r6, #1
1a000b7a:	f7ff fe9d 	bl	1a0008b8 <move_window>
1a000b7e:	bb08      	cbnz	r0, 1a000bc4 <find_volume+0x25c>
		{
			fs->fsi_flag = 0;
1a000b80:	2300      	movs	r3, #0
1a000b82:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
1a000b84:	f204 202e 	addw	r0, r4, #558	; 0x22e
1a000b88:	f7ff fd46 	bl	1a000618 <ld_word>
1a000b8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a000b90:	4298      	cmp	r0, r3
1a000b92:	d117      	bne.n	1a000bc4 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
1a000b94:	f104 0030 	add.w	r0, r4, #48	; 0x30
1a000b98:	f7ff fd44 	bl	1a000624 <ld_dword>
1a000b9c:	4b24      	ldr	r3, [pc, #144]	; (1a000c30 <find_volume+0x2c8>)
1a000b9e:	4298      	cmp	r0, r3
1a000ba0:	d110      	bne.n	1a000bc4 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
1a000ba2:	f504 7005 	add.w	r0, r4, #532	; 0x214
1a000ba6:	f7ff fd3d 	bl	1a000624 <ld_dword>
1a000baa:	4b22      	ldr	r3, [pc, #136]	; (1a000c34 <find_volume+0x2cc>)
1a000bac:	4298      	cmp	r0, r3
1a000bae:	d109      	bne.n	1a000bc4 <find_volume+0x25c>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
1a000bb0:	f504 7006 	add.w	r0, r4, #536	; 0x218
1a000bb4:	f7ff fd36 	bl	1a000624 <ld_dword>
1a000bb8:	6120      	str	r0, [r4, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
1a000bba:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a000bbe:	f7ff fd31 	bl	1a000624 <ld_dword>
1a000bc2:	60e0      	str	r0, [r4, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;	/* FAT sub-type */
1a000bc4:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
1a000bc6:	4a1c      	ldr	r2, [pc, #112]	; (1a000c38 <find_volume+0x2d0>)
1a000bc8:	8813      	ldrh	r3, [r2, #0]
1a000bca:	3301      	adds	r3, #1
1a000bcc:	b29b      	uxth	r3, r3
1a000bce:	8013      	strh	r3, [r2, #0]
1a000bd0:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;		/* Initialize current directory */
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
1a000bd2:	2000      	movs	r0, #0
1a000bd4:	e026      	b.n	1a000c24 <find_volume+0x2bc>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
1a000bd6:	200b      	movs	r0, #11
1a000bd8:	e024      	b.n	1a000c24 <find_volume+0x2bc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
1a000bda:	200c      	movs	r0, #12
1a000bdc:	e022      	b.n	1a000c24 <find_volume+0x2bc>
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
1a000bde:	2000      	movs	r0, #0
1a000be0:	e020      	b.n	1a000c24 <find_volume+0x2bc>
	mode &= ~FA_READ;					/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
1a000be2:	200a      	movs	r0, #10
1a000be4:	e01e      	b.n	1a000c24 <find_volume+0x2bc>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
1a000be6:	2003      	movs	r0, #3
1a000be8:	e01c      	b.n	1a000c24 <find_volume+0x2bc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
1a000bea:	200a      	movs	r0, #10
1a000bec:	e01a      	b.n	1a000c24 <find_volume+0x2bc>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a000bee:	2001      	movs	r0, #1
1a000bf0:	e018      	b.n	1a000c24 <find_volume+0x2bc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a000bf2:	200d      	movs	r0, #13
1a000bf4:	e016      	b.n	1a000c24 <find_volume+0x2bc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a000bf6:	200d      	movs	r0, #13
1a000bf8:	e014      	b.n	1a000c24 <find_volume+0x2bc>
		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a000bfa:	200d      	movs	r0, #13
1a000bfc:	e012      	b.n	1a000c24 <find_volume+0x2bc>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a000bfe:	200d      	movs	r0, #13
1a000c00:	e010      	b.n	1a000c24 <find_volume+0x2bc>
1a000c02:	200d      	movs	r0, #13
1a000c04:	e00e      	b.n	1a000c24 <find_volume+0x2bc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a000c06:	200d      	movs	r0, #13
1a000c08:	e00c      	b.n	1a000c24 <find_volume+0x2bc>

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
1a000c0a:	200d      	movs	r0, #13
1a000c0c:	e00a      	b.n	1a000c24 <find_volume+0x2bc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a000c0e:	200d      	movs	r0, #13
1a000c10:	e008      	b.n	1a000c24 <find_volume+0x2bc>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
1a000c12:	200d      	movs	r0, #13
1a000c14:	e006      	b.n	1a000c24 <find_volume+0x2bc>
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
		fs->volbase = bsect;								/* Volume start sector */
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
		fs->database = bsect + sysect;						/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a000c16:	200d      	movs	r0, #13
1a000c18:	e004      	b.n	1a000c24 <find_volume+0x2bc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
1a000c1a:	200d      	movs	r0, #13
1a000c1c:	e002      	b.n	1a000c24 <find_volume+0x2bc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
1a000c1e:	200d      	movs	r0, #13
1a000c20:	e000      	b.n	1a000c24 <find_volume+0x2bc>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a000c22:	200d      	movs	r0, #13
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
1a000c24:	b004      	add	sp, #16
1a000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000c2a:	bf00      	nop
1a000c2c:	10000554 	.word	0x10000554
1a000c30:	41615252 	.word	0x41615252
1a000c34:	61417272 	.word	0x61417272
1a000c38:	10000550 	.word	0x10000550

1a000c3c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
1a000c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000c40:	460c      	mov	r4, r1
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1a000c42:	2901      	cmp	r1, #1
1a000c44:	d977      	bls.n	1a000d36 <put_fat+0xfa>
1a000c46:	4605      	mov	r5, r0
1a000c48:	4617      	mov	r7, r2
1a000c4a:	6943      	ldr	r3, [r0, #20]
1a000c4c:	428b      	cmp	r3, r1
1a000c4e:	d974      	bls.n	1a000d3a <put_fat+0xfe>
		switch (fs->fs_type) {
1a000c50:	7803      	ldrb	r3, [r0, #0]
1a000c52:	2b02      	cmp	r3, #2
1a000c54:	d043      	beq.n	1a000cde <put_fat+0xa2>
1a000c56:	2b03      	cmp	r3, #3
1a000c58:	d053      	beq.n	1a000d02 <put_fat+0xc6>
1a000c5a:	2b01      	cmp	r3, #1
1a000c5c:	d16f      	bne.n	1a000d3e <put_fat+0x102>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
1a000c5e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a000c62:	6a01      	ldr	r1, [r0, #32]
1a000c64:	eb01 2158 	add.w	r1, r1, r8, lsr #9
1a000c68:	f7ff fe26 	bl	1a0008b8 <move_window>
			if (res != FR_OK) break;
1a000c6c:	4606      	mov	r6, r0
1a000c6e:	2800      	cmp	r0, #0
1a000c70:	d166      	bne.n	1a000d40 <put_fat+0x104>
			p = fs->win + bc++ % SS(fs);
1a000c72:	f108 0901 	add.w	r9, r8, #1
1a000c76:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
1a000c7a:	f014 0401 	ands.w	r4, r4, #1
1a000c7e:	d00a      	beq.n	1a000c96 <put_fat+0x5a>
1a000c80:	eb05 0308 	add.w	r3, r5, r8
1a000c84:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
1a000c88:	b2fb      	uxtb	r3, r7
1a000c8a:	f002 020f 	and.w	r2, r2, #15
1a000c8e:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
1a000c92:	b2db      	uxtb	r3, r3
1a000c94:	e000      	b.n	1a000c98 <put_fat+0x5c>
1a000c96:	b2fb      	uxtb	r3, r7
1a000c98:	44a8      	add	r8, r5
1a000c9a:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
			fs->wflag = 1;
1a000c9e:	2301      	movs	r3, #1
1a000ca0:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a000ca2:	6a29      	ldr	r1, [r5, #32]
1a000ca4:	4628      	mov	r0, r5
1a000ca6:	eb01 2159 	add.w	r1, r1, r9, lsr #9
1a000caa:	f7ff fe05 	bl	1a0008b8 <move_window>
			if (res != FR_OK) break;
1a000cae:	4606      	mov	r6, r0
1a000cb0:	2800      	cmp	r0, #0
1a000cb2:	d145      	bne.n	1a000d40 <put_fat+0x104>
			p = fs->win + bc % SS(fs);
1a000cb4:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1a000cb8:	b114      	cbz	r4, 1a000cc0 <put_fat+0x84>
1a000cba:	f3c7 1707 	ubfx	r7, r7, #4, #8
1a000cbe:	e008      	b.n	1a000cd2 <put_fat+0x96>
1a000cc0:	eb05 0309 	add.w	r3, r5, r9
1a000cc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
1a000cc8:	f023 030f 	bic.w	r3, r3, #15
1a000ccc:	f3c7 2703 	ubfx	r7, r7, #8, #4
1a000cd0:	431f      	orrs	r7, r3
1a000cd2:	44a9      	add	r9, r5
1a000cd4:	f889 7030 	strb.w	r7, [r9, #48]	; 0x30
			fs->wflag = 1;
1a000cd8:	2301      	movs	r3, #1
1a000cda:	70eb      	strb	r3, [r5, #3]
			break;
1a000cdc:	e030      	b.n	1a000d40 <put_fat+0x104>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1a000cde:	6a01      	ldr	r1, [r0, #32]
1a000ce0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a000ce4:	f7ff fde8 	bl	1a0008b8 <move_window>
			if (res != FR_OK) break;
1a000ce8:	4606      	mov	r6, r0
1a000cea:	bb48      	cbnz	r0, 1a000d40 <put_fat+0x104>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
1a000cec:	0060      	lsls	r0, r4, #1
1a000cee:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
1a000cf2:	3030      	adds	r0, #48	; 0x30
1a000cf4:	4428      	add	r0, r5
1a000cf6:	b2b9      	uxth	r1, r7
1a000cf8:	f7ff fca0 	bl	1a00063c <st_word>
			fs->wflag = 1;
1a000cfc:	2301      	movs	r3, #1
1a000cfe:	70eb      	strb	r3, [r5, #3]
			break;
1a000d00:	e01e      	b.n	1a000d40 <put_fat+0x104>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1a000d02:	6a01      	ldr	r1, [r0, #32]
1a000d04:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a000d08:	f7ff fdd6 	bl	1a0008b8 <move_window>
			if (res != FR_OK) break;
1a000d0c:	4606      	mov	r6, r0
1a000d0e:	b9b8      	cbnz	r0, 1a000d40 <put_fat+0x104>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1a000d10:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
1a000d14:	00a4      	lsls	r4, r4, #2
1a000d16:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a000d1a:	3430      	adds	r4, #48	; 0x30
1a000d1c:	442c      	add	r4, r5
1a000d1e:	4620      	mov	r0, r4
1a000d20:	f7ff fc80 	bl	1a000624 <ld_dword>
1a000d24:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
1a000d28:	4620      	mov	r0, r4
1a000d2a:	4339      	orrs	r1, r7
1a000d2c:	f7ff fc8a 	bl	1a000644 <st_dword>
			fs->wflag = 1;
1a000d30:	2301      	movs	r3, #1
1a000d32:	70eb      	strb	r3, [r5, #3]
			break;
1a000d34:	e004      	b.n	1a000d40 <put_fat+0x104>
	DWORD val		/* New value to be set to the entry */
)
{
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
1a000d36:	2602      	movs	r6, #2
1a000d38:	e002      	b.n	1a000d40 <put_fat+0x104>
1a000d3a:	2602      	movs	r6, #2
1a000d3c:	e000      	b.n	1a000d40 <put_fat+0x104>
1a000d3e:	2602      	movs	r6, #2
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
1a000d40:	4630      	mov	r0, r6
1a000d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000d46:	bf00      	nop

1a000d48 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
1a000d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
1a000d4a:	6806      	ldr	r6, [r0, #0]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1a000d4c:	2901      	cmp	r1, #1
1a000d4e:	d951      	bls.n	1a000df4 <get_fat+0xac>
1a000d50:	6973      	ldr	r3, [r6, #20]
1a000d52:	428b      	cmp	r3, r1
1a000d54:	d950      	bls.n	1a000df8 <get_fat+0xb0>
1a000d56:	460c      	mov	r4, r1
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
1a000d58:	7833      	ldrb	r3, [r6, #0]
1a000d5a:	2b02      	cmp	r3, #2
1a000d5c:	d02a      	beq.n	1a000db4 <get_fat+0x6c>
1a000d5e:	2b03      	cmp	r3, #3
1a000d60:	d037      	beq.n	1a000dd2 <get_fat+0x8a>
1a000d62:	2b01      	cmp	r3, #1
1a000d64:	d14a      	bne.n	1a000dfc <get_fat+0xb4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
1a000d66:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a000d6a:	6a31      	ldr	r1, [r6, #32]
1a000d6c:	4630      	mov	r0, r6
1a000d6e:	eb01 2155 	add.w	r1, r1, r5, lsr #9
1a000d72:	f7ff fda1 	bl	1a0008b8 <move_window>
1a000d76:	2800      	cmp	r0, #0
1a000d78:	d142      	bne.n	1a000e00 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
1a000d7a:	1c6f      	adds	r7, r5, #1
1a000d7c:	f3c5 0508 	ubfx	r5, r5, #0, #9
1a000d80:	4435      	add	r5, r6
1a000d82:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a000d86:	6a31      	ldr	r1, [r6, #32]
1a000d88:	4630      	mov	r0, r6
1a000d8a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
1a000d8e:	f7ff fd93 	bl	1a0008b8 <move_window>
1a000d92:	2800      	cmp	r0, #0
1a000d94:	d137      	bne.n	1a000e06 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
1a000d96:	f3c7 0708 	ubfx	r7, r7, #0, #9
1a000d9a:	443e      	add	r6, r7
1a000d9c:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
1a000da0:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1a000da4:	f014 0f01 	tst.w	r4, #1
1a000da8:	d001      	beq.n	1a000dae <get_fat+0x66>
1a000daa:	0900      	lsrs	r0, r0, #4
1a000dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000dae:	f3c0 000b 	ubfx	r0, r0, #0, #12
			break;
1a000db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1a000db4:	6a31      	ldr	r1, [r6, #32]
1a000db6:	4630      	mov	r0, r6
1a000db8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a000dbc:	f7ff fd7c 	bl	1a0008b8 <move_window>
1a000dc0:	bb20      	cbnz	r0, 1a000e0c <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
1a000dc2:	0060      	lsls	r0, r4, #1
1a000dc4:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
1a000dc8:	3030      	adds	r0, #48	; 0x30
1a000dca:	4430      	add	r0, r6
1a000dcc:	f7ff fc24 	bl	1a000618 <ld_word>
			break;
1a000dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a000dd2:	6a31      	ldr	r1, [r6, #32]
1a000dd4:	4630      	mov	r0, r6
1a000dd6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a000dda:	f7ff fd6d 	bl	1a0008b8 <move_window>
1a000dde:	b9c0      	cbnz	r0, 1a000e12 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
1a000de0:	00a0      	lsls	r0, r4, #2
1a000de2:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
1a000de6:	3030      	adds	r0, #48	; 0x30
1a000de8:	4430      	add	r0, r6
1a000dea:	f7ff fc1b 	bl	1a000624 <ld_dword>
1a000dee:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
1a000df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	DWORD val;
	FATFS *fs = obj->fs;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */
1a000df4:	2001      	movs	r0, #1
1a000df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000df8:	2001      	movs	r0, #1
1a000dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				}
			}
			/* go next */
#endif
		default:
			val = 1;	/* Internal error */
1a000dfc:	2001      	movs	r0, #1
1a000dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a000e00:	f04f 30ff 	mov.w	r0, #4294967295
1a000e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000e06:	f04f 30ff 	mov.w	r0, #4294967295
1a000e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000e0c:	f04f 30ff 	mov.w	r0, #4294967295
1a000e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000e12:	f04f 30ff 	mov.w	r0, #4294967295
			val = 1;	/* Internal error */
		}
	}

	return val;
}
1a000e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a000e18 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
1a000e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000e1c:	4606      	mov	r6, r0
1a000e1e:	460c      	mov	r4, r1
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
1a000e20:	6807      	ldr	r7, [r0, #0]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a000e22:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a000e26:	d23a      	bcs.n	1a000e9e <dir_sdi+0x86>
1a000e28:	f011 0f1f 	tst.w	r1, #31
1a000e2c:	d13a      	bne.n	1a000ea4 <dir_sdi+0x8c>
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
1a000e2e:	6131      	str	r1, [r6, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1a000e30:	6885      	ldr	r5, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1a000e32:	b91d      	cbnz	r5, 1a000e3c <dir_sdi+0x24>
1a000e34:	783b      	ldrb	r3, [r7, #0]
1a000e36:	2b02      	cmp	r3, #2
1a000e38:	d900      	bls.n	1a000e3c <dir_sdi+0x24>
		clst = fs->dirbase;
1a000e3a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
1a000e3c:	b935      	cbnz	r5, 1a000e4c <dir_sdi+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
1a000e3e:	893b      	ldrh	r3, [r7, #8]
1a000e40:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
1a000e44:	d931      	bls.n	1a000eaa <dir_sdi+0x92>
		dp->sect = fs->dirbase;
1a000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000e48:	61b3      	str	r3, [r6, #24]
1a000e4a:	e01a      	b.n	1a000e82 <dir_sdi+0x6a>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1a000e4c:	f8b7 800a 	ldrh.w	r8, [r7, #10]
1a000e50:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
1a000e54:	e00e      	b.n	1a000e74 <dir_sdi+0x5c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1a000e56:	4630      	mov	r0, r6
1a000e58:	4629      	mov	r1, r5
1a000e5a:	f7ff ff75 	bl	1a000d48 <get_fat>
1a000e5e:	4605      	mov	r5, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a000e60:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000e64:	d024      	beq.n	1a000eb0 <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a000e66:	2801      	cmp	r0, #1
1a000e68:	d925      	bls.n	1a000eb6 <dir_sdi+0x9e>
1a000e6a:	697b      	ldr	r3, [r7, #20]
1a000e6c:	4283      	cmp	r3, r0
1a000e6e:	d925      	bls.n	1a000ebc <dir_sdi+0xa4>
			ofs -= csz;
1a000e70:	ebc8 0404 	rsb	r4, r8, r4
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
1a000e74:	4544      	cmp	r4, r8
1a000e76:	d2ee      	bcs.n	1a000e56 <dir_sdi+0x3e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
1a000e78:	4638      	mov	r0, r7
1a000e7a:	4629      	mov	r1, r5
1a000e7c:	f7ff fc14 	bl	1a0006a8 <clust2sect>
1a000e80:	61b0      	str	r0, [r6, #24]
	}
	dp->clust = clst;					/* Current cluster# */
1a000e82:	6175      	str	r5, [r6, #20]
	if (!dp->sect) return FR_INT_ERR;
1a000e84:	69b3      	ldr	r3, [r6, #24]
1a000e86:	b1e3      	cbz	r3, 1a000ec2 <dir_sdi+0xaa>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1a000e88:	eb03 2354 	add.w	r3, r3, r4, lsr #9
1a000e8c:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1a000e8e:	f3c4 0308 	ubfx	r3, r4, #0, #9
1a000e92:	3330      	adds	r3, #48	; 0x30
1a000e94:	443b      	add	r3, r7
1a000e96:	61f3      	str	r3, [r6, #28]

	return FR_OK;
1a000e98:	2000      	movs	r0, #0
1a000e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
		return FR_INT_ERR;
1a000e9e:	2002      	movs	r0, #2
1a000ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000ea4:	2002      	movs	r0, #2
1a000ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clst = fs->dirbase;
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
1a000eaa:	2002      	movs	r0, #2
1a000eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a000eb0:	2001      	movs	r0, #1
1a000eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a000eb6:	2002      	movs	r0, #2
1a000eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000ebc:	2002      	movs	r0, #2
1a000ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
	}
	dp->clust = clst;					/* Current cluster# */
	if (!dp->sect) return FR_INT_ERR;
1a000ec2:	2002      	movs	r0, #2
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */

	return FR_OK;
}
1a000ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a000ec8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
1a000ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000ecc:	4607      	mov	r7, r0
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
1a000ece:	6806      	ldr	r6, [r0, #0]


	if (clst == 0) {	/* Create a new chain */
1a000ed0:	4688      	mov	r8, r1
1a000ed2:	b929      	cbnz	r1, 1a000ee0 <create_chain+0x18>
		scl = fs->last_clst;				/* Get suggested cluster to start at */
1a000ed4:	68f5      	ldr	r5, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a000ed6:	b17d      	cbz	r5, 1a000ef8 <create_chain+0x30>
1a000ed8:	6973      	ldr	r3, [r6, #20]
1a000eda:	42ab      	cmp	r3, r5
1a000edc:	d90e      	bls.n	1a000efc <create_chain+0x34>
1a000ede:	e00e      	b.n	1a000efe <create_chain+0x36>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
1a000ee0:	f7ff ff32 	bl	1a000d48 <get_fat>
		if (cs < 2) return 1;				/* Invalid value */
1a000ee4:	2801      	cmp	r0, #1
1a000ee6:	d94b      	bls.n	1a000f80 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
1a000ee8:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000eec:	d04f      	beq.n	1a000f8e <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1a000eee:	6973      	ldr	r3, [r6, #20]
1a000ef0:	4283      	cmp	r3, r0
1a000ef2:	d84c      	bhi.n	1a000f8e <create_chain+0xc6>
		scl = clst;
1a000ef4:	4645      	mov	r5, r8
1a000ef6:	e002      	b.n	1a000efe <create_chain+0x36>
	FATFS *fs = obj->fs;


	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Get suggested cluster to start at */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a000ef8:	2501      	movs	r5, #1
1a000efa:	e000      	b.n	1a000efe <create_chain+0x36>
1a000efc:	2501      	movs	r5, #1
			}
		}
	} else
#endif
	{	/* At the FAT12/16/32 */
		ncl = scl;	/* Start cluster */
1a000efe:	462c      	mov	r4, r5
		for (;;) {
			ncl++;							/* Next cluster */
1a000f00:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1a000f02:	6973      	ldr	r3, [r6, #20]
1a000f04:	42a3      	cmp	r3, r4
1a000f06:	d802      	bhi.n	1a000f0e <create_chain+0x46>
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
1a000f08:	2d01      	cmp	r5, #1
1a000f0a:	d93c      	bls.n	1a000f86 <create_chain+0xbe>
	{	/* At the FAT12/16/32 */
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
1a000f0c:	2402      	movs	r4, #2
				if (ncl > scl) return 0;	/* No free cluster */
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
1a000f0e:	4638      	mov	r0, r7
1a000f10:	4621      	mov	r1, r4
1a000f12:	f7ff ff19 	bl	1a000d48 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
1a000f16:	4603      	mov	r3, r0
1a000f18:	b150      	cbz	r0, 1a000f30 <create_chain+0x68>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
1a000f1a:	2801      	cmp	r0, #1
1a000f1c:	d002      	beq.n	1a000f24 <create_chain+0x5c>
1a000f1e:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000f22:	d102      	bne.n	1a000f2a <create_chain+0x62>
1a000f24:	4618      	mov	r0, r3
1a000f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ncl == scl) return 0;		/* No free cluster */
1a000f2a:	42ac      	cmp	r4, r5
1a000f2c:	d1e8      	bne.n	1a000f00 <create_chain+0x38>
1a000f2e:	e02d      	b.n	1a000f8c <create_chain+0xc4>
	}

	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
		res = FR_OK;						/* FAT does not need to be written */
	} else {
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
1a000f30:	4630      	mov	r0, r6
1a000f32:	4621      	mov	r1, r4
1a000f34:	f04f 32ff 	mov.w	r2, #4294967295
1a000f38:	f7ff fe80 	bl	1a000c3c <put_fat>
		if (res == FR_OK && clst) {
1a000f3c:	4603      	mov	r3, r0
1a000f3e:	b940      	cbnz	r0, 1a000f52 <create_chain+0x8a>
1a000f40:	f1b8 0f00 	cmp.w	r8, #0
1a000f44:	d005      	beq.n	1a000f52 <create_chain+0x8a>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
1a000f46:	4630      	mov	r0, r6
1a000f48:	4641      	mov	r1, r8
1a000f4a:	4622      	mov	r2, r4
1a000f4c:	f7ff fe76 	bl	1a000c3c <put_fat>
1a000f50:	4603      	mov	r3, r0
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1a000f52:	b963      	cbnz	r3, 1a000f6e <create_chain+0xa6>
		fs->last_clst = ncl;
1a000f54:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
1a000f56:	6932      	ldr	r2, [r6, #16]
1a000f58:	6973      	ldr	r3, [r6, #20]
1a000f5a:	3b02      	subs	r3, #2
1a000f5c:	429a      	cmp	r2, r3
1a000f5e:	d201      	bcs.n	1a000f64 <create_chain+0x9c>
1a000f60:	3a01      	subs	r2, #1
1a000f62:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
1a000f64:	7933      	ldrb	r3, [r6, #4]
1a000f66:	f043 0301 	orr.w	r3, r3, #1
1a000f6a:	7133      	strb	r3, [r6, #4]
1a000f6c:	e005      	b.n	1a000f7a <create_chain+0xb2>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
1a000f6e:	2b01      	cmp	r3, #1
1a000f70:	d102      	bne.n	1a000f78 <create_chain+0xb0>
1a000f72:	f04f 34ff 	mov.w	r4, #4294967295
1a000f76:	e000      	b.n	1a000f7a <create_chain+0xb2>
1a000f78:	2401      	movs	r4, #1
	}

	return ncl;		/* Return new cluster number or error status */
1a000f7a:	4620      	mov	r0, r4
1a000f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		scl = fs->last_clst;				/* Get suggested cluster to start at */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
		if (cs < 2) return 1;				/* Invalid value */
1a000f80:	2001      	movs	r0, #1
1a000f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
1a000f86:	2000      	movs	r0, #0
1a000f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
			if (cs == 0) break;				/* Found a free cluster */
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
			if (ncl == scl) return 0;		/* No free cluster */
1a000f8c:	2000      	movs	r0, #0
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
	}

	return ncl;		/* Return new cluster number or error status */
}
1a000f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000f92:	bf00      	nop

1a000f94 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
1a000f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000f96:	4607      	mov	r7, r0
1a000f98:	460e      	mov	r6, r1
	FRESULT res = FR_OK;
	DWORD nxt;
	FATFS *fs = obj->fs;
1a000f9a:	6804      	ldr	r4, [r0, #0]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a000f9c:	2901      	cmp	r1, #1
1a000f9e:	d92c      	bls.n	1a000ffa <remove_chain+0x66>
1a000fa0:	6963      	ldr	r3, [r4, #20]
1a000fa2:	428b      	cmp	r3, r1
1a000fa4:	d92b      	bls.n	1a000ffe <remove_chain+0x6a>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1a000fa6:	b132      	cbz	r2, 1a000fb6 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
1a000fa8:	4620      	mov	r0, r4
1a000faa:	4611      	mov	r1, r2
1a000fac:	f04f 32ff 	mov.w	r2, #4294967295
1a000fb0:	f7ff fe44 	bl	1a000c3c <put_fat>
		if (res != FR_OK) return res;
1a000fb4:	bb28      	cbnz	r0, 1a001002 <remove_chain+0x6e>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
1a000fb6:	4638      	mov	r0, r7
1a000fb8:	4631      	mov	r1, r6
1a000fba:	f7ff fec5 	bl	1a000d48 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
1a000fbe:	4605      	mov	r5, r0
1a000fc0:	b300      	cbz	r0, 1a001004 <remove_chain+0x70>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a000fc2:	2801      	cmp	r0, #1
1a000fc4:	d020      	beq.n	1a001008 <remove_chain+0x74>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a000fc6:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000fca:	d01f      	beq.n	1a00100c <remove_chain+0x78>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1a000fcc:	4620      	mov	r0, r4
1a000fce:	4631      	mov	r1, r6
1a000fd0:	2200      	movs	r2, #0
1a000fd2:	f7ff fe33 	bl	1a000c3c <put_fat>
			if (res != FR_OK) return res;
1a000fd6:	b100      	cbz	r0, 1a000fda <remove_chain+0x46>
1a000fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		if (fs->free_clst != 0xFFFFFFFF) {	/* Update FSINFO */
1a000fda:	6923      	ldr	r3, [r4, #16]
1a000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000fe0:	d005      	beq.n	1a000fee <remove_chain+0x5a>
			fs->free_clst++;
1a000fe2:	3301      	adds	r3, #1
1a000fe4:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
1a000fe6:	7923      	ldrb	r3, [r4, #4]
1a000fe8:	f043 0301 	orr.w	r3, r3, #1
1a000fec:	7123      	strb	r3, [r4, #4]
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a000fee:	6963      	ldr	r3, [r4, #20]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
1a000ff0:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a000ff2:	429d      	cmp	r5, r3
1a000ff4:	d3df      	bcc.n	1a000fb6 <remove_chain+0x22>
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
1a000ff6:	2000      	movs	r0, #0
1a000ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a000ffa:	2002      	movs	r0, #2
1a000ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000ffe:	2002      	movs	r0, #2
1a001000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
1a001004:	2000      	movs	r0, #0
1a001006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a001008:	2002      	movs	r0, #2
1a00100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a00100c:	2001      	movs	r0, #1
			}
		}
	}
#endif
	return FR_OK;
}
1a00100e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a001010 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
1a001010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
1a001014:	6806      	ldr	r6, [r0, #0]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
1a001016:	6903      	ldr	r3, [r0, #16]
1a001018:	f103 0520 	add.w	r5, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a00101c:	6983      	ldr	r3, [r0, #24]
1a00101e:	2b00      	cmp	r3, #0
1a001020:	d06e      	beq.n	1a001100 <dir_next+0xf0>
1a001022:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
1a001026:	d26e      	bcs.n	1a001106 <dir_next+0xf6>
1a001028:	4688      	mov	r8, r1
1a00102a:	4604      	mov	r4, r0

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1a00102c:	f3c5 0708 	ubfx	r7, r5, #0, #9
1a001030:	2f00      	cmp	r7, #0
1a001032:	d15d      	bne.n	1a0010f0 <dir_next+0xe0>
		dp->sect++;				/* Next sector */
1a001034:	3301      	adds	r3, #1
1a001036:	6183      	str	r3, [r0, #24]

		if (!dp->clust) {		/* Static table */
1a001038:	6941      	ldr	r1, [r0, #20]
1a00103a:	b941      	cbnz	r1, 1a00104e <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1a00103c:	8933      	ldrh	r3, [r6, #8]
1a00103e:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a001042:	d855      	bhi.n	1a0010f0 <dir_next+0xe0>
				dp->sect = 0; return FR_NO_FILE;
1a001044:	2300      	movs	r3, #0
1a001046:	6183      	str	r3, [r0, #24]
1a001048:	2004      	movs	r0, #4
1a00104a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
1a00104e:	8973      	ldrh	r3, [r6, #10]
1a001050:	3b01      	subs	r3, #1
1a001052:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
1a001056:	d14b      	bne.n	1a0010f0 <dir_next+0xe0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
1a001058:	f7ff fe76 	bl	1a000d48 <get_fat>
1a00105c:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
1a00105e:	2801      	cmp	r0, #1
1a001060:	d954      	bls.n	1a00110c <dir_next+0xfc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
1a001062:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001066:	d054      	beq.n	1a001112 <dir_next+0x102>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
1a001068:	6973      	ldr	r3, [r6, #20]
1a00106a:	4283      	cmp	r3, r0
1a00106c:	d839      	bhi.n	1a0010e2 <dir_next+0xd2>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
1a00106e:	f1b8 0f00 	cmp.w	r8, #0
1a001072:	d104      	bne.n	1a00107e <dir_next+0x6e>
						dp->sect = 0; return FR_NO_FILE;
1a001074:	2300      	movs	r3, #0
1a001076:	61a3      	str	r3, [r4, #24]
1a001078:	2004      	movs	r0, #4
1a00107a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1a00107e:	4620      	mov	r0, r4
1a001080:	6961      	ldr	r1, [r4, #20]
1a001082:	f7ff ff21 	bl	1a000ec8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a001086:	4681      	mov	r9, r0
1a001088:	2800      	cmp	r0, #0
1a00108a:	d045      	beq.n	1a001118 <dir_next+0x108>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a00108c:	2801      	cmp	r0, #1
1a00108e:	d046      	beq.n	1a00111e <dir_next+0x10e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001090:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001094:	d046      	beq.n	1a001124 <dir_next+0x114>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a001096:	4630      	mov	r0, r6
1a001098:	f7ff fbe4 	bl	1a000864 <sync_window>
1a00109c:	2800      	cmp	r0, #0
1a00109e:	d144      	bne.n	1a00112a <dir_next+0x11a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
1a0010a0:	f106 0030 	add.w	r0, r6, #48	; 0x30
1a0010a4:	2100      	movs	r1, #0
1a0010a6:	f44f 7200 	mov.w	r2, #512	; 0x200
1a0010aa:	f7ff fadf 	bl	1a00066c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
1a0010ae:	4630      	mov	r0, r6
1a0010b0:	4649      	mov	r1, r9
1a0010b2:	f7ff faf9 	bl	1a0006a8 <clust2sect>
1a0010b6:	62f0      	str	r0, [r6, #44]	; 0x2c
1a0010b8:	f04f 0800 	mov.w	r8, #0
1a0010bc:	e00a      	b.n	1a0010d4 <dir_next+0xc4>
						fs->wflag = 1;
1a0010be:	2301      	movs	r3, #1
1a0010c0:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
1a0010c2:	4630      	mov	r0, r6
1a0010c4:	f7ff fbce 	bl	1a000864 <sync_window>
1a0010c8:	bb90      	cbnz	r0, 1a001130 <dir_next+0x120>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
1a0010ca:	f108 0801 	add.w	r8, r8, #1
1a0010ce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0010d0:	3301      	adds	r3, #1
1a0010d2:	62f3      	str	r3, [r6, #44]	; 0x2c
1a0010d4:	8973      	ldrh	r3, [r6, #10]
1a0010d6:	4543      	cmp	r3, r8
1a0010d8:	d8f1      	bhi.n	1a0010be <dir_next+0xae>
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
					}
					fs->winsect -= n;							/* Restore window offset */
1a0010da:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0010dc:	ebc8 0303 	rsb	r3, r8, r3
1a0010e0:	62f3      	str	r3, [r6, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
1a0010e2:	f8c4 9014 	str.w	r9, [r4, #20]
				dp->sect = clust2sect(fs, clst);
1a0010e6:	4630      	mov	r0, r6
1a0010e8:	4649      	mov	r1, r9
1a0010ea:	f7ff fadd 	bl	1a0006a8 <clust2sect>
1a0010ee:	61a0      	str	r0, [r4, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
1a0010f0:	6125      	str	r5, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1a0010f2:	f107 0830 	add.w	r8, r7, #48	; 0x30
1a0010f6:	4446      	add	r6, r8
1a0010f8:	61e6      	str	r6, [r4, #28]

	return FR_OK;
1a0010fa:	2000      	movs	r0, #0
1a0010fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001100:	2004      	movs	r0, #4
1a001102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001106:	2004      	movs	r0, #4
1a001108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
1a00110c:	2002      	movs	r0, #2
1a00110e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
1a001112:	2001      	movs	r0, #1
1a001114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a001118:	2007      	movs	r0, #7
1a00111a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a00111e:	2002      	movs	r0, #2
1a001120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001124:	2001      	movs	r0, #1
1a001126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a00112a:	2001      	movs	r0, #1
1a00112c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
1a001130:	2001      	movs	r0, #1
	}
	dp->dptr = ofs;						/* Current entry */
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */

	return FR_OK;
}
1a001132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001136:	bf00      	nop

1a001138 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
1a001138:	b570      	push	{r4, r5, r6, lr}
1a00113a:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs = dp->obj.fs;
1a00113c:	6806      	ldr	r6, [r0, #0]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
1a00113e:	2100      	movs	r1, #0
1a001140:	f7ff fe6a 	bl	1a000e18 <dir_sdi>
	if (res != FR_OK) return res;
1a001144:	bb08      	cbnz	r0, 1a00118a <dir_find+0x52>
	/* At the FAT12/16/32 */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
1a001146:	4630      	mov	r0, r6
1a001148:	69a1      	ldr	r1, [r4, #24]
1a00114a:	f7ff fbb5 	bl	1a0008b8 <move_window>
		if (res != FR_OK) break;
1a00114e:	4605      	mov	r5, r0
1a001150:	b9c8      	cbnz	r0, 1a001186 <dir_find+0x4e>
		c = dp->dir[DIR_Name];
1a001152:	69e0      	ldr	r0, [r4, #28]
1a001154:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a001156:	b1ab      	cbz	r3, 1a001184 <dir_find+0x4c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
1a001158:	7ac3      	ldrb	r3, [r0, #11]
1a00115a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a00115e:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
1a001160:	7ac3      	ldrb	r3, [r0, #11]
1a001162:	f013 0f08 	tst.w	r3, #8
1a001166:	d105      	bne.n	1a001174 <dir_find+0x3c>
1a001168:	f104 0120 	add.w	r1, r4, #32
1a00116c:	220b      	movs	r2, #11
1a00116e:	f7ff fa83 	bl	1a000678 <mem_cmp>
1a001172:	b140      	cbz	r0, 1a001186 <dir_find+0x4e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
1a001174:	4620      	mov	r0, r4
1a001176:	2100      	movs	r1, #0
1a001178:	f7ff ff4a 	bl	1a001010 <dir_next>
	} while (res == FR_OK);
1a00117c:	4605      	mov	r5, r0
1a00117e:	2800      	cmp	r0, #0
1a001180:	d0e1      	beq.n	1a001146 <dir_find+0xe>
1a001182:	e000      	b.n	1a001186 <dir_find+0x4e>
#endif
	do {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		c = dp->dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a001184:	2504      	movs	r5, #4
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
	} while (res == FR_OK);

	return res;
1a001186:	4628      	mov	r0, r5
1a001188:	bd70      	pop	{r4, r5, r6, pc}
}
1a00118a:	bd70      	pop	{r4, r5, r6, pc}

1a00118c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
1a00118c:	b530      	push	{r4, r5, lr}
1a00118e:	b083      	sub	sp, #12
1a001190:	4604      	mov	r4, r0
1a001192:	9101      	str	r1, [sp, #4]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
	FATFS *fs = obj->fs;
1a001194:	6805      	ldr	r5, [r0, #0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from the current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
1a001196:	e001      	b.n	1a00119c <follow_path+0x10>
1a001198:	3301      	adds	r3, #1
1a00119a:	9301      	str	r3, [sp, #4]
1a00119c:	9b01      	ldr	r3, [sp, #4]
1a00119e:	781a      	ldrb	r2, [r3, #0]
1a0011a0:	2a2f      	cmp	r2, #47	; 0x2f
1a0011a2:	d0f9      	beq.n	1a001198 <follow_path+0xc>
1a0011a4:	2a5c      	cmp	r2, #92	; 0x5c
1a0011a6:	d0f7      	beq.n	1a001198 <follow_path+0xc>
		obj->sclust = 0;					/* Start from the root directory */
1a0011a8:	2200      	movs	r2, #0
1a0011aa:	60a2      	str	r2, [r4, #8]
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
1a0011ac:	781b      	ldrb	r3, [r3, #0]
1a0011ae:	2b1f      	cmp	r3, #31
1a0011b0:	d808      	bhi.n	1a0011c4 <follow_path+0x38>
		dp->fn[NSFLAG] = NS_NONAME;
1a0011b2:	2380      	movs	r3, #128	; 0x80
1a0011b4:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		res = dir_sdi(dp, 0);
1a0011b8:	4620      	mov	r0, r4
1a0011ba:	4611      	mov	r1, r2
1a0011bc:	f7ff fe2c 	bl	1a000e18 <dir_sdi>
1a0011c0:	4603      	mov	r3, r0
1a0011c2:	e026      	b.n	1a001212 <follow_path+0x86>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
1a0011c4:	4620      	mov	r0, r4
1a0011c6:	a901      	add	r1, sp, #4
1a0011c8:	f7ff fa9e 	bl	1a000708 <create_name>
			if (res != FR_OK) break;
1a0011cc:	4603      	mov	r3, r0
1a0011ce:	bb00      	cbnz	r0, 1a001212 <follow_path+0x86>
			res = dir_find(dp);				/* Find an object with the segment name */
1a0011d0:	4620      	mov	r0, r4
1a0011d2:	f7ff ffb1 	bl	1a001138 <dir_find>
			ns = dp->fn[NSFLAG];
1a0011d6:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
1a0011da:	4603      	mov	r3, r0
1a0011dc:	b128      	cbz	r0, 1a0011ea <follow_path+0x5e>
				if (res == FR_NO_FILE) {	/* Object is not found */
1a0011de:	2804      	cmp	r0, #4
1a0011e0:	d117      	bne.n	1a001212 <follow_path+0x86>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a0011e2:	f012 0f04 	tst.w	r2, #4
1a0011e6:	d011      	beq.n	1a00120c <follow_path+0x80>
1a0011e8:	e013      	b.n	1a001212 <follow_path+0x86>
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
1a0011ea:	f012 0f04 	tst.w	r2, #4
1a0011ee:	d110      	bne.n	1a001212 <follow_path+0x86>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
1a0011f0:	79a3      	ldrb	r3, [r4, #6]
1a0011f2:	f013 0f10 	tst.w	r3, #16
1a0011f6:	d00b      	beq.n	1a001210 <follow_path+0x84>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
1a0011f8:	6921      	ldr	r1, [r4, #16]
1a0011fa:	f3c1 0108 	ubfx	r1, r1, #0, #9
1a0011fe:	3130      	adds	r1, #48	; 0x30
1a001200:	4628      	mov	r0, r5
1a001202:	4429      	add	r1, r5
1a001204:	f7ff fa5c 	bl	1a0006c0 <ld_clust>
1a001208:	60a0      	str	r0, [r4, #8]
			}
		}
1a00120a:	e7db      	b.n	1a0011c4 <follow_path+0x38>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a00120c:	2305      	movs	r3, #5
1a00120e:	e000      	b.n	1a001212 <follow_path+0x86>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
1a001210:	2305      	movs	r3, #5
			}
		}
	}

	return res;
}
1a001212:	4618      	mov	r0, r3
1a001214:	b003      	add	sp, #12
1a001216:	bd30      	pop	{r4, r5, pc}

1a001218 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
1a001218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00121a:	4604      	mov	r4, r0
1a00121c:	460f      	mov	r7, r1
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
1a00121e:	6806      	ldr	r6, [r0, #0]


	res = dir_sdi(dp, 0);
1a001220:	2100      	movs	r1, #0
1a001222:	f7ff fdf9 	bl	1a000e18 <dir_sdi>
	if (res == FR_OK) {
1a001226:	4602      	mov	r2, r0
1a001228:	b9b8      	cbnz	r0, 1a00125a <dir_alloc+0x42>
1a00122a:	2500      	movs	r5, #0
		n = 0;
		do {
			res = move_window(fs, dp->sect);
1a00122c:	4630      	mov	r0, r6
1a00122e:	69a1      	ldr	r1, [r4, #24]
1a001230:	f7ff fb42 	bl	1a0008b8 <move_window>
			if (res != FR_OK) break;
1a001234:	4602      	mov	r2, r0
1a001236:	b980      	cbnz	r0, 1a00125a <dir_alloc+0x42>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
1a001238:	69e3      	ldr	r3, [r4, #28]
1a00123a:	781b      	ldrb	r3, [r3, #0]
1a00123c:	2be5      	cmp	r3, #229	; 0xe5
1a00123e:	d000      	beq.n	1a001242 <dir_alloc+0x2a>
1a001240:	b91b      	cbnz	r3, 1a00124a <dir_alloc+0x32>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
1a001242:	3501      	adds	r5, #1
1a001244:	42bd      	cmp	r5, r7
1a001246:	d101      	bne.n	1a00124c <dir_alloc+0x34>
1a001248:	e007      	b.n	1a00125a <dir_alloc+0x42>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
1a00124a:	2500      	movs	r5, #0
			}
			res = dir_next(dp, 1);
1a00124c:	4620      	mov	r0, r4
1a00124e:	2101      	movs	r1, #1
1a001250:	f7ff fede 	bl	1a001010 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1a001254:	4602      	mov	r2, r0
1a001256:	2800      	cmp	r0, #0
1a001258:	d0e8      	beq.n	1a00122c <dir_alloc+0x14>
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a00125a:	2a04      	cmp	r2, #4
1a00125c:	d100      	bne.n	1a001260 <dir_alloc+0x48>
1a00125e:	2207      	movs	r2, #7
	return res;
}
1a001260:	4610      	mov	r0, r2
1a001262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a001264 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
1a001264:	b570      	push	{r4, r5, r6, lr}
1a001266:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs = dp->obj.fs;
1a001268:	6806      	ldr	r6, [r0, #0]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
1a00126a:	2101      	movs	r1, #1
1a00126c:	f7ff ffd4 	bl	1a001218 <dir_alloc>

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
1a001270:	4605      	mov	r5, r0
1a001272:	b990      	cbnz	r0, 1a00129a <dir_register+0x36>
		res = move_window(fs, dp->sect);
1a001274:	4630      	mov	r0, r6
1a001276:	69a1      	ldr	r1, [r4, #24]
1a001278:	f7ff fb1e 	bl	1a0008b8 <move_window>
		if (res == FR_OK) {
1a00127c:	4605      	mov	r5, r0
1a00127e:	b960      	cbnz	r0, 1a00129a <dir_register+0x36>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
1a001280:	69e0      	ldr	r0, [r4, #28]
1a001282:	2100      	movs	r1, #0
1a001284:	2220      	movs	r2, #32
1a001286:	f7ff f9f1 	bl	1a00066c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
1a00128a:	69e0      	ldr	r0, [r4, #28]
1a00128c:	f104 0120 	add.w	r1, r4, #32
1a001290:	220b      	movs	r2, #11
1a001292:	f7ff f9e1 	bl	1a000658 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
1a001296:	2301      	movs	r3, #1
1a001298:	70f3      	strb	r3, [r6, #3]
		}
	}

	return res;
}
1a00129a:	4628      	mov	r0, r5
1a00129c:	bd70      	pop	{r4, r5, r6, pc}
1a00129e:	bf00      	nop

1a0012a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
1a0012a0:	b570      	push	{r4, r5, r6, lr}
1a0012a2:	4604      	mov	r4, r0
	FRESULT res;


	res = sync_window(fs);
1a0012a4:	f7ff fade 	bl	1a000864 <sync_window>
	if (res == FR_OK) {
1a0012a8:	4605      	mov	r5, r0
1a0012aa:	2800      	cmp	r0, #0
1a0012ac:	d137      	bne.n	1a00131e <sync_fs+0x7e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
1a0012ae:	7823      	ldrb	r3, [r4, #0]
1a0012b0:	2b03      	cmp	r3, #3
1a0012b2:	d12d      	bne.n	1a001310 <sync_fs+0x70>
1a0012b4:	7923      	ldrb	r3, [r4, #4]
1a0012b6:	2b01      	cmp	r3, #1
1a0012b8:	d12a      	bne.n	1a001310 <sync_fs+0x70>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
1a0012ba:	f104 0630 	add.w	r6, r4, #48	; 0x30
1a0012be:	4630      	mov	r0, r6
1a0012c0:	2100      	movs	r1, #0
1a0012c2:	f44f 7200 	mov.w	r2, #512	; 0x200
1a0012c6:	f7ff f9d1 	bl	1a00066c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
1a0012ca:	f204 202e 	addw	r0, r4, #558	; 0x22e
1a0012ce:	f64a 2155 	movw	r1, #43605	; 0xaa55
1a0012d2:	f7ff f9b3 	bl	1a00063c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
1a0012d6:	4630      	mov	r0, r6
1a0012d8:	4912      	ldr	r1, [pc, #72]	; (1a001324 <sync_fs+0x84>)
1a0012da:	f7ff f9b3 	bl	1a000644 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
1a0012de:	f504 7005 	add.w	r0, r4, #532	; 0x214
1a0012e2:	4911      	ldr	r1, [pc, #68]	; (1a001328 <sync_fs+0x88>)
1a0012e4:	f7ff f9ae 	bl	1a000644 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
1a0012e8:	f504 7006 	add.w	r0, r4, #536	; 0x218
1a0012ec:	6921      	ldr	r1, [r4, #16]
1a0012ee:	f7ff f9a9 	bl	1a000644 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
1a0012f2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a0012f6:	68e1      	ldr	r1, [r4, #12]
1a0012f8:	f7ff f9a4 	bl	1a000644 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
1a0012fc:	69e2      	ldr	r2, [r4, #28]
1a0012fe:	3201      	adds	r2, #1
1a001300:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
1a001302:	7860      	ldrb	r0, [r4, #1]
1a001304:	4631      	mov	r1, r6
1a001306:	2301      	movs	r3, #1
1a001308:	f000 fc68 	bl	1a001bdc <disk_write>
			fs->fsi_flag = 0;
1a00130c:	2300      	movs	r3, #0
1a00130e:	7123      	strb	r3, [r4, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
1a001310:	7860      	ldrb	r0, [r4, #1]
1a001312:	2100      	movs	r1, #0
1a001314:	460a      	mov	r2, r1
1a001316:	f000 fcb7 	bl	1a001c88 <disk_ioctl>
1a00131a:	b100      	cbz	r0, 1a00131e <sync_fs+0x7e>
1a00131c:	2501      	movs	r5, #1
	}

	return res;
}
1a00131e:	4628      	mov	r0, r5
1a001320:	bd70      	pop	{r4, r5, r6, pc}
1a001322:	bf00      	nop
1a001324:	41615252 	.word	0x41615252
1a001328:	61417272 	.word	0x61417272

1a00132c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
1a00132c:	b510      	push	{r4, lr}
1a00132e:	b084      	sub	sp, #16
1a001330:	9001      	str	r0, [sp, #4]
1a001332:	9100      	str	r1, [sp, #0]
1a001334:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
1a001336:	a804      	add	r0, sp, #16
1a001338:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
1a00133c:	f7ff fa4c 	bl	1a0007d8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a001340:	2800      	cmp	r0, #0
1a001342:	db16      	blt.n	1a001372 <f_mount+0x46>
	cfs = FatFs[vol];					/* Pointer to fs object */
1a001344:	4b0e      	ldr	r3, [pc, #56]	; (1a001380 <f_mount+0x54>)
1a001346:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
1a00134a:	b10b      	cbz	r3, 1a001350 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
1a00134c:	2200      	movs	r2, #0
1a00134e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
1a001350:	9b01      	ldr	r3, [sp, #4]
1a001352:	b10b      	cbz	r3, 1a001358 <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
1a001354:	2200      	movs	r2, #0
1a001356:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
1a001358:	9b01      	ldr	r3, [sp, #4]
1a00135a:	4a09      	ldr	r2, [pc, #36]	; (1a001380 <f_mount+0x54>)
1a00135c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
1a001360:	b14b      	cbz	r3, 1a001376 <f_mount+0x4a>
1a001362:	2c01      	cmp	r4, #1
1a001364:	d109      	bne.n	1a00137a <f_mount+0x4e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
1a001366:	4668      	mov	r0, sp
1a001368:	a901      	add	r1, sp, #4
1a00136a:	2200      	movs	r2, #0
1a00136c:	f7ff fafc 	bl	1a000968 <find_volume>
	LEAVE_FF(fs, res);
1a001370:	e004      	b.n	1a00137c <f_mount+0x50>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
1a001372:	200b      	movs	r0, #11
1a001374:	e002      	b.n	1a00137c <f_mount+0x50>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
1a001376:	2000      	movs	r0, #0
1a001378:	e000      	b.n	1a00137c <f_mount+0x50>
1a00137a:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
1a00137c:	b004      	add	sp, #16
1a00137e:	bd10      	pop	{r4, pc}
1a001380:	10000554 	.word	0x10000554

1a001384 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
1a001384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001388:	b08f      	sub	sp, #60	; 0x3c
1a00138a:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
1a00138c:	2800      	cmp	r0, #0
1a00138e:	f000 80e0 	beq.w	1a001552 <f_open+0x1ce>
1a001392:	4606      	mov	r6, r0
1a001394:	4615      	mov	r5, r2

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
1a001396:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
1a00139a:	a801      	add	r0, sp, #4
1a00139c:	a902      	add	r1, sp, #8
1a00139e:	463a      	mov	r2, r7
1a0013a0:	f7ff fae2 	bl	1a000968 <find_volume>
	if (res == FR_OK) {
1a0013a4:	4604      	mov	r4, r0
1a0013a6:	2800      	cmp	r0, #0
1a0013a8:	f040 80ce 	bne.w	1a001548 <f_open+0x1c4>
		dj.obj.fs = fs;
1a0013ac:	9b02      	ldr	r3, [sp, #8]
1a0013ae:	9303      	str	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
1a0013b0:	a803      	add	r0, sp, #12
1a0013b2:	9901      	ldr	r1, [sp, #4]
1a0013b4:	f7ff feea 	bl	1a00118c <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
1a0013b8:	4604      	mov	r4, r0
1a0013ba:	b920      	cbnz	r0, 1a0013c6 <f_open+0x42>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
1a0013bc:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
1a0013c0:	2b00      	cmp	r3, #0
1a0013c2:	da00      	bge.n	1a0013c6 <f_open+0x42>
				res = FR_INVALID_NAME;
1a0013c4:	2406      	movs	r4, #6
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
1a0013c6:	f015 0f1c 	tst.w	r5, #28
1a0013ca:	d053      	beq.n	1a001474 <f_open+0xf0>
			if (res != FR_OK) {					/* No file, create new */
1a0013cc:	b144      	cbz	r4, 1a0013e0 <f_open+0x5c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
1a0013ce:	2c04      	cmp	r4, #4
1a0013d0:	d103      	bne.n	1a0013da <f_open+0x56>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
1a0013d2:	a803      	add	r0, sp, #12
1a0013d4:	f7ff ff46 	bl	1a001264 <dir_register>
1a0013d8:	4604      	mov	r4, r0
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
1a0013da:	f047 0708 	orr.w	r7, r7, #8
1a0013de:	e00b      	b.n	1a0013f8 <f_open+0x74>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
1a0013e0:	f89d 3012 	ldrb.w	r3, [sp, #18]
1a0013e4:	f013 0f11 	tst.w	r3, #17
1a0013e8:	d103      	bne.n	1a0013f2 <f_open+0x6e>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
1a0013ea:	f015 0f04 	tst.w	r5, #4
1a0013ee:	d102      	bne.n	1a0013f6 <f_open+0x72>
1a0013f0:	e002      	b.n	1a0013f8 <f_open+0x74>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
1a0013f2:	2407      	movs	r4, #7
1a0013f4:	e000      	b.n	1a0013f8 <f_open+0x74>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
1a0013f6:	2408      	movs	r4, #8
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
1a0013f8:	2c00      	cmp	r4, #0
1a0013fa:	d14b      	bne.n	1a001494 <f_open+0x110>
1a0013fc:	f017 0f08 	tst.w	r7, #8
1a001400:	d048      	beq.n	1a001494 <f_open+0x110>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
1a001402:	4d56      	ldr	r5, [pc, #344]	; (1a00155c <f_open+0x1d8>)
1a001404:	980a      	ldr	r0, [sp, #40]	; 0x28
1a001406:	300e      	adds	r0, #14
1a001408:	4629      	mov	r1, r5
1a00140a:	f7ff f91b 	bl	1a000644 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
1a00140e:	980a      	ldr	r0, [sp, #40]	; 0x28
1a001410:	3016      	adds	r0, #22
1a001412:	4629      	mov	r1, r5
1a001414:	f7ff f916 	bl	1a000644 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
1a001418:	2220      	movs	r2, #32
1a00141a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00141c:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
1a00141e:	f8dd 8008 	ldr.w	r8, [sp, #8]
1a001422:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001424:	4640      	mov	r0, r8
1a001426:	4629      	mov	r1, r5
1a001428:	f7ff f94a 	bl	1a0006c0 <ld_clust>
1a00142c:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
1a00142e:	4640      	mov	r0, r8
1a001430:	4629      	mov	r1, r5
1a001432:	2200      	movs	r2, #0
1a001434:	f7ff f956 	bl	1a0006e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
1a001438:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00143a:	301c      	adds	r0, #28
1a00143c:	2100      	movs	r1, #0
1a00143e:	f7ff f901 	bl	1a000644 <st_dword>
					fs->wflag = 1;
1a001442:	2201      	movs	r2, #1
1a001444:	9b02      	ldr	r3, [sp, #8]
1a001446:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
1a001448:	f1b9 0f00 	cmp.w	r9, #0
1a00144c:	d022      	beq.n	1a001494 <f_open+0x110>
						dw = fs->winsect;
1a00144e:	9b02      	ldr	r3, [sp, #8]
1a001450:	6add      	ldr	r5, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
1a001452:	a803      	add	r0, sp, #12
1a001454:	4649      	mov	r1, r9
1a001456:	2200      	movs	r2, #0
1a001458:	f7ff fd9c 	bl	1a000f94 <remove_chain>
						if (res == FR_OK) {
1a00145c:	4604      	mov	r4, r0
1a00145e:	b9c8      	cbnz	r0, 1a001494 <f_open+0x110>
							res = move_window(fs, dw);
1a001460:	9802      	ldr	r0, [sp, #8]
1a001462:	4629      	mov	r1, r5
1a001464:	f7ff fa28 	bl	1a0008b8 <move_window>
1a001468:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
1a00146a:	f109 33ff 	add.w	r3, r9, #4294967295
1a00146e:	9a02      	ldr	r2, [sp, #8]
1a001470:	60d3      	str	r3, [r2, #12]
1a001472:	e00f      	b.n	1a001494 <f_open+0x110>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
1a001474:	b974      	cbnz	r4, 1a001494 <f_open+0x110>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
1a001476:	f89d 3012 	ldrb.w	r3, [sp, #18]
1a00147a:	f013 0f10 	tst.w	r3, #16
1a00147e:	d106      	bne.n	1a00148e <f_open+0x10a>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
1a001480:	f015 0f02 	tst.w	r5, #2
1a001484:	d006      	beq.n	1a001494 <f_open+0x110>
1a001486:	f013 0f01 	tst.w	r3, #1
1a00148a:	d102      	bne.n	1a001492 <f_open+0x10e>
1a00148c:	e002      	b.n	1a001494 <f_open+0x110>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
1a00148e:	2404      	movs	r4, #4
1a001490:	e000      	b.n	1a001494 <f_open+0x110>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
						res = FR_DENIED;
1a001492:	2407      	movs	r4, #7
					}
				}
			}
		}
		if (res == FR_OK) {
1a001494:	b94c      	cbnz	r4, 1a0014aa <f_open+0x126>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
1a001496:	f017 0f08 	tst.w	r7, #8
1a00149a:	d001      	beq.n	1a0014a0 <f_open+0x11c>
				mode |= FA_MODIFIED;
1a00149c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
1a0014a0:	9b02      	ldr	r3, [sp, #8]
1a0014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0014a4:	6233      	str	r3, [r6, #32]
			fp->dir_ptr = dj.dir;
1a0014a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0014a8:	6273      	str	r3, [r6, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
1a0014aa:	2c00      	cmp	r4, #0
1a0014ac:	d14c      	bne.n	1a001548 <f_open+0x1c4>
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
				fp->obj.c_ofs = dj.blk_ofs;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
1a0014ae:	9d02      	ldr	r5, [sp, #8]
1a0014b0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
1a0014b4:	4628      	mov	r0, r5
1a0014b6:	4641      	mov	r1, r8
1a0014b8:	f7ff f902 	bl	1a0006c0 <ld_clust>
1a0014bc:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
1a0014be:	f108 001c 	add.w	r0, r8, #28
1a0014c2:	f7ff f8af 	bl	1a000624 <ld_dword>
1a0014c6:	60f0      	str	r0, [r6, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
1a0014c8:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
1a0014ca:	88eb      	ldrh	r3, [r5, #6]
1a0014cc:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
1a0014ce:	7437      	strb	r7, [r6, #16]
			fp->err = 0;			/* Clear error flag */
1a0014d0:	2100      	movs	r1, #0
1a0014d2:	7471      	strb	r1, [r6, #17]
			fp->sect = 0;			/* Invalidate current data sector */
1a0014d4:	61f1      	str	r1, [r6, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
1a0014d6:	6171      	str	r1, [r6, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
1a0014d8:	f106 0828 	add.w	r8, r6, #40	; 0x28
1a0014dc:	4640      	mov	r0, r8
1a0014de:	f44f 7200 	mov.w	r2, #512	; 0x200
1a0014e2:	f7ff f8c3 	bl	1a00066c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
1a0014e6:	f017 0f20 	tst.w	r7, #32
1a0014ea:	d02d      	beq.n	1a001548 <f_open+0x1c4>
1a0014ec:	68f5      	ldr	r5, [r6, #12]
1a0014ee:	b35d      	cbz	r5, 1a001548 <f_open+0x1c4>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
1a0014f0:	6175      	str	r5, [r6, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
1a0014f2:	9b02      	ldr	r3, [sp, #8]
1a0014f4:	895f      	ldrh	r7, [r3, #10]
1a0014f6:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
1a0014f8:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a0014fa:	e00b      	b.n	1a001514 <f_open+0x190>
					clst = get_fat(&fp->obj, clst);
1a0014fc:	4630      	mov	r0, r6
1a0014fe:	f7ff fc23 	bl	1a000d48 <get_fat>
1a001502:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
1a001504:	2801      	cmp	r0, #1
1a001506:	d800      	bhi.n	1a00150a <f_open+0x186>
1a001508:	2402      	movs	r4, #2
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a00150a:	f1b1 3fff 	cmp.w	r1, #4294967295
1a00150e:	d100      	bne.n	1a001512 <f_open+0x18e>
1a001510:	2401      	movs	r4, #1
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a001512:	1bed      	subs	r5, r5, r7
1a001514:	b90c      	cbnz	r4, 1a00151a <f_open+0x196>
1a001516:	42bd      	cmp	r5, r7
1a001518:	d8f0      	bhi.n	1a0014fc <f_open+0x178>
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
1a00151a:	61b1      	str	r1, [r6, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
1a00151c:	b9a4      	cbnz	r4, 1a001548 <f_open+0x1c4>
1a00151e:	f3c5 0308 	ubfx	r3, r5, #0, #9
1a001522:	b18b      	cbz	r3, 1a001548 <f_open+0x1c4>
					if ((sc = clust2sect(fs, clst)) == 0) {
1a001524:	9f02      	ldr	r7, [sp, #8]
1a001526:	4638      	mov	r0, r7
1a001528:	f7ff f8be 	bl	1a0006a8 <clust2sect>
1a00152c:	b148      	cbz	r0, 1a001542 <f_open+0x1be>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
1a00152e:	eb00 2255 	add.w	r2, r0, r5, lsr #9
1a001532:	61f2      	str	r2, [r6, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
1a001534:	7878      	ldrb	r0, [r7, #1]
1a001536:	4641      	mov	r1, r8
1a001538:	2301      	movs	r3, #1
1a00153a:	f000 fb0b 	bl	1a001b54 <disk_read>
1a00153e:	b910      	cbnz	r0, 1a001546 <f_open+0x1c2>
1a001540:	e002      	b.n	1a001548 <f_open+0x1c4>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
						res = FR_INT_ERR;
1a001542:	2402      	movs	r4, #2
1a001544:	e000      	b.n	1a001548 <f_open+0x1c4>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
1a001546:	2401      	movs	r4, #1
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
1a001548:	b10c      	cbz	r4, 1a00154e <f_open+0x1ca>
1a00154a:	2300      	movs	r3, #0
1a00154c:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
1a00154e:	4620      	mov	r0, r4
1a001550:	e000      	b.n	1a001554 <f_open+0x1d0>
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
1a001552:	2009      	movs	r0, #9
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
}
1a001554:	b00f      	add	sp, #60	; 0x3c
1a001556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00155a:	bf00      	nop
1a00155c:	48210000 	.word	0x48210000

1a001560 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
1a001560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001564:	b083      	sub	sp, #12
1a001566:	4604      	mov	r4, r0
1a001568:	4688      	mov	r8, r1
1a00156a:	4616      	mov	r6, r2
1a00156c:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
1a00156e:	2300      	movs	r3, #0
1a001570:	603b      	str	r3, [r7, #0]
	res = validate(fp, &fs);
1a001572:	a901      	add	r1, sp, #4
1a001574:	f7ff f95c 	bl	1a000830 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
1a001578:	4603      	mov	r3, r0
1a00157a:	b908      	cbnz	r0, 1a001580 <f_write+0x20>
1a00157c:	7c63      	ldrb	r3, [r4, #17]
1a00157e:	b10b      	cbz	r3, 1a001584 <f_write+0x24>
1a001580:	4618      	mov	r0, r3
1a001582:	e0be      	b.n	1a001702 <f_write+0x1a2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a001584:	7c23      	ldrb	r3, [r4, #16]
1a001586:	f013 0f02 	tst.w	r3, #2
1a00158a:	f000 80b9 	beq.w	1a001700 <f_write+0x1a0>

	/* Check fptr wrap-around (file size cannot exceed the limit on each FAT specs) */
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
1a00158e:	6963      	ldr	r3, [r4, #20]
	res = validate(fp, &fs);
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */

	/* Check fptr wrap-around (file size cannot exceed the limit on each FAT specs) */
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
1a001590:	42f3      	cmn	r3, r6
1a001592:	f0c0 80ac 	bcc.w	1a0016ee <f_write+0x18e>
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
1a001596:	43de      	mvns	r6, r3
1a001598:	e0a9      	b.n	1a0016ee <f_write+0x18e>
	}

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
1a00159a:	6963      	ldr	r3, [r4, #20]
1a00159c:	f3c3 0208 	ubfx	r2, r3, #0, #9
1a0015a0:	2a00      	cmp	r2, #0
1a0015a2:	f040 8085 	bne.w	1a0016b0 <f_write+0x150>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
1a0015a6:	9a01      	ldr	r2, [sp, #4]
1a0015a8:	8952      	ldrh	r2, [r2, #10]
1a0015aa:	3a01      	subs	r2, #1
			if (csect == 0) {				/* On the cluster boundary? */
1a0015ac:	ea12 2953 	ands.w	r9, r2, r3, lsr #9
1a0015b0:	d11f      	bne.n	1a0015f2 <f_write+0x92>
				if (fp->fptr == 0) {		/* On the top of the file? */
1a0015b2:	b933      	cbnz	r3, 1a0015c2 <f_write+0x62>
					clst = fp->obj.sclust;	/* Follow from the origin */
1a0015b4:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
1a0015b6:	b940      	cbnz	r0, 1a0015ca <f_write+0x6a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
1a0015b8:	4620      	mov	r0, r4
1a0015ba:	2100      	movs	r1, #0
1a0015bc:	f7ff fc84 	bl	1a000ec8 <create_chain>
1a0015c0:	e003      	b.n	1a0015ca <f_write+0x6a>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
1a0015c2:	4620      	mov	r0, r4
1a0015c4:	69a1      	ldr	r1, [r4, #24]
1a0015c6:	f7ff fc7f 	bl	1a000ec8 <create_chain>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
1a0015ca:	2800      	cmp	r0, #0
1a0015cc:	f000 8092 	beq.w	1a0016f4 <f_write+0x194>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a0015d0:	2801      	cmp	r0, #1
1a0015d2:	d103      	bne.n	1a0015dc <f_write+0x7c>
1a0015d4:	2302      	movs	r3, #2
1a0015d6:	7463      	strb	r3, [r4, #17]
1a0015d8:	4618      	mov	r0, r3
1a0015da:	e092      	b.n	1a001702 <f_write+0x1a2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a0015dc:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0015e0:	d103      	bne.n	1a0015ea <f_write+0x8a>
1a0015e2:	2301      	movs	r3, #1
1a0015e4:	7463      	strb	r3, [r4, #17]
1a0015e6:	4618      	mov	r0, r3
1a0015e8:	e08b      	b.n	1a001702 <f_write+0x1a2>
				fp->clust = clst;			/* Update current cluster */
1a0015ea:	61a0      	str	r0, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
1a0015ec:	68a3      	ldr	r3, [r4, #8]
1a0015ee:	b903      	cbnz	r3, 1a0015f2 <f_write+0x92>
1a0015f0:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
1a0015f2:	f994 3010 	ldrsb.w	r3, [r4, #16]
1a0015f6:	2b00      	cmp	r3, #0
1a0015f8:	da10      	bge.n	1a00161c <f_write+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a0015fa:	9b01      	ldr	r3, [sp, #4]
1a0015fc:	7858      	ldrb	r0, [r3, #1]
1a0015fe:	f104 0128 	add.w	r1, r4, #40	; 0x28
1a001602:	69e2      	ldr	r2, [r4, #28]
1a001604:	2301      	movs	r3, #1
1a001606:	f000 fae9 	bl	1a001bdc <disk_write>
1a00160a:	b118      	cbz	r0, 1a001614 <f_write+0xb4>
1a00160c:	2301      	movs	r3, #1
1a00160e:	7463      	strb	r3, [r4, #17]
1a001610:	4618      	mov	r0, r3
1a001612:	e076      	b.n	1a001702 <f_write+0x1a2>
				fp->flag &= ~FA_DIRTY;
1a001614:	7c23      	ldrb	r3, [r4, #16]
1a001616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a00161a:	7423      	strb	r3, [r4, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
1a00161c:	f8dd a004 	ldr.w	sl, [sp, #4]
1a001620:	4650      	mov	r0, sl
1a001622:	69a1      	ldr	r1, [r4, #24]
1a001624:	f7ff f840 	bl	1a0006a8 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
1a001628:	4605      	mov	r5, r0
1a00162a:	b910      	cbnz	r0, 1a001632 <f_write+0xd2>
1a00162c:	2002      	movs	r0, #2
1a00162e:	7460      	strb	r0, [r4, #17]
1a001630:	e067      	b.n	1a001702 <f_write+0x1a2>
			sect += csect;
1a001632:	444d      	add	r5, r9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
1a001634:	ea5f 2b56 	movs.w	fp, r6, lsr #9
1a001638:	d025      	beq.n	1a001686 <f_write+0x126>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
1a00163a:	eb09 030b 	add.w	r3, r9, fp
1a00163e:	f8ba 200a 	ldrh.w	r2, [sl, #10]
1a001642:	4293      	cmp	r3, r2
1a001644:	d901      	bls.n	1a00164a <f_write+0xea>
					cc = fs->csize - csect;
1a001646:	ebc9 0b02 	rsb	fp, r9, r2
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) {
1a00164a:	f89a 0001 	ldrb.w	r0, [sl, #1]
1a00164e:	4641      	mov	r1, r8
1a001650:	462a      	mov	r2, r5
1a001652:	465b      	mov	r3, fp
1a001654:	f000 fac2 	bl	1a001bdc <disk_write>
1a001658:	b110      	cbz	r0, 1a001660 <f_write+0x100>
					ABORT(fs, FR_DISK_ERR);
1a00165a:	2001      	movs	r0, #1
1a00165c:	7460      	strb	r0, [r4, #17]
1a00165e:	e050      	b.n	1a001702 <f_write+0x1a2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
1a001660:	69e1      	ldr	r1, [r4, #28]
1a001662:	1b49      	subs	r1, r1, r5
1a001664:	4559      	cmp	r1, fp
1a001666:	d20b      	bcs.n	1a001680 <f_write+0x120>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
1a001668:	f104 0028 	add.w	r0, r4, #40	; 0x28
1a00166c:	eb08 2141 	add.w	r1, r8, r1, lsl #9
1a001670:	f44f 7200 	mov.w	r2, #512	; 0x200
1a001674:	f7fe fff0 	bl	1a000658 <mem_cpy>
					fp->flag &= ~FA_DIRTY;
1a001678:	7c23      	ldrb	r3, [r4, #16]
1a00167a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a00167e:	7423      	strb	r3, [r4, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
1a001680:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
1a001684:	e026      	b.n	1a0016d4 <f_write+0x174>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect) {		/* Fill sector cache with file data */
1a001686:	69e3      	ldr	r3, [r4, #28]
1a001688:	42ab      	cmp	r3, r5
1a00168a:	d010      	beq.n	1a0016ae <f_write+0x14e>
				if (fp->fptr < fp->obj.objsize &&
1a00168c:	6962      	ldr	r2, [r4, #20]
1a00168e:	68e3      	ldr	r3, [r4, #12]
1a001690:	429a      	cmp	r2, r3
1a001692:	d20c      	bcs.n	1a0016ae <f_write+0x14e>
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
1a001694:	f89a 0001 	ldrb.w	r0, [sl, #1]
1a001698:	f104 0128 	add.w	r1, r4, #40	; 0x28
1a00169c:	462a      	mov	r2, r5
1a00169e:	2301      	movs	r3, #1
1a0016a0:	f000 fa58 	bl	1a001b54 <disk_read>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->obj.objsize &&
1a0016a4:	b118      	cbz	r0, 1a0016ae <f_write+0x14e>
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
						ABORT(fs, FR_DISK_ERR);
1a0016a6:	2301      	movs	r3, #1
1a0016a8:	7463      	strb	r3, [r4, #17]
1a0016aa:	4618      	mov	r0, r3
1a0016ac:	e029      	b.n	1a001702 <f_write+0x1a2>
				}
			}
#endif
			fp->sect = sect;
1a0016ae:	61e5      	str	r5, [r4, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
1a0016b0:	6960      	ldr	r0, [r4, #20]
1a0016b2:	f3c0 0008 	ubfx	r0, r0, #0, #9
1a0016b6:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
1a0016ba:	42b5      	cmp	r5, r6
1a0016bc:	d900      	bls.n	1a0016c0 <f_write+0x160>
1a0016be:	4635      	mov	r5, r6
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
1a0016c0:	3028      	adds	r0, #40	; 0x28
1a0016c2:	4420      	add	r0, r4
1a0016c4:	4641      	mov	r1, r8
1a0016c6:	462a      	mov	r2, r5
1a0016c8:	f7fe ffc6 	bl	1a000658 <mem_cpy>
		fp->flag |= FA_DIRTY;
1a0016cc:	7c23      	ldrb	r3, [r4, #16]
1a0016ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a0016d2:	7423      	strb	r3, [r4, #16]
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
1a0016d4:	44a8      	add	r8, r5
1a0016d6:	6963      	ldr	r3, [r4, #20]
1a0016d8:	442b      	add	r3, r5
1a0016da:	6163      	str	r3, [r4, #20]
1a0016dc:	68e2      	ldr	r2, [r4, #12]
1a0016de:	4293      	cmp	r3, r2
1a0016e0:	bf38      	it	cc
1a0016e2:	4613      	movcc	r3, r2
1a0016e4:	60e3      	str	r3, [r4, #12]
1a0016e6:	683b      	ldr	r3, [r7, #0]
1a0016e8:	442b      	add	r3, r5
1a0016ea:	603b      	str	r3, [r7, #0]
1a0016ec:	1b76      	subs	r6, r6, r5
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
1a0016ee:	2e00      	cmp	r6, #0
1a0016f0:	f47f af53 	bne.w	1a00159a <f_write+0x3a>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;						/* Set file change flag */
1a0016f4:	7c23      	ldrb	r3, [r4, #16]
1a0016f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0016fa:	7423      	strb	r3, [r4, #16]

	LEAVE_FF(fs, FR_OK);
1a0016fc:	2000      	movs	r0, #0
1a0016fe:	e000      	b.n	1a001702 <f_write+0x1a2>


	*bw = 0;	/* Clear write byte counter */
	res = validate(fp, &fs);
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a001700:	2007      	movs	r0, #7
	}

	fp->flag |= FA_MODIFIED;						/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
1a001702:	b003      	add	sp, #12
1a001704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a001708 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
1a001708:	b530      	push	{r4, r5, lr}
1a00170a:	b083      	sub	sp, #12
1a00170c:	4604      	mov	r4, r0
	DWORD tm;
	BYTE *dir;
	DEF_NAMBUF


	res = validate(fp, &fs);	/* Check validity of the object */
1a00170e:	a901      	add	r1, sp, #4
1a001710:	f7ff f88e 	bl	1a000830 <validate>
	if (res == FR_OK) {
1a001714:	4603      	mov	r3, r0
1a001716:	2800      	cmp	r0, #0
1a001718:	d13d      	bne.n	1a001796 <f_sync+0x8e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
1a00171a:	7c22      	ldrb	r2, [r4, #16]
1a00171c:	f012 0f40 	tst.w	r2, #64	; 0x40
1a001720:	d039      	beq.n	1a001796 <f_sync+0x8e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
1a001722:	f012 0f80 	tst.w	r2, #128	; 0x80
1a001726:	d00c      	beq.n	1a001742 <f_sync+0x3a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a001728:	9b01      	ldr	r3, [sp, #4]
1a00172a:	7858      	ldrb	r0, [r3, #1]
1a00172c:	f104 0128 	add.w	r1, r4, #40	; 0x28
1a001730:	69e2      	ldr	r2, [r4, #28]
1a001732:	2301      	movs	r3, #1
1a001734:	f000 fa52 	bl	1a001bdc <disk_write>
1a001738:	bb78      	cbnz	r0, 1a00179a <f_sync+0x92>
				fp->flag &= ~FA_DIRTY;
1a00173a:	7c23      	ldrb	r3, [r4, #16]
1a00173c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a001740:	7423      	strb	r3, [r4, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
1a001742:	9801      	ldr	r0, [sp, #4]
1a001744:	6a21      	ldr	r1, [r4, #32]
1a001746:	f7ff f8b7 	bl	1a0008b8 <move_window>
				if (res == FR_OK) {
1a00174a:	4603      	mov	r3, r0
1a00174c:	bb18      	cbnz	r0, 1a001796 <f_sync+0x8e>
					dir = fp->dir_ptr;
1a00174e:	6a65      	ldr	r5, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
1a001750:	7aeb      	ldrb	r3, [r5, #11]
1a001752:	f043 0320 	orr.w	r3, r3, #32
1a001756:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
1a001758:	6820      	ldr	r0, [r4, #0]
1a00175a:	4629      	mov	r1, r5
1a00175c:	68a2      	ldr	r2, [r4, #8]
1a00175e:	f7fe ffc1 	bl	1a0006e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
1a001762:	f105 001c 	add.w	r0, r5, #28
1a001766:	68e1      	ldr	r1, [r4, #12]
1a001768:	f7fe ff6c 	bl	1a000644 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
1a00176c:	f105 0016 	add.w	r0, r5, #22
1a001770:	490b      	ldr	r1, [pc, #44]	; (1a0017a0 <f_sync+0x98>)
1a001772:	f7fe ff67 	bl	1a000644 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
1a001776:	f105 0012 	add.w	r0, r5, #18
1a00177a:	2100      	movs	r1, #0
1a00177c:	f7fe ff5e 	bl	1a00063c <st_word>
					fs->wflag = 1;
1a001780:	2201      	movs	r2, #1
1a001782:	9b01      	ldr	r3, [sp, #4]
1a001784:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
1a001786:	9801      	ldr	r0, [sp, #4]
1a001788:	f7ff fd8a 	bl	1a0012a0 <sync_fs>
1a00178c:	4603      	mov	r3, r0
					fp->flag &= ~FA_MODIFIED;
1a00178e:	7c22      	ldrb	r2, [r4, #16]
1a001790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a001794:	7422      	strb	r2, [r4, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
1a001796:	4618      	mov	r0, r3
1a001798:	e000      	b.n	1a00179c <f_sync+0x94>
	res = validate(fp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a00179a:	2001      	movs	r0, #1
			}
		}
	}

	LEAVE_FF(fs, res);
}
1a00179c:	b003      	add	sp, #12
1a00179e:	bd30      	pop	{r4, r5, pc}
1a0017a0:	48210000 	.word	0x48210000

1a0017a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
1a0017a4:	b510      	push	{r4, lr}
1a0017a6:	b082      	sub	sp, #8
1a0017a8:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
1a0017aa:	f7ff ffad 	bl	1a001708 <f_sync>
	if (res == FR_OK)
1a0017ae:	4603      	mov	r3, r0
1a0017b0:	b938      	cbnz	r0, 1a0017c2 <f_close+0x1e>
#endif
	{
		res = validate(fp, &fs);	/* Lock volume */
1a0017b2:	4620      	mov	r0, r4
1a0017b4:	a901      	add	r1, sp, #4
1a0017b6:	f7ff f83b 	bl	1a000830 <validate>
		if (res == FR_OK) {
1a0017ba:	4603      	mov	r3, r0
1a0017bc:	b908      	cbnz	r0, 1a0017c2 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
1a0017be:	2200      	movs	r2, #0
1a0017c0:	6022      	str	r2, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
1a0017c2:	4618      	mov	r0, r3
1a0017c4:	b002      	add	sp, #8
1a0017c6:	bd10      	pop	{r4, pc}

1a0017c8 <chk_power>:

static
int chk_power(void)		/* Socket power state: 0=off, 1=on */
{
	return 1;
}
1a0017c8:	2001      	movs	r0, #1
1a0017ca:	4770      	bx	lr

1a0017cc <SSPSend>:

static
BYTE CardType;			/* Card type flags */

static void SSPSend(uint8_t *buf, uint32_t Length)
{
1a0017cc:	b500      	push	{lr}
1a0017ce:	b087      	sub	sp, #28
    Chip_SSP_DATA_SETUP_T xferConfig;

	xferConfig.tx_data = buf;
1a0017d0:	9001      	str	r0, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a0017d2:	2300      	movs	r3, #0
1a0017d4:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = NULL;
1a0017d6:	9303      	str	r3, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a0017d8:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a0017da:	9105      	str	r1, [sp, #20]

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a0017dc:	4803      	ldr	r0, [pc, #12]	; (1a0017ec <SSPSend+0x20>)
1a0017de:	a901      	add	r1, sp, #4
1a0017e0:	f002 f804 	bl	1a0037ec <Chip_SSP_RWFrames_Blocking>
}
1a0017e4:	b007      	add	sp, #28
1a0017e6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0017ea:	bf00      	nop
1a0017ec:	400c5000 	.word	0x400c5000

1a0017f0 <xmit_spi>:
/* Transmit a byte to MMC via SPI  (Platform dependent)                  */
/*-----------------------------------------------------------------------*/

//#define xmit_spi(dat) (SSPSend((uint8_t*)&(dat), 1))
static void xmit_spi(BYTE dat)
{
1a0017f0:	b500      	push	{lr}
1a0017f2:	b083      	sub	sp, #12
1a0017f4:	ab02      	add	r3, sp, #8
1a0017f6:	f803 0d01 	strb.w	r0, [r3, #-1]!
    SSPSend((uint8_t*) &dat, 1);
1a0017fa:	4618      	mov	r0, r3
1a0017fc:	2101      	movs	r1, #1
1a0017fe:	f7ff ffe5 	bl	1a0017cc <SSPSend>
}
1a001802:	b003      	add	sp, #12
1a001804:	f85d fb04 	ldr.w	pc, [sp], #4

1a001808 <SSPReceive>:

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
}

void SSPReceive( uint8_t *buf, uint32_t Length )
{
1a001808:	b500      	push	{lr}
1a00180a:	b087      	sub	sp, #28
    Chip_SSP_DATA_SETUP_T xferConfig;

	xferConfig.tx_data = NULL;
1a00180c:	2300      	movs	r3, #0
1a00180e:	9301      	str	r3, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a001810:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = buf;
1a001812:	9003      	str	r0, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a001814:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a001816:	9105      	str	r1, [sp, #20]

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a001818:	4803      	ldr	r0, [pc, #12]	; (1a001828 <SSPReceive+0x20>)
1a00181a:	a901      	add	r1, sp, #4
1a00181c:	f001 ffe6 	bl	1a0037ec <Chip_SSP_RWFrames_Blocking>
}
1a001820:	b007      	add	sp, #28
1a001822:	f85d fb04 	ldr.w	pc, [sp], #4
1a001826:	bf00      	nop
1a001828:	400c5000 	.word	0x400c5000

1a00182c <rcvr_spi>:
/* Receive a byte from MMC via SPI  (Platform dependent)                 */
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
1a00182c:	b500      	push	{lr}
1a00182e:	b083      	sub	sp, #12
    BYTE data = 0;
1a001830:	a802      	add	r0, sp, #8
1a001832:	2300      	movs	r3, #0
1a001834:	f800 3d01 	strb.w	r3, [r0, #-1]!

    SSPReceive(&data, 1);
1a001838:	2101      	movs	r1, #1
1a00183a:	f7ff ffe5 	bl	1a001808 <SSPReceive>

    return data;
}
1a00183e:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a001842:	b003      	add	sp, #12
1a001844:	f85d fb04 	ldr.w	pc, [sp], #4

1a001848 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
BYTE wait_ready (void)
{
1a001848:	b508      	push	{r3, lr}
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
1a00184a:	2232      	movs	r2, #50	; 0x32
1a00184c:	4b06      	ldr	r3, [pc, #24]	; (1a001868 <wait_ready+0x20>)
1a00184e:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
1a001850:	f7ff ffec 	bl	1a00182c <rcvr_spi>
	do
		res = rcvr_spi();
1a001854:	f7ff ffea 	bl	1a00182c <rcvr_spi>
	while ((res != 0xFF) && Timer2);
1a001858:	28ff      	cmp	r0, #255	; 0xff
1a00185a:	d004      	beq.n	1a001866 <wait_ready+0x1e>
1a00185c:	4b02      	ldr	r3, [pc, #8]	; (1a001868 <wait_ready+0x20>)
1a00185e:	781b      	ldrb	r3, [r3, #0]
1a001860:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001864:	d1f6      	bne.n	1a001854 <wait_ready+0xc>

	return res;
}
1a001866:	bd08      	pop	{r3, pc}
1a001868:	10000559 	.word	0x10000559

1a00186c <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
1a00186c:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->SET[port] = (1 << pin);
1a00186e:	2101      	movs	r1, #1
1a001870:	f242 230c 	movw	r3, #8716	; 0x220c
1a001874:	4a02      	ldr	r2, [pc, #8]	; (1a001880 <deselect+0x14>)
1a001876:	50d1      	str	r1, [r2, r3]
	CS_HIGH();
	rcvr_spi();
1a001878:	f7ff ffd8 	bl	1a00182c <rcvr_spi>
1a00187c:	bd08      	pop	{r3, pc}
1a00187e:	bf00      	nop
1a001880:	400f4000 	.word	0x400f4000

1a001884 <select_>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select_ (void)	/* TRUE:Successful, FALSE:Timeout */
{
1a001884:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a001886:	2101      	movs	r1, #1
1a001888:	f242 238c 	movw	r3, #8844	; 0x228c
1a00188c:	4a05      	ldr	r2, [pc, #20]	; (1a0018a4 <select_+0x20>)
1a00188e:	50d1      	str	r1, [r2, r3]
	CS_LOW();
	if (wait_ready() != 0xFF) {
1a001890:	f7ff ffda 	bl	1a001848 <wait_ready>
1a001894:	28ff      	cmp	r0, #255	; 0xff
1a001896:	d003      	beq.n	1a0018a0 <select_+0x1c>
		deselect();
1a001898:	f7ff ffe8 	bl	1a00186c <deselect>
		return FALSE;
1a00189c:	2000      	movs	r0, #0
1a00189e:	bd08      	pop	{r3, pc}
	}
	return TRUE;
1a0018a0:	2001      	movs	r0, #1
}
1a0018a2:	bd08      	pop	{r3, pc}
1a0018a4:	400f4000 	.word	0x400f4000

1a0018a8 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
1a0018a8:	b538      	push	{r3, r4, r5, lr}
1a0018aa:	4604      	mov	r4, r0
1a0018ac:	460d      	mov	r5, r1
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
1a0018ae:	f010 0f80 	tst.w	r0, #128	; 0x80
1a0018b2:	d007      	beq.n	1a0018c4 <send_cmd+0x1c>
		cmd &= 0x7F;
1a0018b4:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
1a0018b8:	2077      	movs	r0, #119	; 0x77
1a0018ba:	2100      	movs	r1, #0
1a0018bc:	f7ff fff4 	bl	1a0018a8 <send_cmd>
		if (res > 1) return res;
1a0018c0:	2801      	cmp	r0, #1
1a0018c2:	d82f      	bhi.n	1a001924 <send_cmd+0x7c>
	}

	/* Select the card and wait for ready */
	deselect();
1a0018c4:	f7ff ffd2 	bl	1a00186c <deselect>
	if (!select_()) return 0xFF;
1a0018c8:	f7ff ffdc 	bl	1a001884 <select_>
1a0018cc:	b348      	cbz	r0, 1a001922 <send_cmd+0x7a>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
1a0018ce:	4620      	mov	r0, r4
1a0018d0:	f7ff ff8e 	bl	1a0017f0 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
1a0018d4:	0e28      	lsrs	r0, r5, #24
1a0018d6:	f7ff ff8b 	bl	1a0017f0 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
1a0018da:	f3c5 4007 	ubfx	r0, r5, #16, #8
1a0018de:	f7ff ff87 	bl	1a0017f0 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
1a0018e2:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a0018e6:	f7ff ff83 	bl	1a0017f0 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
1a0018ea:	b2e8      	uxtb	r0, r5
1a0018ec:	f7ff ff80 	bl	1a0017f0 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0_) n = 0x95;			/* Valid CRC for CMD0_(0) */
1a0018f0:	2c40      	cmp	r4, #64	; 0x40
1a0018f2:	d001      	beq.n	1a0018f8 <send_cmd+0x50>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
1a0018f4:	2001      	movs	r0, #1
1a0018f6:	e000      	b.n	1a0018fa <send_cmd+0x52>
	if (cmd == CMD0_) n = 0x95;			/* Valid CRC for CMD0_(0) */
1a0018f8:	2095      	movs	r0, #149	; 0x95
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
1a0018fa:	2c48      	cmp	r4, #72	; 0x48
1a0018fc:	d100      	bne.n	1a001900 <send_cmd+0x58>
1a0018fe:	2087      	movs	r0, #135	; 0x87
	xmit_spi(n);
1a001900:	f7ff ff76 	bl	1a0017f0 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
1a001904:	2c4c      	cmp	r4, #76	; 0x4c
1a001906:	d101      	bne.n	1a00190c <send_cmd+0x64>
1a001908:	f7ff ff90 	bl	1a00182c <rcvr_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0_) n = 0x95;			/* Valid CRC for CMD0_(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
1a00190c:	240a      	movs	r4, #10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
1a00190e:	f7ff ff8d 	bl	1a00182c <rcvr_spi>
	while ((res & 0x80) && --n);
1a001912:	f010 0f80 	tst.w	r0, #128	; 0x80
1a001916:	d005      	beq.n	1a001924 <send_cmd+0x7c>
1a001918:	1e63      	subs	r3, r4, #1
1a00191a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a00191e:	d1f6      	bne.n	1a00190e <send_cmd+0x66>

	return res;			/* Return with the response value */
1a001920:	bd38      	pop	{r3, r4, r5, pc}
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select_()) return 0xFF;
1a001922:	20ff      	movs	r0, #255	; 0xff
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
1a001924:	bd38      	pop	{r3, r4, r5, pc}
1a001926:	bf00      	nop

1a001928 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
1a001928:	b570      	push	{r4, r5, r6, lr}
1a00192a:	4606      	mov	r6, r0
1a00192c:	460c      	mov	r4, r1
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
1a00192e:	f7ff ff8b 	bl	1a001848 <wait_ready>
1a001932:	28ff      	cmp	r0, #255	; 0xff
1a001934:	d120      	bne.n	1a001978 <xmit_datablock+0x50>

	xmit_spi(token);					/* Xmit data token */
1a001936:	4620      	mov	r0, r4
1a001938:	f7ff ff5a 	bl	1a0017f0 <xmit_spi>
	if (token != 0xFD) {	/* Is data token */
1a00193c:	2cfd      	cmp	r4, #253	; 0xfd
1a00193e:	d01d      	beq.n	1a00197c <xmit_datablock+0x54>
1a001940:	2400      	movs	r4, #0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
1a001942:	4635      	mov	r5, r6
1a001944:	f815 0b02 	ldrb.w	r0, [r5], #2
1a001948:	f7ff ff52 	bl	1a0017f0 <xmit_spi>
			xmit_spi(*buff++);
1a00194c:	7870      	ldrb	r0, [r6, #1]
1a00194e:	f7ff ff4f 	bl	1a0017f0 <xmit_spi>
		} while (--wc);
1a001952:	1e63      	subs	r3, r4, #1
	xmit_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
1a001954:	462e      	mov	r6, r5
		} while (--wc);
1a001956:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a00195a:	d1f2      	bne.n	1a001942 <xmit_datablock+0x1a>
		xmit_spi(0xFF);					/* CRC (Dummy) */
1a00195c:	20ff      	movs	r0, #255	; 0xff
1a00195e:	f7ff ff47 	bl	1a0017f0 <xmit_spi>
		xmit_spi(0xFF);
1a001962:	20ff      	movs	r0, #255	; 0xff
1a001964:	f7ff ff44 	bl	1a0017f0 <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
1a001968:	f7ff ff60 	bl	1a00182c <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
1a00196c:	f000 001f 	and.w	r0, r0, #31
1a001970:	2805      	cmp	r0, #5
1a001972:	d005      	beq.n	1a001980 <xmit_datablock+0x58>
			return FALSE;
1a001974:	2000      	movs	r0, #0
1a001976:	bd70      	pop	{r4, r5, r6, pc}
)
{
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
1a001978:	2000      	movs	r0, #0
1a00197a:	bd70      	pop	{r4, r5, r6, pc}
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
1a00197c:	2001      	movs	r0, #1
1a00197e:	bd70      	pop	{r4, r5, r6, pc}
1a001980:	2001      	movs	r0, #1
}
1a001982:	bd70      	pop	{r4, r5, r6, pc}

1a001984 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
1a001984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001986:	4604      	mov	r4, r0
1a001988:	460e      	mov	r6, r1
	BYTE token;


	Timer1 = 20;
1a00198a:	2214      	movs	r2, #20
1a00198c:	4b15      	ldr	r3, [pc, #84]	; (1a0019e4 <rcvr_datablock+0x60>)
1a00198e:	701a      	strb	r2, [r3, #0]
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
1a001990:	f7ff ff4c 	bl	1a00182c <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
1a001994:	28ff      	cmp	r0, #255	; 0xff
1a001996:	d104      	bne.n	1a0019a2 <rcvr_datablock+0x1e>
1a001998:	4b12      	ldr	r3, [pc, #72]	; (1a0019e4 <rcvr_datablock+0x60>)
1a00199a:	781b      	ldrb	r3, [r3, #0]
1a00199c:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0019a0:	d1f6      	bne.n	1a001990 <rcvr_datablock+0xc>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
1a0019a2:	28fe      	cmp	r0, #254	; 0xfe
1a0019a4:	d11b      	bne.n	1a0019de <rcvr_datablock+0x5a>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
1a0019a6:	1c65      	adds	r5, r4, #1
1a0019a8:	4620      	mov	r0, r4
1a0019aa:	2101      	movs	r1, #1
1a0019ac:	f7ff ff2c 	bl	1a001808 <SSPReceive>
		rcvr_spi_m(buff++);
1a0019b0:	1ca7      	adds	r7, r4, #2
1a0019b2:	4628      	mov	r0, r5
1a0019b4:	2101      	movs	r1, #1
1a0019b6:	f7ff ff27 	bl	1a001808 <SSPReceive>
		rcvr_spi_m(buff++);
1a0019ba:	1ce5      	adds	r5, r4, #3
1a0019bc:	4638      	mov	r0, r7
1a0019be:	2101      	movs	r1, #1
1a0019c0:	f7ff ff22 	bl	1a001808 <SSPReceive>
		rcvr_spi_m(buff++);
1a0019c4:	4628      	mov	r0, r5
1a0019c6:	3404      	adds	r4, #4
1a0019c8:	2101      	movs	r1, #1
1a0019ca:	f7ff ff1d 	bl	1a001808 <SSPReceive>
	} while (btr -= 4);
1a0019ce:	3e04      	subs	r6, #4
1a0019d0:	d1e9      	bne.n	1a0019a6 <rcvr_datablock+0x22>
	rcvr_spi();						/* Discard CRC */
1a0019d2:	f7ff ff2b 	bl	1a00182c <rcvr_spi>
	rcvr_spi();
1a0019d6:	f7ff ff29 	bl	1a00182c <rcvr_spi>

	return TRUE;					/* Return with success */
1a0019da:	2001      	movs	r0, #1
1a0019dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
1a0019de:	2000      	movs	r0, #0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
}
1a0019e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0019e2:	bf00      	nop
1a0019e4:	10000558 	.word	0x10000558

1a0019e8 <disk_initialize>:
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
1a0019e8:	2800      	cmp	r0, #0
1a0019ea:	f040 809e 	bne.w	1a001b2a <disk_initialize+0x142>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
1a0019ee:	4b51      	ldr	r3, [pc, #324]	; (1a001b34 <disk_initialize+0x14c>)
1a0019f0:	781b      	ldrb	r3, [r3, #0]
1a0019f2:	f013 0f02 	tst.w	r3, #2
1a0019f6:	d008      	beq.n	1a001a0a <disk_initialize+0x22>
1a0019f8:	4b4e      	ldr	r3, [pc, #312]	; (1a001b34 <disk_initialize+0x14c>)
1a0019fa:	7818      	ldrb	r0, [r3, #0]
1a0019fc:	b2c0      	uxtb	r0, r0
1a0019fe:	4770      	bx	lr

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
1a001a00:	f7ff ff14 	bl	1a00182c <rcvr_spi>
1a001a04:	3c01      	subs	r4, #1
1a001a06:	b2e4      	uxtb	r4, r4
1a001a08:	e002      	b.n	1a001a10 <disk_initialize+0x28>
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
1a001a0a:	b530      	push	{r4, r5, lr}
1a001a0c:	b083      	sub	sp, #12
1a001a0e:	240a      	movs	r4, #10
	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
1a001a10:	2c00      	cmp	r4, #0
1a001a12:	d1f5      	bne.n	1a001a00 <disk_initialize+0x18>

	ty = 0;
	if (send_cmd(CMD0_, 0) == 1) {			/* Enter Idle state */
1a001a14:	2040      	movs	r0, #64	; 0x40
1a001a16:	2100      	movs	r1, #0
1a001a18:	f7ff ff46 	bl	1a0018a8 <send_cmd>
1a001a1c:	2801      	cmp	r0, #1
1a001a1e:	d16b      	bne.n	1a001af8 <disk_initialize+0x110>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
1a001a20:	2264      	movs	r2, #100	; 0x64
1a001a22:	4b45      	ldr	r3, [pc, #276]	; (1a001b38 <disk_initialize+0x150>)
1a001a24:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
1a001a26:	2048      	movs	r0, #72	; 0x48
1a001a28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
1a001a2c:	f7ff ff3c 	bl	1a0018a8 <send_cmd>
1a001a30:	2801      	cmp	r0, #1
1a001a32:	d13f      	bne.n	1a001ab4 <disk_initialize+0xcc>
1a001a34:	e008      	b.n	1a001a48 <disk_initialize+0x60>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
1a001a36:	f7ff fef9 	bl	1a00182c <rcvr_spi>
1a001a3a:	ab02      	add	r3, sp, #8
1a001a3c:	442b      	add	r3, r5
1a001a3e:	f803 0c04 	strb.w	r0, [r3, #-4]
1a001a42:	3501      	adds	r5, #1
1a001a44:	b2ed      	uxtb	r5, r5
1a001a46:	e000      	b.n	1a001a4a <disk_initialize+0x62>
1a001a48:	4625      	mov	r5, r4
1a001a4a:	2d03      	cmp	r5, #3
1a001a4c:	d9f3      	bls.n	1a001a36 <disk_initialize+0x4e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
1a001a4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a001a52:	2b01      	cmp	r3, #1
1a001a54:	d152      	bne.n	1a001afc <disk_initialize+0x114>
1a001a56:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a001a5a:	2baa      	cmp	r3, #170	; 0xaa
1a001a5c:	d150      	bne.n	1a001b00 <disk_initialize+0x118>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
1a001a5e:	4b36      	ldr	r3, [pc, #216]	; (1a001b38 <disk_initialize+0x150>)
1a001a60:	781b      	ldrb	r3, [r3, #0]
1a001a62:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001a66:	d006      	beq.n	1a001a76 <disk_initialize+0x8e>
1a001a68:	20e9      	movs	r0, #233	; 0xe9
1a001a6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a001a6e:	f7ff ff1b 	bl	1a0018a8 <send_cmd>
1a001a72:	2800      	cmp	r0, #0
1a001a74:	d1f3      	bne.n	1a001a5e <disk_initialize+0x76>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
1a001a76:	4b30      	ldr	r3, [pc, #192]	; (1a001b38 <disk_initialize+0x150>)
1a001a78:	781b      	ldrb	r3, [r3, #0]
1a001a7a:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001a7e:	d041      	beq.n	1a001b04 <disk_initialize+0x11c>
1a001a80:	207a      	movs	r0, #122	; 0x7a
1a001a82:	2100      	movs	r1, #0
1a001a84:	f7ff ff10 	bl	1a0018a8 <send_cmd>
1a001a88:	b148      	cbz	r0, 1a001a9e <disk_initialize+0xb6>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */

	ty = 0;
1a001a8a:	2400      	movs	r4, #0
1a001a8c:	e03f      	b.n	1a001b0e <disk_initialize+0x126>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
1a001a8e:	f7ff fecd 	bl	1a00182c <rcvr_spi>
1a001a92:	ab02      	add	r3, sp, #8
1a001a94:	4423      	add	r3, r4
1a001a96:	f803 0c04 	strb.w	r0, [r3, #-4]
1a001a9a:	3401      	adds	r4, #1
1a001a9c:	b2e4      	uxtb	r4, r4
1a001a9e:	2c03      	cmp	r4, #3
1a001aa0:	d9f5      	bls.n	1a001a8e <disk_initialize+0xa6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a001aa2:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a001aa6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001aaa:	d001      	beq.n	1a001ab0 <disk_initialize+0xc8>
1a001aac:	240c      	movs	r4, #12
1a001aae:	e02e      	b.n	1a001b0e <disk_initialize+0x126>
1a001ab0:	2404      	movs	r4, #4
1a001ab2:	e02c      	b.n	1a001b0e <disk_initialize+0x126>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
1a001ab4:	20e9      	movs	r0, #233	; 0xe9
1a001ab6:	2100      	movs	r1, #0
1a001ab8:	f7ff fef6 	bl	1a0018a8 <send_cmd>
1a001abc:	2801      	cmp	r0, #1
1a001abe:	d802      	bhi.n	1a001ac6 <disk_initialize+0xde>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
1a001ac0:	2402      	movs	r4, #2
1a001ac2:	25e9      	movs	r5, #233	; 0xe9
1a001ac4:	e001      	b.n	1a001aca <disk_initialize+0xe2>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
1a001ac6:	2401      	movs	r4, #1
1a001ac8:	2541      	movs	r5, #65	; 0x41
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
1a001aca:	4b1b      	ldr	r3, [pc, #108]	; (1a001b38 <disk_initialize+0x150>)
1a001acc:	781b      	ldrb	r3, [r3, #0]
1a001ace:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001ad2:	d005      	beq.n	1a001ae0 <disk_initialize+0xf8>
1a001ad4:	4628      	mov	r0, r5
1a001ad6:	2100      	movs	r1, #0
1a001ad8:	f7ff fee6 	bl	1a0018a8 <send_cmd>
1a001adc:	2800      	cmp	r0, #0
1a001ade:	d1f4      	bne.n	1a001aca <disk_initialize+0xe2>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
1a001ae0:	4b15      	ldr	r3, [pc, #84]	; (1a001b38 <disk_initialize+0x150>)
1a001ae2:	781b      	ldrb	r3, [r3, #0]
1a001ae4:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001ae8:	d00e      	beq.n	1a001b08 <disk_initialize+0x120>
1a001aea:	2050      	movs	r0, #80	; 0x50
1a001aec:	f44f 7100 	mov.w	r1, #512	; 0x200
1a001af0:	f7ff feda 	bl	1a0018a8 <send_cmd>
1a001af4:	b950      	cbnz	r0, 1a001b0c <disk_initialize+0x124>
1a001af6:	e00a      	b.n	1a001b0e <disk_initialize+0x126>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */

	ty = 0;
1a001af8:	2400      	movs	r4, #0
1a001afa:	e008      	b.n	1a001b0e <disk_initialize+0x126>
1a001afc:	2400      	movs	r4, #0
1a001afe:	e006      	b.n	1a001b0e <disk_initialize+0x126>
1a001b00:	2400      	movs	r4, #0
1a001b02:	e004      	b.n	1a001b0e <disk_initialize+0x126>
1a001b04:	2400      	movs	r4, #0
1a001b06:	e002      	b.n	1a001b0e <disk_initialize+0x126>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
1a001b08:	2400      	movs	r4, #0
1a001b0a:	e000      	b.n	1a001b0e <disk_initialize+0x126>
1a001b0c:	2400      	movs	r4, #0
		}
	}
	CardType = ty;
1a001b0e:	4b0b      	ldr	r3, [pc, #44]	; (1a001b3c <disk_initialize+0x154>)
1a001b10:	701c      	strb	r4, [r3, #0]
	deselect();
1a001b12:	f7ff feab 	bl	1a00186c <deselect>

	if (ty) {			/* Initialization succeded */
1a001b16:	b124      	cbz	r4, 1a001b22 <disk_initialize+0x13a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
1a001b18:	4a06      	ldr	r2, [pc, #24]	; (1a001b34 <disk_initialize+0x14c>)
1a001b1a:	7813      	ldrb	r3, [r2, #0]
1a001b1c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
1a001b20:	7013      	strb	r3, [r2, #0]
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
1a001b22:	4b04      	ldr	r3, [pc, #16]	; (1a001b34 <disk_initialize+0x14c>)
1a001b24:	7818      	ldrb	r0, [r3, #0]
1a001b26:	b2c0      	uxtb	r0, r0
1a001b28:	e001      	b.n	1a001b2e <disk_initialize+0x146>
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
1a001b2a:	2001      	movs	r0, #1
1a001b2c:	4770      	bx	lr
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
1a001b2e:	b003      	add	sp, #12
1a001b30:	bd30      	pop	{r4, r5, pc}
1a001b32:	bf00      	nop
1a001b34:	10000000 	.word	0x10000000
1a001b38:	10000558 	.word	0x10000558
1a001b3c:	1000055a 	.word	0x1000055a

1a001b40 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
1a001b40:	b918      	cbnz	r0, 1a001b4a <disk_status+0xa>
	return Stat;
1a001b42:	4b03      	ldr	r3, [pc, #12]	; (1a001b50 <disk_status+0x10>)
1a001b44:	7818      	ldrb	r0, [r3, #0]
1a001b46:	b2c0      	uxtb	r0, r0
1a001b48:	4770      	bx	lr

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
1a001b4a:	2001      	movs	r0, #1
	return Stat;
}
1a001b4c:	4770      	bx	lr
1a001b4e:	bf00      	nop
1a001b50:	10000000 	.word	0x10000000

1a001b54 <disk_read>:
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001b54:	bbb8      	cbnz	r0, 1a001bc6 <disk_read+0x72>
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
1a001b56:	b538      	push	{r3, r4, r5, lr}
1a001b58:	460d      	mov	r5, r1
1a001b5a:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;
1a001b5c:	b3ab      	cbz	r3, 1a001bca <disk_read+0x76>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001b5e:	4b1d      	ldr	r3, [pc, #116]	; (1a001bd4 <disk_read+0x80>)
1a001b60:	781b      	ldrb	r3, [r3, #0]
1a001b62:	f013 0f01 	tst.w	r3, #1
1a001b66:	d132      	bne.n	1a001bce <disk_read+0x7a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a001b68:	4b1b      	ldr	r3, [pc, #108]	; (1a001bd8 <disk_read+0x84>)
1a001b6a:	781b      	ldrb	r3, [r3, #0]
1a001b6c:	f013 0f08 	tst.w	r3, #8
1a001b70:	d100      	bne.n	1a001b74 <disk_read+0x20>
1a001b72:	0252      	lsls	r2, r2, #9

	if (count == 1) {	/* Single block read */
1a001b74:	2c01      	cmp	r4, #1
1a001b76:	d10b      	bne.n	1a001b90 <disk_read+0x3c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
1a001b78:	2051      	movs	r0, #81	; 0x51
1a001b7a:	4611      	mov	r1, r2
1a001b7c:	f7ff fe94 	bl	1a0018a8 <send_cmd>
1a001b80:	b9d8      	cbnz	r0, 1a001bba <disk_read+0x66>
			&& rcvr_datablock(buff, 512))
1a001b82:	4628      	mov	r0, r5
1a001b84:	f44f 7100 	mov.w	r1, #512	; 0x200
1a001b88:	f7ff fefc 	bl	1a001984 <rcvr_datablock>
1a001b8c:	b9a0      	cbnz	r0, 1a001bb8 <disk_read+0x64>
1a001b8e:	e014      	b.n	1a001bba <disk_read+0x66>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
1a001b90:	2052      	movs	r0, #82	; 0x52
1a001b92:	4611      	mov	r1, r2
1a001b94:	f7ff fe88 	bl	1a0018a8 <send_cmd>
1a001b98:	b978      	cbnz	r0, 1a001bba <disk_read+0x66>
			do {
				if (!rcvr_datablock(buff, 512)) break;
1a001b9a:	4628      	mov	r0, r5
1a001b9c:	f44f 7100 	mov.w	r1, #512	; 0x200
1a001ba0:	f7ff fef0 	bl	1a001984 <rcvr_datablock>
1a001ba4:	b118      	cbz	r0, 1a001bae <disk_read+0x5a>
				buff += 512;
1a001ba6:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
1a001baa:	3c01      	subs	r4, #1
1a001bac:	d1f5      	bne.n	1a001b9a <disk_read+0x46>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
1a001bae:	204c      	movs	r0, #76	; 0x4c
1a001bb0:	2100      	movs	r1, #0
1a001bb2:	f7ff fe79 	bl	1a0018a8 <send_cmd>
1a001bb6:	e000      	b.n	1a001bba <disk_read+0x66>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
1a001bb8:	2400      	movs	r4, #0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
1a001bba:	f7ff fe57 	bl	1a00186c <deselect>

	return count ? RES_ERROR : RES_OK;
1a001bbe:	1c20      	adds	r0, r4, #0
1a001bc0:	bf18      	it	ne
1a001bc2:	2001      	movne	r0, #1
1a001bc4:	bd38      	pop	{r3, r4, r5, pc}
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001bc6:	2004      	movs	r0, #4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a001bc8:	4770      	bx	lr
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001bca:	2004      	movs	r0, #4
1a001bcc:	bd38      	pop	{r3, r4, r5, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001bce:	2003      	movs	r0, #3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a001bd0:	bd38      	pop	{r3, r4, r5, pc}
1a001bd2:	bf00      	nop
1a001bd4:	10000000 	.word	0x10000000
1a001bd8:	1000055a 	.word	0x1000055a

1a001bdc <disk_write>:
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001bdc:	2800      	cmp	r0, #0
1a001bde:	d146      	bne.n	1a001c6e <disk_write+0x92>
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
1a001be0:	b570      	push	{r4, r5, r6, lr}
1a001be2:	460d      	mov	r5, r1
1a001be4:	4616      	mov	r6, r2
1a001be6:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;
1a001be8:	2b00      	cmp	r3, #0
1a001bea:	d042      	beq.n	1a001c72 <disk_write+0x96>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001bec:	4b24      	ldr	r3, [pc, #144]	; (1a001c80 <disk_write+0xa4>)
1a001bee:	781b      	ldrb	r3, [r3, #0]
1a001bf0:	f013 0f01 	tst.w	r3, #1
1a001bf4:	d13f      	bne.n	1a001c76 <disk_write+0x9a>
	if (Stat & STA_PROTECT) return RES_WRPRT;
1a001bf6:	4b22      	ldr	r3, [pc, #136]	; (1a001c80 <disk_write+0xa4>)
1a001bf8:	781b      	ldrb	r3, [r3, #0]
1a001bfa:	f013 0f04 	tst.w	r3, #4
1a001bfe:	d13c      	bne.n	1a001c7a <disk_write+0x9e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a001c00:	4b20      	ldr	r3, [pc, #128]	; (1a001c84 <disk_write+0xa8>)
1a001c02:	781b      	ldrb	r3, [r3, #0]
1a001c04:	f013 0f08 	tst.w	r3, #8
1a001c08:	d100      	bne.n	1a001c0c <disk_write+0x30>
1a001c0a:	0256      	lsls	r6, r2, #9

	if (count == 1) {	/* Single block write */
1a001c0c:	2c01      	cmp	r4, #1
1a001c0e:	d10a      	bne.n	1a001c26 <disk_write+0x4a>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
1a001c10:	2058      	movs	r0, #88	; 0x58
1a001c12:	4631      	mov	r1, r6
1a001c14:	f7ff fe48 	bl	1a0018a8 <send_cmd>
1a001c18:	bb18      	cbnz	r0, 1a001c62 <disk_write+0x86>
			&& xmit_datablock(buff, 0xFE))
1a001c1a:	4628      	mov	r0, r5
1a001c1c:	21fe      	movs	r1, #254	; 0xfe
1a001c1e:	f7ff fe83 	bl	1a001928 <xmit_datablock>
1a001c22:	b9d8      	cbnz	r0, 1a001c5c <disk_write+0x80>
1a001c24:	e01d      	b.n	1a001c62 <disk_write+0x86>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a001c26:	f013 0f06 	tst.w	r3, #6
1a001c2a:	d003      	beq.n	1a001c34 <disk_write+0x58>
1a001c2c:	20d7      	movs	r0, #215	; 0xd7
1a001c2e:	4621      	mov	r1, r4
1a001c30:	f7ff fe3a 	bl	1a0018a8 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
1a001c34:	2059      	movs	r0, #89	; 0x59
1a001c36:	4631      	mov	r1, r6
1a001c38:	f7ff fe36 	bl	1a0018a8 <send_cmd>
1a001c3c:	b988      	cbnz	r0, 1a001c62 <disk_write+0x86>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
1a001c3e:	4628      	mov	r0, r5
1a001c40:	21fc      	movs	r1, #252	; 0xfc
1a001c42:	f7ff fe71 	bl	1a001928 <xmit_datablock>
1a001c46:	b118      	cbz	r0, 1a001c50 <disk_write+0x74>
				buff += 512;
1a001c48:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
1a001c4c:	3c01      	subs	r4, #1
1a001c4e:	d1f6      	bne.n	1a001c3e <disk_write+0x62>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
1a001c50:	2000      	movs	r0, #0
1a001c52:	21fd      	movs	r1, #253	; 0xfd
1a001c54:	f7ff fe68 	bl	1a001928 <xmit_datablock>
1a001c58:	b110      	cbz	r0, 1a001c60 <disk_write+0x84>
1a001c5a:	e002      	b.n	1a001c62 <disk_write+0x86>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
1a001c5c:	2400      	movs	r4, #0
1a001c5e:	e000      	b.n	1a001c62 <disk_write+0x86>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
1a001c60:	2401      	movs	r4, #1
		}
	}
	deselect();
1a001c62:	f7ff fe03 	bl	1a00186c <deselect>

	return count ? RES_ERROR : RES_OK;
1a001c66:	1c20      	adds	r0, r4, #0
1a001c68:	bf18      	it	ne
1a001c6a:	2001      	movne	r0, #1
1a001c6c:	bd70      	pop	{r4, r5, r6, pc}
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001c6e:	2004      	movs	r0, #4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a001c70:	4770      	bx	lr
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001c72:	2004      	movs	r0, #4
1a001c74:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001c76:	2003      	movs	r0, #3
1a001c78:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_PROTECT) return RES_WRPRT;
1a001c7a:	2002      	movs	r0, #2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a001c7c:	bd70      	pop	{r4, r5, r6, pc}
1a001c7e:	bf00      	nop
1a001c80:	10000000 	.word	0x10000000
1a001c84:	1000055a 	.word	0x1000055a

1a001c88 <disk_ioctl>:
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
1a001c88:	2800      	cmp	r0, #0
1a001c8a:	f040 8136 	bne.w	1a001efa <disk_ioctl+0x272>
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
1a001c8e:	b570      	push	{r4, r5, r6, lr}
1a001c90:	b084      	sub	sp, #16
1a001c92:	4614      	mov	r4, r2

	if (drv) return RES_PARERR;

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
1a001c94:	2905      	cmp	r1, #5
1a001c96:	d10c      	bne.n	1a001cb2 <disk_ioctl+0x2a>
		switch (*ptr) {
1a001c98:	7813      	ldrb	r3, [r2, #0]
1a001c9a:	2b01      	cmp	r3, #1
1a001c9c:	f240 812a 	bls.w	1a001ef4 <disk_ioctl+0x26c>
1a001ca0:	2b02      	cmp	r3, #2
1a001ca2:	d001      	beq.n	1a001ca8 <disk_ioctl+0x20>
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
1a001ca4:	2404      	movs	r4, #4
1a001ca6:	e126      	b.n	1a001ef6 <disk_ioctl+0x26e>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
1a001ca8:	f7ff fd8e 	bl	1a0017c8 <chk_power>
1a001cac:	7060      	strb	r0, [r4, #1]
			res = RES_OK;
1a001cae:	2400      	movs	r4, #0
			break;
1a001cb0:	e121      	b.n	1a001ef6 <disk_ioctl+0x26e>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001cb2:	4b94      	ldr	r3, [pc, #592]	; (1a001f04 <disk_ioctl+0x27c>)
1a001cb4:	781b      	ldrb	r3, [r3, #0]
1a001cb6:	f013 0f01 	tst.w	r3, #1
1a001cba:	f040 8120 	bne.w	1a001efe <disk_ioctl+0x276>

		switch (ctrl) {
1a001cbe:	290e      	cmp	r1, #14
1a001cc0:	f200 80fc 	bhi.w	1a001ebc <disk_ioctl+0x234>
1a001cc4:	e8df f011 	tbh	[pc, r1, lsl #1]
1a001cc8:	0018000f 	.word	0x0018000f
1a001ccc:	0060005b 	.word	0x0060005b
1a001cd0:	00fa00fa 	.word	0x00fa00fa
1a001cd4:	00fa00fa 	.word	0x00fa00fa
1a001cd8:	00fa00fa 	.word	0x00fa00fa
1a001cdc:	00be00b9 	.word	0x00be00b9
1a001ce0:	00d800cc 	.word	0x00d800cc
1a001ce4:	00ec      	.short	0x00ec
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) {
1a001ce6:	f7ff fdcd 	bl	1a001884 <select_>
1a001cea:	2800      	cmp	r0, #0
1a001cec:	f000 80e8 	beq.w	1a001ec0 <disk_ioctl+0x238>
				res = RES_OK;
				deselect();
1a001cf0:	f7ff fdbc 	bl	1a00186c <deselect>
		if (Stat & STA_NOINIT) return RES_NOTRDY;

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) {
				res = RES_OK;
1a001cf4:	2400      	movs	r4, #0
1a001cf6:	e0fa      	b.n	1a001eee <disk_ioctl+0x266>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
1a001cf8:	2049      	movs	r0, #73	; 0x49
1a001cfa:	2100      	movs	r1, #0
1a001cfc:	f7ff fdd4 	bl	1a0018a8 <send_cmd>
1a001d00:	2800      	cmp	r0, #0
1a001d02:	f040 80df 	bne.w	1a001ec4 <disk_ioctl+0x23c>
1a001d06:	4668      	mov	r0, sp
1a001d08:	2110      	movs	r1, #16
1a001d0a:	f7ff fe3b 	bl	1a001984 <rcvr_datablock>
1a001d0e:	2800      	cmp	r0, #0
1a001d10:	f000 80da 	beq.w	1a001ec8 <disk_ioctl+0x240>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
1a001d14:	f89d 3000 	ldrb.w	r3, [sp]
1a001d18:	099b      	lsrs	r3, r3, #6
1a001d1a:	2b01      	cmp	r3, #1
1a001d1c:	d10b      	bne.n	1a001d36 <disk_ioctl+0xae>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
1a001d1e:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a001d22:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001d26:	eb03 2302 	add.w	r3, r3, r2, lsl #8
1a001d2a:	3301      	adds	r3, #1
1a001d2c:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << 10;
1a001d2e:	029b      	lsls	r3, r3, #10
1a001d30:	6023      	str	r3, [r4, #0]
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
1a001d32:	2400      	movs	r4, #0
1a001d34:	e0db      	b.n	1a001eee <disk_ioctl+0x266>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1a001d36:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a001d3a:	f89d 100a 	ldrb.w	r1, [sp, #10]
1a001d3e:	f89d 2009 	ldrb.w	r2, [sp, #9]
1a001d42:	f003 030f 	and.w	r3, r3, #15
1a001d46:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
1a001d4a:	f002 0203 	and.w	r2, r2, #3
1a001d4e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a001d52:	3202      	adds	r2, #2
1a001d54:	b2d2      	uxtb	r2, r2
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1a001d56:	f89d 0008 	ldrb.w	r0, [sp, #8]
1a001d5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a001d5e:	f89d 1006 	ldrb.w	r1, [sp, #6]
1a001d62:	009b      	lsls	r3, r3, #2
1a001d64:	eb03 1390 	add.w	r3, r3, r0, lsr #6
1a001d68:	f001 0103 	and.w	r1, r1, #3
1a001d6c:	eb03 2381 	add.w	r3, r3, r1, lsl #10
1a001d70:	3301      	adds	r3, #1
1a001d72:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << (n - 9);
1a001d74:	3a09      	subs	r2, #9
1a001d76:	4093      	lsls	r3, r2
1a001d78:	6023      	str	r3, [r4, #0]
				}
				res = RES_OK;
1a001d7a:	2400      	movs	r4, #0
1a001d7c:	e0b7      	b.n	1a001eee <disk_ioctl+0x266>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
1a001d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
1a001d82:	8013      	strh	r3, [r2, #0]
			res = RES_OK;
1a001d84:	2400      	movs	r4, #0
			break;
1a001d86:	e0b2      	b.n	1a001eee <disk_ioctl+0x266>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
1a001d88:	4b5f      	ldr	r3, [pc, #380]	; (1a001f08 <disk_ioctl+0x280>)
1a001d8a:	781b      	ldrb	r3, [r3, #0]
1a001d8c:	f013 0f04 	tst.w	r3, #4
1a001d90:	d01f      	beq.n	1a001dd2 <disk_ioctl+0x14a>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
1a001d92:	20cd      	movs	r0, #205	; 0xcd
1a001d94:	2100      	movs	r1, #0
1a001d96:	f7ff fd87 	bl	1a0018a8 <send_cmd>
1a001d9a:	2800      	cmp	r0, #0
1a001d9c:	f040 8096 	bne.w	1a001ecc <disk_ioctl+0x244>
					rcvr_spi();
1a001da0:	f7ff fd44 	bl	1a00182c <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
1a001da4:	4668      	mov	r0, sp
1a001da6:	2110      	movs	r1, #16
1a001da8:	f7ff fdec 	bl	1a001984 <rcvr_datablock>
1a001dac:	b930      	cbnz	r0, 1a001dbc <disk_ioctl+0x134>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001dae:	2401      	movs	r4, #1
1a001db0:	e09d      	b.n	1a001eee <disk_ioctl+0x266>
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
1a001db2:	f7ff fd3b 	bl	1a00182c <rcvr_spi>
1a001db6:	3d01      	subs	r5, #1
1a001db8:	b2ed      	uxtb	r5, r5
1a001dba:	e000      	b.n	1a001dbe <disk_ioctl+0x136>
1a001dbc:	2530      	movs	r5, #48	; 0x30
1a001dbe:	2d00      	cmp	r5, #0
1a001dc0:	d1f7      	bne.n	1a001db2 <disk_ioctl+0x12a>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
1a001dc2:	f89d 200a 	ldrb.w	r2, [sp, #10]
1a001dc6:	0912      	lsrs	r2, r2, #4
1a001dc8:	2310      	movs	r3, #16
1a001dca:	4093      	lsls	r3, r2
1a001dcc:	6023      	str	r3, [r4, #0]
						res = RES_OK;
1a001dce:	2400      	movs	r4, #0
1a001dd0:	e08d      	b.n	1a001eee <disk_ioctl+0x266>
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
1a001dd2:	2049      	movs	r0, #73	; 0x49
1a001dd4:	2100      	movs	r1, #0
1a001dd6:	f7ff fd67 	bl	1a0018a8 <send_cmd>
1a001dda:	2800      	cmp	r0, #0
1a001ddc:	d178      	bne.n	1a001ed0 <disk_ioctl+0x248>
1a001dde:	4668      	mov	r0, sp
1a001de0:	2110      	movs	r1, #16
1a001de2:	f7ff fdcf 	bl	1a001984 <rcvr_datablock>
1a001de6:	2800      	cmp	r0, #0
1a001de8:	d074      	beq.n	1a001ed4 <disk_ioctl+0x24c>
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
1a001dea:	4b47      	ldr	r3, [pc, #284]	; (1a001f08 <disk_ioctl+0x280>)
1a001dec:	781b      	ldrb	r3, [r3, #0]
1a001dee:	f013 0f02 	tst.w	r3, #2
1a001df2:	d011      	beq.n	1a001e18 <disk_ioctl+0x190>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
1a001df4:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a001df8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
1a001dfc:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001e00:	09db      	lsrs	r3, r3, #7
1a001e02:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a001e06:	3301      	adds	r3, #1
1a001e08:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001e0c:	0992      	lsrs	r2, r2, #6
1a001e0e:	3a01      	subs	r2, #1
1a001e10:	4093      	lsls	r3, r2
1a001e12:	6023      	str	r3, [r4, #0]
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
1a001e14:	2400      	movs	r4, #0
1a001e16:	e06a      	b.n	1a001eee <disk_ioctl+0x266>
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
1a001e18:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a001e1c:	f3c3 0184 	ubfx	r1, r3, #2, #5
1a001e20:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001e24:	f003 0003 	and.w	r0, r3, #3
1a001e28:	095a      	lsrs	r2, r3, #5
1a001e2a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
1a001e2e:	1c53      	adds	r3, r2, #1
1a001e30:	fb01 3303 	mla	r3, r1, r3, r3
1a001e34:	6023      	str	r3, [r4, #0]
					}
					res = RES_OK;
1a001e36:	2400      	movs	r4, #0
1a001e38:	e059      	b.n	1a001eee <disk_ioctl+0x266>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
1a001e3a:	4b33      	ldr	r3, [pc, #204]	; (1a001f08 <disk_ioctl+0x280>)
1a001e3c:	781b      	ldrb	r3, [r3, #0]
1a001e3e:	7013      	strb	r3, [r2, #0]
			res = RES_OK;
1a001e40:	2400      	movs	r4, #0
			break;
1a001e42:	e054      	b.n	1a001eee <disk_ioctl+0x266>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
1a001e44:	2049      	movs	r0, #73	; 0x49
1a001e46:	2100      	movs	r1, #0
1a001e48:	f7ff fd2e 	bl	1a0018a8 <send_cmd>
1a001e4c:	2800      	cmp	r0, #0
1a001e4e:	d143      	bne.n	1a001ed8 <disk_ioctl+0x250>
				&& rcvr_datablock(ptr, 16))
1a001e50:	4620      	mov	r0, r4
1a001e52:	2110      	movs	r1, #16
1a001e54:	f7ff fd96 	bl	1a001984 <rcvr_datablock>
1a001e58:	2800      	cmp	r0, #0
1a001e5a:	d13f      	bne.n	1a001edc <disk_ioctl+0x254>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001e5c:	2401      	movs	r4, #1
1a001e5e:	e046      	b.n	1a001eee <disk_ioctl+0x266>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
1a001e60:	204a      	movs	r0, #74	; 0x4a
1a001e62:	2100      	movs	r1, #0
1a001e64:	f7ff fd20 	bl	1a0018a8 <send_cmd>
1a001e68:	bbd0      	cbnz	r0, 1a001ee0 <disk_ioctl+0x258>
				&& rcvr_datablock(ptr, 16))
1a001e6a:	4620      	mov	r0, r4
1a001e6c:	2110      	movs	r1, #16
1a001e6e:	f7ff fd89 	bl	1a001984 <rcvr_datablock>
1a001e72:	bbb8      	cbnz	r0, 1a001ee4 <disk_ioctl+0x25c>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001e74:	2401      	movs	r4, #1
1a001e76:	e03a      	b.n	1a001eee <disk_ioctl+0x266>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
1a001e78:	207a      	movs	r0, #122	; 0x7a
1a001e7a:	2100      	movs	r1, #0
1a001e7c:	f7ff fd14 	bl	1a0018a8 <send_cmd>
1a001e80:	b148      	cbz	r0, 1a001e96 <disk_ioctl+0x20e>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001e82:	2401      	movs	r4, #1
1a001e84:	e033      	b.n	1a001eee <disk_ioctl+0x266>
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
1a001e86:	1c66      	adds	r6, r4, #1
1a001e88:	f7ff fcd0 	bl	1a00182c <rcvr_spi>
1a001e8c:	7020      	strb	r0, [r4, #0]
1a001e8e:	3d01      	subs	r5, #1
1a001e90:	b2ed      	uxtb	r5, r5
1a001e92:	4634      	mov	r4, r6
1a001e94:	e000      	b.n	1a001e98 <disk_ioctl+0x210>
1a001e96:	2504      	movs	r5, #4
1a001e98:	2d00      	cmp	r5, #0
1a001e9a:	d1f4      	bne.n	1a001e86 <disk_ioctl+0x1fe>
				res = RES_OK;
1a001e9c:	2400      	movs	r4, #0
1a001e9e:	e026      	b.n	1a001eee <disk_ioctl+0x266>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
1a001ea0:	20cd      	movs	r0, #205	; 0xcd
1a001ea2:	2100      	movs	r1, #0
1a001ea4:	f7ff fd00 	bl	1a0018a8 <send_cmd>
1a001ea8:	b9f0      	cbnz	r0, 1a001ee8 <disk_ioctl+0x260>
				rcvr_spi();
1a001eaa:	f7ff fcbf 	bl	1a00182c <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
1a001eae:	4620      	mov	r0, r4
1a001eb0:	2140      	movs	r1, #64	; 0x40
1a001eb2:	f7ff fd67 	bl	1a001984 <rcvr_datablock>
1a001eb6:	b9c8      	cbnz	r0, 1a001eec <disk_ioctl+0x264>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001eb8:	2401      	movs	r4, #1
1a001eba:	e018      	b.n	1a001eee <disk_ioctl+0x266>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
1a001ebc:	2404      	movs	r4, #4
1a001ebe:	e016      	b.n	1a001eee <disk_ioctl+0x266>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001ec0:	2401      	movs	r4, #1
1a001ec2:	e014      	b.n	1a001eee <disk_ioctl+0x266>
1a001ec4:	2401      	movs	r4, #1
1a001ec6:	e012      	b.n	1a001eee <disk_ioctl+0x266>
1a001ec8:	2401      	movs	r4, #1
1a001eca:	e010      	b.n	1a001eee <disk_ioctl+0x266>
1a001ecc:	2401      	movs	r4, #1
1a001ece:	e00e      	b.n	1a001eee <disk_ioctl+0x266>
1a001ed0:	2401      	movs	r4, #1
1a001ed2:	e00c      	b.n	1a001eee <disk_ioctl+0x266>
1a001ed4:	2401      	movs	r4, #1
1a001ed6:	e00a      	b.n	1a001eee <disk_ioctl+0x266>
1a001ed8:	2401      	movs	r4, #1
1a001eda:	e008      	b.n	1a001eee <disk_ioctl+0x266>
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
1a001edc:	2400      	movs	r4, #0
1a001ede:	e006      	b.n	1a001eee <disk_ioctl+0x266>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001ee0:	2401      	movs	r4, #1
1a001ee2:	e004      	b.n	1a001eee <disk_ioctl+0x266>
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
1a001ee4:	2400      	movs	r4, #0
1a001ee6:	e002      	b.n	1a001eee <disk_ioctl+0x266>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001ee8:	2401      	movs	r4, #1
1a001eea:	e000      	b.n	1a001eee <disk_ioctl+0x266>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
1a001eec:	2400      	movs	r4, #0

		default:
			res = RES_PARERR;
		}

		deselect();
1a001eee:	f7ff fcbd 	bl	1a00186c <deselect>
1a001ef2:	e000      	b.n	1a001ef6 <disk_ioctl+0x26e>
	if (ctrl == CTRL_POWER) {
		switch (*ptr) {
		case 0:		/* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
				power_off();		/* Power off */
			res = RES_OK;
1a001ef4:	2400      	movs	r4, #0
		}

		deselect();
	}

	return res;
1a001ef6:	4620      	mov	r0, r4
1a001ef8:	e002      	b.n	1a001f00 <disk_ioctl+0x278>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
1a001efa:	2004      	movs	r0, #4

		deselect();
	}

	return res;
}
1a001efc:	4770      	bx	lr
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001efe:	2003      	movs	r0, #3

		deselect();
	}

	return res;
}
1a001f00:	b004      	add	sp, #16
1a001f02:	bd70      	pop	{r4, r5, r6, pc}
1a001f04:	10000000 	.word	0x10000000
1a001f08:	1000055a 	.word	0x1000055a

1a001f0c <rtcRead>:
 * @Brief: Get time from RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcRead( rtc_t * rtc )
{
1a001f0c:	b510      	push	{r4, lr}
1a001f0e:	b088      	sub	sp, #32
1a001f10:	4604      	mov	r4, r0
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   Chip_RTC_GetFullTime(LPC_RTC, &rtcTime);
1a001f12:	480a      	ldr	r0, [pc, #40]	; (1a001f3c <rtcRead+0x30>)
1a001f14:	4669      	mov	r1, sp
1a001f16:	f001 fbb5 	bl	1a003684 <Chip_RTC_GetFullTime>

   rtc->sec = rtcTime.time[RTC_TIMETYPE_SECOND];
1a001f1a:	9b00      	ldr	r3, [sp, #0]
1a001f1c:	71e3      	strb	r3, [r4, #7]
   rtc->min = rtcTime.time[RTC_TIMETYPE_MINUTE];
1a001f1e:	9b01      	ldr	r3, [sp, #4]
1a001f20:	71a3      	strb	r3, [r4, #6]
   rtc->hour = rtcTime.time[RTC_TIMETYPE_HOUR];
1a001f22:	9b02      	ldr	r3, [sp, #8]
1a001f24:	7163      	strb	r3, [r4, #5]
   rtc->wday = rtcTime.time[RTC_TIMETYPE_DAYOFWEEK];
1a001f26:	9b04      	ldr	r3, [sp, #16]
1a001f28:	7123      	strb	r3, [r4, #4]
   rtc->mday = rtcTime.time[RTC_TIMETYPE_DAYOFMONTH];
1a001f2a:	9b03      	ldr	r3, [sp, #12]
1a001f2c:	70e3      	strb	r3, [r4, #3]
   rtc->month = rtcTime.time[RTC_TIMETYPE_MONTH];
1a001f2e:	9b06      	ldr	r3, [sp, #24]
1a001f30:	70a3      	strb	r3, [r4, #2]
   rtc->year = rtcTime.time[RTC_TIMETYPE_YEAR];
1a001f32:	9b07      	ldr	r3, [sp, #28]
1a001f34:	8023      	strh	r3, [r4, #0]

   return ret_val;
}
1a001f36:	2001      	movs	r0, #1
1a001f38:	b008      	add	sp, #32
1a001f3a:	bd10      	pop	{r4, pc}
1a001f3c:	40046000 	.word	0x40046000

1a001f40 <rtcWrite>:
 * @Brief: Set time on RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcWrite( rtc_t * rtc )
{
1a001f40:	b500      	push	{lr}
1a001f42:	b089      	sub	sp, #36	; 0x24
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   rtcTime.time[RTC_TIMETYPE_SECOND]     = rtc->sec;
1a001f44:	79c3      	ldrb	r3, [r0, #7]
1a001f46:	9300      	str	r3, [sp, #0]
   rtcTime.time[RTC_TIMETYPE_MINUTE]     = rtc->min;
1a001f48:	7983      	ldrb	r3, [r0, #6]
1a001f4a:	9301      	str	r3, [sp, #4]
   rtcTime.time[RTC_TIMETYPE_HOUR]       = rtc->hour;
1a001f4c:	7943      	ldrb	r3, [r0, #5]
1a001f4e:	9302      	str	r3, [sp, #8]
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->wday;
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->mday;
1a001f50:	78c3      	ldrb	r3, [r0, #3]
1a001f52:	9303      	str	r3, [sp, #12]
   rtcTime.time[RTC_TIMETYPE_MONTH]      = rtc->month;
1a001f54:	7883      	ldrb	r3, [r0, #2]
1a001f56:	9306      	str	r3, [sp, #24]
   rtcTime.time[RTC_TIMETYPE_YEAR]	     = rtc->year;
1a001f58:	8803      	ldrh	r3, [r0, #0]
1a001f5a:	9307      	str	r3, [sp, #28]

   Chip_RTC_SetFullTime(LPC_RTC, &rtcTime);
1a001f5c:	4803      	ldr	r0, [pc, #12]	; (1a001f6c <rtcWrite+0x2c>)
1a001f5e:	4669      	mov	r1, sp
1a001f60:	f001 fb78 	bl	1a003654 <Chip_RTC_SetFullTime>

   return ret_val;
}
1a001f64:	2001      	movs	r0, #1
1a001f66:	b009      	add	sp, #36	; 0x24
1a001f68:	f85d fb04 	ldr.w	pc, [sp], #4
1a001f6c:	40046000 	.word	0x40046000

1a001f70 <rtcInit>:
 * @Brief: Configure RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcInit( rtc_t * rtc )
{
1a001f70:	b538      	push	{r3, r4, r5, lr}
   bool_t ret_val = 1;

   static bool_t init;

   if( init ) {
1a001f72:	4b0a      	ldr	r3, [pc, #40]	; (1a001f9c <rtcInit+0x2c>)
1a001f74:	781b      	ldrb	r3, [r3, #0]
1a001f76:	b97b      	cbnz	r3, 1a001f98 <rtcInit+0x28>
1a001f78:	4604      	mov	r4, r0
      /* Already initialized */
      ret_val = 0;
   } else {

      /* RTC Block section ------------------------- */
      Chip_RTC_Init(LPC_RTC);
1a001f7a:	4d09      	ldr	r5, [pc, #36]	; (1a001fa0 <rtcInit+0x30>)
1a001f7c:	4628      	mov	r0, r5
1a001f7e:	f001 fba9 	bl	1a0036d4 <Chip_RTC_Init>
      rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = 2;
      rtcTime.time[RTC_TIMETYPE_MONTH]      = 7;
      rtcTime.time[RTC_TIMETYPE_YEAR]       = 2016;
      Chip_RTC_SetFullAlarmTime(LPC_RTC, &rtcTime);
      */
      rtcWrite( rtc );
1a001f82:	4620      	mov	r0, r4
1a001f84:	f7ff ffdc 	bl	1a001f40 <rtcWrite>

      /* Enable rtc (starts increase the tick counter
         and second counter register) */
      Chip_RTC_Enable(LPC_RTC, ENABLE);
1a001f88:	4628      	mov	r0, r5
1a001f8a:	2101      	movs	r1, #1
1a001f8c:	f001 fb56 	bl	1a00363c <Chip_RTC_Enable>

      init = 1;
1a001f90:	2001      	movs	r0, #1
1a001f92:	4b02      	ldr	r3, [pc, #8]	; (1a001f9c <rtcInit+0x2c>)
1a001f94:	7018      	strb	r0, [r3, #0]
1a001f96:	bd38      	pop	{r3, r4, r5, pc}

   static bool_t init;

   if( init ) {
      /* Already initialized */
      ret_val = 0;
1a001f98:	2000      	movs	r0, #0

      init = 1;
   }

   return ret_val;
}
1a001f9a:	bd38      	pop	{r3, r4, r5, pc}
1a001f9c:	1000055b 	.word	0x1000055b
1a001fa0:	40046000 	.word	0x40046000

1a001fa4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001fa4:	4b04      	ldr	r3, [pc, #16]	; (1a001fb8 <cyclesCounterInit+0x14>)
1a001fa6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a001fa8:	4b04      	ldr	r3, [pc, #16]	; (1a001fbc <cyclesCounterInit+0x18>)
1a001faa:	681a      	ldr	r2, [r3, #0]
1a001fac:	6813      	ldr	r3, [r2, #0]
1a001fae:	f043 0301 	orr.w	r3, r3, #1
1a001fb2:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001fb4:	2001      	movs	r0, #1
1a001fb6:	4770      	bx	lr
1a001fb8:	10000008 	.word	0x10000008
1a001fbc:	10000004 	.word	0x10000004

1a001fc0 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a001fc0:	2301      	movs	r3, #1
1a001fc2:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a001fc4:	4a01      	ldr	r2, [pc, #4]	; (1a001fcc <clearInterrupt+0xc>)
1a001fc6:	6253      	str	r3, [r2, #36]	; 0x24
1a001fc8:	4770      	bx	lr
1a001fca:	bf00      	nop
1a001fcc:	40087000 	.word	0x40087000

1a001fd0 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a001fd0:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a001fd2:	4b13      	ldr	r3, [pc, #76]	; (1a002020 <serveInterrupt+0x50>)
1a001fd4:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a001fd6:	4a13      	ldr	r2, [pc, #76]	; (1a002024 <serveInterrupt+0x54>)
1a001fd8:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a001fda:	2401      	movs	r4, #1
1a001fdc:	4084      	lsls	r4, r0
1a001fde:	4214      	tst	r4, r2
1a001fe0:	d00a      	beq.n	1a001ff8 <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a001fe2:	4a11      	ldr	r2, [pc, #68]	; (1a002028 <serveInterrupt+0x58>)
1a001fe4:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a001fe6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a001fea:	00db      	lsls	r3, r3, #3
1a001fec:	490f      	ldr	r1, [pc, #60]	; (1a00202c <serveInterrupt+0x5c>)
1a001fee:	440b      	add	r3, r1
1a001ff0:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a001ff2:	4b0c      	ldr	r3, [pc, #48]	; (1a002024 <serveInterrupt+0x54>)
1a001ff4:	61dc      	str	r4, [r3, #28]
1a001ff6:	e00f      	b.n	1a002018 <serveInterrupt+0x48>
1a001ff8:	4a0b      	ldr	r2, [pc, #44]	; (1a002028 <serveInterrupt+0x58>)
1a001ffa:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a001ffc:	4d0b      	ldr	r5, [pc, #44]	; (1a00202c <serveInterrupt+0x5c>)
1a001ffe:	005e      	lsls	r6, r3, #1
1a002000:	18f2      	adds	r2, r6, r3
1a002002:	00d2      	lsls	r2, r2, #3
1a002004:	442a      	add	r2, r5
1a002006:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a002008:	6852      	ldr	r2, [r2, #4]
1a00200a:	1a89      	subs	r1, r1, r2
1a00200c:	4433      	add	r3, r6
1a00200e:	00db      	lsls	r3, r3, #3
1a002010:	442b      	add	r3, r5
1a002012:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a002014:	4b03      	ldr	r3, [pc, #12]	; (1a002024 <serveInterrupt+0x54>)
1a002016:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a002018:	f7ff ffd2 	bl	1a001fc0 <clearInterrupt>
1a00201c:	bd70      	pop	{r4, r5, r6, pc}
1a00201e:	bf00      	nop
1a002020:	1a00409c 	.word	0x1a00409c
1a002024:	40087000 	.word	0x40087000
1a002028:	40084000 	.word	0x40084000
1a00202c:	1000000c 	.word	0x1000000c

1a002030 <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a002030:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a002032:	2000      	movs	r0, #0
1a002034:	f7ff ffcc 	bl	1a001fd0 <serveInterrupt>
1a002038:	bd08      	pop	{r3, pc}
1a00203a:	bf00      	nop

1a00203c <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a00203c:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a00203e:	2001      	movs	r0, #1
1a002040:	f7ff ffc6 	bl	1a001fd0 <serveInterrupt>
1a002044:	bd08      	pop	{r3, pc}
1a002046:	bf00      	nop

1a002048 <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a002048:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a00204a:	2002      	movs	r0, #2
1a00204c:	f7ff ffc0 	bl	1a001fd0 <serveInterrupt>
1a002050:	bd08      	pop	{r3, pc}
1a002052:	bf00      	nop

1a002054 <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a002054:	b510      	push	{r4, lr}
1a002056:	b082      	sub	sp, #8

   switch(config) {
1a002058:	b110      	cbz	r0, 1a002060 <adcInit+0xc>
1a00205a:	2801      	cmp	r0, #1
1a00205c:	d037      	beq.n	1a0020ce <adcInit+0x7a>
1a00205e:	e039      	b.n	1a0020d4 <adcInit+0x80>

      /* Initialized to default values:
      *   - Sample rate:ADC_MAX_SAMPLE_RATE=400KHz
      *   - resolution: ADC_10BITS
      *   - burst mode: DISABLE */
      Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a002060:	4c1d      	ldr	r4, [pc, #116]	; (1a0020d8 <adcInit+0x84>)
1a002062:	4620      	mov	r0, r4
1a002064:	4669      	mov	r1, sp
1a002066:	f000 fe6b 	bl	1a002d40 <Chip_ADC_Init>
      /* Disable burst mode */
      Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a00206a:	4620      	mov	r0, r4
1a00206c:	2100      	movs	r1, #0
1a00206e:	f000 ff07 	bl	1a002e80 <Chip_ADC_SetBurstCmd>
      /* Set sample rate to 200KHz */
      Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a002072:	4620      	mov	r0, r4
1a002074:	4669      	mov	r1, sp
1a002076:	4a19      	ldr	r2, [pc, #100]	; (1a0020dc <adcInit+0x88>)
1a002078:	f000 fece 	bl	1a002e18 <Chip_ADC_SetSampleRate>
      /* Disable all channels */
      Chip_ADC_EnableChannel( LPC_ADC0,ADC_CH1, DISABLE );
1a00207c:	4620      	mov	r0, r4
1a00207e:	2101      	movs	r1, #1
1a002080:	2200      	movs	r2, #0
1a002082:	f000 fee9 	bl	1a002e58 <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a002086:	4620      	mov	r0, r4
1a002088:	2101      	movs	r1, #1
1a00208a:	2200      	movs	r2, #0
1a00208c:	f000 fea4 	bl	1a002dd8 <Chip_ADC_Int_SetChannelCmd>

      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a002090:	4620      	mov	r0, r4
1a002092:	2102      	movs	r1, #2
1a002094:	2200      	movs	r2, #0
1a002096:	f000 fedf 	bl	1a002e58 <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a00209a:	4620      	mov	r0, r4
1a00209c:	2102      	movs	r1, #2
1a00209e:	2200      	movs	r2, #0
1a0020a0:	f000 fe9a 	bl	1a002dd8 <Chip_ADC_Int_SetChannelCmd>

      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a0020a4:	4620      	mov	r0, r4
1a0020a6:	2103      	movs	r1, #3
1a0020a8:	2200      	movs	r2, #0
1a0020aa:	f000 fed5 	bl	1a002e58 <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a0020ae:	4620      	mov	r0, r4
1a0020b0:	2103      	movs	r1, #3
1a0020b2:	2200      	movs	r2, #0
1a0020b4:	f000 fe90 	bl	1a002dd8 <Chip_ADC_Int_SetChannelCmd>

      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a0020b8:	4620      	mov	r0, r4
1a0020ba:	2104      	movs	r1, #4
1a0020bc:	2200      	movs	r2, #0
1a0020be:	f000 fecb 	bl	1a002e58 <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a0020c2:	4620      	mov	r0, r4
1a0020c4:	2104      	movs	r1, #4
1a0020c6:	2200      	movs	r2, #0
1a0020c8:	f000 fe86 	bl	1a002dd8 <Chip_ADC_Int_SetChannelCmd>

      // Chip_SCU_ADC_Channel_Config( 0, 4 ); // Pablo Gomez
   }
   break;
1a0020cc:	e002      	b.n	1a0020d4 <adcInit+0x80>

   case ADC_DISABLE:
      /* Disable ADC peripheral */
      Chip_ADC_DeInit( LPC_ADC0 );
1a0020ce:	4802      	ldr	r0, [pc, #8]	; (1a0020d8 <adcInit+0x84>)
1a0020d0:	f000 fe56 	bl	1a002d80 <Chip_ADC_DeInit>
      break;
   }

}
1a0020d4:	b002      	add	sp, #8
1a0020d6:	bd10      	pop	{r4, pc}
1a0020d8:	400e3000 	.word	0x400e3000
1a0020dc:	00030d40 	.word	0x00030d40

1a0020e0 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a0020e0:	b570      	push	{r4, r5, r6, lr}
1a0020e2:	b082      	sub	sp, #8

   uint8_t lpcAdcChannel = 66 - analogInput;
1a0020e4:	f1c0 0042 	rsb	r0, r0, #66	; 0x42
1a0020e8:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a0020ea:	2500      	movs	r5, #0
1a0020ec:	f8ad 5006 	strh.w	r5, [sp, #6]

   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a0020f0:	4e10      	ldr	r6, [pc, #64]	; (1a002134 <adcRead+0x54>)
1a0020f2:	4630      	mov	r0, r6
1a0020f4:	4621      	mov	r1, r4
1a0020f6:	2201      	movs	r2, #1
1a0020f8:	f000 feae 	bl	1a002e58 <Chip_ADC_EnableChannel>
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a0020fc:	4630      	mov	r0, r6
1a0020fe:	2101      	movs	r1, #1
1a002100:	462a      	mov	r2, r5
1a002102:	f000 fe79 	bl	1a002df8 <Chip_ADC_SetStartMode>

   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a002106:	480b      	ldr	r0, [pc, #44]	; (1a002134 <adcRead+0x54>)
1a002108:	4621      	mov	r1, r4
1a00210a:	2200      	movs	r2, #0
1a00210c:	f000 fe48 	bl	1a002da0 <Chip_ADC_ReadStatus>
   uint16_t analogValue = 0;

   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);

   while(
1a002110:	2801      	cmp	r0, #1
1a002112:	d1f8      	bne.n	1a002106 <adcRead+0x26>
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
   );
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a002114:	4d07      	ldr	r5, [pc, #28]	; (1a002134 <adcRead+0x54>)
1a002116:	4628      	mov	r0, r5
1a002118:	4621      	mov	r1, r4
1a00211a:	f10d 0206 	add.w	r2, sp, #6
1a00211e:	f000 fe3b 	bl	1a002d98 <Chip_ADC_ReadValue>

   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a002122:	4628      	mov	r0, r5
1a002124:	4621      	mov	r1, r4
1a002126:	2200      	movs	r2, #0
1a002128:	f000 fe96 	bl	1a002e58 <Chip_ADC_EnableChannel>

   return analogValue;
}
1a00212c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a002130:	b002      	add	sp, #8
1a002132:	bd70      	pop	{r4, r5, r6, pc}
1a002134:	400e3000 	.word	0x400e3000

1a002138 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002138:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00213a:	4d09      	ldr	r5, [pc, #36]	; (1a002160 <gpioObtainPinInit+0x28>)
1a00213c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002140:	182c      	adds	r4, r5, r0
1a002142:	5c28      	ldrb	r0, [r5, r0]
1a002144:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a002146:	7861      	ldrb	r1, [r4, #1]
1a002148:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00214a:	78a2      	ldrb	r2, [r4, #2]
1a00214c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00214e:	78e2      	ldrb	r2, [r4, #3]
1a002150:	9b02      	ldr	r3, [sp, #8]
1a002152:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a002154:	7922      	ldrb	r2, [r4, #4]
1a002156:	9b03      	ldr	r3, [sp, #12]
1a002158:	701a      	strb	r2, [r3, #0]
}
1a00215a:	bc30      	pop	{r4, r5}
1a00215c:	4770      	bx	lr
1a00215e:	bf00      	nop
1a002160:	1a0040a0 	.word	0x1a0040a0

1a002164 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a002164:	b570      	push	{r4, r5, r6, lr}
1a002166:	b084      	sub	sp, #16
1a002168:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00216a:	2300      	movs	r3, #0
1a00216c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002170:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002174:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002178:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00217c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002180:	ab03      	add	r3, sp, #12
1a002182:	9300      	str	r3, [sp, #0]
1a002184:	f10d 030b 	add.w	r3, sp, #11
1a002188:	9301      	str	r3, [sp, #4]
1a00218a:	f10d 010f 	add.w	r1, sp, #15
1a00218e:	f10d 020e 	add.w	r2, sp, #14
1a002192:	f10d 030d 	add.w	r3, sp, #13
1a002196:	f7ff ffcf 	bl	1a002138 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00219a:	2c05      	cmp	r4, #5
1a00219c:	f200 80a8 	bhi.w	1a0022f0 <gpioInit+0x18c>
1a0021a0:	e8df f004 	tbb	[pc, r4]
1a0021a4:	46278408 	.word	0x46278408
1a0021a8:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0021aa:	4853      	ldr	r0, [pc, #332]	; (1a0022f8 <gpioInit+0x194>)
1a0021ac:	f001 fab6 	bl	1a00371c <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a0021b0:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a0021b2:	e09e      	b.n	1a0022f2 <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a0021b4:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0021b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0021bc:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0021c0:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0021c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0021c8:	494c      	ldr	r1, [pc, #304]	; (1a0022fc <gpioInit+0x198>)
1a0021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0021ce:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0021d2:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0021d6:	2001      	movs	r0, #1
1a0021d8:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0021dc:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0021e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0021e4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0021e8:	ea22 0204 	bic.w	r2, r2, r4
1a0021ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0021f0:	e07f      	b.n	1a0022f2 <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a0021f2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0021f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0021fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0021fe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002202:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002206:	493d      	ldr	r1, [pc, #244]	; (1a0022fc <gpioInit+0x198>)
1a002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00220c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002210:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002214:	2001      	movs	r0, #1
1a002216:	fa00 f402 	lsl.w	r4, r0, r2
1a00221a:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a00221e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002222:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002226:	ea22 0204 	bic.w	r2, r2, r4
1a00222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a00222e:	e060      	b.n	1a0022f2 <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a002230:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002234:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002238:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00223c:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002240:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002244:	492d      	ldr	r1, [pc, #180]	; (1a0022fc <gpioInit+0x198>)
1a002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00224a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00224e:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002252:	2001      	movs	r0, #1
1a002254:	fa00 f402 	lsl.w	r4, r0, r2
1a002258:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a00225c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002260:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002264:	ea22 0204 	bic.w	r2, r2, r4
1a002268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a00226c:	e041      	b.n	1a0022f2 <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a00226e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002272:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002276:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00227a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00227e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002282:	491e      	ldr	r1, [pc, #120]	; (1a0022fc <gpioInit+0x198>)
1a002284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002288:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00228c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002290:	2001      	movs	r0, #1
1a002292:	fa00 f402 	lsl.w	r4, r0, r2
1a002296:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a00229a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00229e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0022a2:	ea22 0204 	bic.w	r2, r2, r4
1a0022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0022aa:	e022      	b.n	1a0022f2 <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a0022ac:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0022b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0022b4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0022b8:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0022bc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0022c0:	490e      	ldr	r1, [pc, #56]	; (1a0022fc <gpioInit+0x198>)
1a0022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0022c6:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0022ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a0022ce:	b25a      	sxtb	r2, r3
1a0022d0:	2001      	movs	r0, #1
1a0022d2:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a0022d6:	4a08      	ldr	r2, [pc, #32]	; (1a0022f8 <gpioInit+0x194>)
1a0022d8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0022dc:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a0022e0:	4331      	orrs	r1, r6
1a0022e2:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0022e6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0022ea:	2100      	movs	r1, #0
1a0022ec:	54d1      	strb	r1, [r2, r3]
1a0022ee:	e000      	b.n	1a0022f2 <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a0022f0:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a0022f2:	b004      	add	sp, #16
1a0022f4:	bd70      	pop	{r4, r5, r6, pc}
1a0022f6:	bf00      	nop
1a0022f8:	400f4000 	.word	0x400f4000
1a0022fc:	40086000 	.word	0x40086000

1a002300 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a002300:	b510      	push	{r4, lr}
1a002302:	b084      	sub	sp, #16
1a002304:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a002306:	2300      	movs	r3, #0
1a002308:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00230c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002310:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002314:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002318:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00231c:	ab03      	add	r3, sp, #12
1a00231e:	9300      	str	r3, [sp, #0]
1a002320:	f10d 030b 	add.w	r3, sp, #11
1a002324:	9301      	str	r3, [sp, #4]
1a002326:	f10d 010f 	add.w	r1, sp, #15
1a00232a:	f10d 020e 	add.w	r2, sp, #14
1a00232e:	f10d 030d 	add.w	r3, sp, #13
1a002332:	f7ff ff01 	bl	1a002138 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a002336:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a00233a:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a00233e:	3400      	adds	r4, #0
1a002340:	bf18      	it	ne
1a002342:	2401      	movne	r4, #1
1a002344:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a002348:	4a02      	ldr	r2, [pc, #8]	; (1a002354 <gpioWrite+0x54>)
1a00234a:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a00234c:	2001      	movs	r0, #1
1a00234e:	b004      	add	sp, #16
1a002350:	bd10      	pop	{r4, pc}
1a002352:	bf00      	nop
1a002354:	400f4000 	.word	0x400f4000

1a002358 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a002358:	4b01      	ldr	r3, [pc, #4]	; (1a002360 <tickRead+0x8>)
1a00235a:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00235e:	4770      	bx	lr
1a002360:	10000588 	.word	0x10000588

1a002364 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a002364:	b118      	cbz	r0, 1a00236e <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a002366:	2207      	movs	r2, #7
1a002368:	4b03      	ldr	r3, [pc, #12]	; (1a002378 <tickPowerSet+0x14>)
1a00236a:	601a      	str	r2, [r3, #0]
1a00236c:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a00236e:	2200      	movs	r2, #0
1a002370:	4b01      	ldr	r3, [pc, #4]	; (1a002378 <tickPowerSet+0x14>)
1a002372:	601a      	str	r2, [r3, #0]
1a002374:	4770      	bx	lr
1a002376:	bf00      	nop
1a002378:	e000e010 	.word	0xe000e010

1a00237c <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a00237c:	b510      	push	{r4, lr}
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
      tick_t tickRateHz = 0;
      if( tickRateMSvalue == 0 ) {
1a00237e:	ea50 0301 	orrs.w	r3, r0, r1
1a002382:	d104      	bne.n	1a00238e <tickInit+0x12>
         tickPowerSet( OFF );
1a002384:	2000      	movs	r0, #0
1a002386:	f7ff ffed 	bl	1a002364 <tickPowerSet>
         ret_val = 0;
1a00238a:	2000      	movs	r0, #0
1a00238c:	bd10      	pop	{r4, pc}
      } else {
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a00238e:	f110 32ff 	adds.w	r2, r0, #4294967295
1a002392:	f141 33ff 	adc.w	r3, r1, #4294967295
1a002396:	2b00      	cmp	r3, #0
1a002398:	bf08      	it	eq
1a00239a:	2a32      	cmpeq	r2, #50	; 0x32
1a00239c:	d222      	bcs.n	1a0023e4 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a00239e:	4b12      	ldr	r3, [pc, #72]	; (1a0023e8 <tickInit+0x6c>)
1a0023a0:	e9c3 0100 	strd	r0, r1, [r3]
            tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
            tickRateHz =  100 =>  100 ticks per second => 10 ms tick
            tickRateHz =   20 =>   20 ticks per second => 50 ms tick
            */
            // Init SysTick interrupt, tickRateHz ticks per second
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0023a4:	4b11      	ldr	r3, [pc, #68]	; (1a0023ec <tickInit+0x70>)
1a0023a6:	681c      	ldr	r4, [r3, #0]
1a0023a8:	fba4 2300 	umull	r2, r3, r4, r0
1a0023ac:	fb04 3301 	mla	r3, r4, r1, r3
1a0023b0:	4610      	mov	r0, r2
1a0023b2:	4619      	mov	r1, r3
1a0023b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0023b8:	2300      	movs	r3, #0
1a0023ba:	f001 fb29 	bl	1a003a10 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a0023be:	3801      	subs	r0, #1
1a0023c0:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0023c4:	d209      	bcs.n	1a0023da <tickInit+0x5e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a0023c6:	4b0a      	ldr	r3, [pc, #40]	; (1a0023f0 <tickInit+0x74>)
1a0023c8:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a0023ca:	21e0      	movs	r1, #224	; 0xe0
1a0023cc:	4a09      	ldr	r2, [pc, #36]	; (1a0023f4 <tickInit+0x78>)
1a0023ce:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a0023d2:	2200      	movs	r2, #0
1a0023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0023d6:	2207      	movs	r2, #7
1a0023d8:	601a      	str	r2, [r3, #0]
            if ( SysTick_Config( CMU_ClockFreqGet(cmuClock_CORE) / tickRateHz) ){
               //DEBUG_BREAK;
               ret_val = 0;
            }
            */
            tickPowerSet( ON );
1a0023da:	2001      	movs	r0, #1
1a0023dc:	f7ff ffc2 	bl	1a002364 <tickPowerSet>

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
1a0023e0:	2001      	movs	r0, #1
1a0023e2:	bd10      	pop	{r4, pc}
            }
            */
            tickPowerSet( ON );
         } else {
            // Error, tickRateMS variable not in range (1 <= tickRateMS <= 50)
            ret_val = 0;
1a0023e4:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a0023e6:	bd10      	pop	{r4, pc}
1a0023e8:	10000590 	.word	0x10000590
1a0023ec:	10000598 	.word	0x10000598
1a0023f0:	e000e010 	.word	0xe000e010
1a0023f4:	e000ed00 	.word	0xe000ed00

1a0023f8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0023f8:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0023fa:	4908      	ldr	r1, [pc, #32]	; (1a00241c <SysTick_Handler+0x24>)
1a0023fc:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002400:	3201      	adds	r2, #1
1a002402:	f143 0300 	adc.w	r3, r3, #0
1a002406:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00240a:	4b05      	ldr	r3, [pc, #20]	; (1a002420 <SysTick_Handler+0x28>)
1a00240c:	681b      	ldr	r3, [r3, #0]
1a00240e:	b123      	cbz	r3, 1a00241a <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a002410:	4b03      	ldr	r3, [pc, #12]	; (1a002420 <SysTick_Handler+0x28>)
1a002412:	681b      	ldr	r3, [r3, #0]
1a002414:	4a03      	ldr	r2, [pc, #12]	; (1a002424 <SysTick_Handler+0x2c>)
1a002416:	6810      	ldr	r0, [r2, #0]
1a002418:	4798      	blx	r3
1a00241a:	bd08      	pop	{r3, pc}
1a00241c:	10000588 	.word	0x10000588
1a002420:	1000055c 	.word	0x1000055c
1a002424:	10000560 	.word	0x10000560

1a002428 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a002428:	b570      	push	{r4, r5, r6, lr}
1a00242a:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a00242c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a002430:	009b      	lsls	r3, r3, #2
1a002432:	4a21      	ldr	r2, [pc, #132]	; (1a0024b8 <uartProcessIRQ+0x90>)
1a002434:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002436:	6975      	ldr	r5, [r6, #20]
1a002438:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a00243a:	f015 0f01 	tst.w	r5, #1
1a00243e:	d019      	beq.n	1a002474 <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a002440:	b930      	cbnz	r0, 1a002450 <uartProcessIRQ+0x28>
1a002442:	4b1e      	ldr	r3, [pc, #120]	; (1a0024bc <uartProcessIRQ+0x94>)
1a002444:	681b      	ldr	r3, [r3, #0]
1a002446:	b11b      	cbz	r3, 1a002450 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a002448:	4b1c      	ldr	r3, [pc, #112]	; (1a0024bc <uartProcessIRQ+0x94>)
1a00244a:	681b      	ldr	r3, [r3, #0]
1a00244c:	2000      	movs	r0, #0
1a00244e:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a002450:	2c03      	cmp	r4, #3
1a002452:	d106      	bne.n	1a002462 <uartProcessIRQ+0x3a>
1a002454:	4b1a      	ldr	r3, [pc, #104]	; (1a0024c0 <uartProcessIRQ+0x98>)
1a002456:	681b      	ldr	r3, [r3, #0]
1a002458:	b11b      	cbz	r3, 1a002462 <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a00245a:	4b19      	ldr	r3, [pc, #100]	; (1a0024c0 <uartProcessIRQ+0x98>)
1a00245c:	681b      	ldr	r3, [r3, #0]
1a00245e:	2000      	movs	r0, #0
1a002460:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a002462:	2c05      	cmp	r4, #5
1a002464:	d106      	bne.n	1a002474 <uartProcessIRQ+0x4c>
1a002466:	4b17      	ldr	r3, [pc, #92]	; (1a0024c4 <uartProcessIRQ+0x9c>)
1a002468:	681b      	ldr	r3, [r3, #0]
1a00246a:	b11b      	cbz	r3, 1a002474 <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a00246c:	4b15      	ldr	r3, [pc, #84]	; (1a0024c4 <uartProcessIRQ+0x9c>)
1a00246e:	681b      	ldr	r3, [r3, #0]
1a002470:	2000      	movs	r0, #0
1a002472:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a002474:	f015 0f20 	tst.w	r5, #32
1a002478:	d01d      	beq.n	1a0024b6 <uartProcessIRQ+0x8e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a00247a:	6873      	ldr	r3, [r6, #4]
1a00247c:	f013 0f02 	tst.w	r3, #2
1a002480:	d019      	beq.n	1a0024b6 <uartProcessIRQ+0x8e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a002482:	b934      	cbnz	r4, 1a002492 <uartProcessIRQ+0x6a>
1a002484:	4b10      	ldr	r3, [pc, #64]	; (1a0024c8 <uartProcessIRQ+0xa0>)
1a002486:	681b      	ldr	r3, [r3, #0]
1a002488:	b11b      	cbz	r3, 1a002492 <uartProcessIRQ+0x6a>
         (*txIsrCallbackUART0)(0);
1a00248a:	4b0f      	ldr	r3, [pc, #60]	; (1a0024c8 <uartProcessIRQ+0xa0>)
1a00248c:	681b      	ldr	r3, [r3, #0]
1a00248e:	2000      	movs	r0, #0
1a002490:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a002492:	2c03      	cmp	r4, #3
1a002494:	d106      	bne.n	1a0024a4 <uartProcessIRQ+0x7c>
1a002496:	4b0d      	ldr	r3, [pc, #52]	; (1a0024cc <uartProcessIRQ+0xa4>)
1a002498:	681b      	ldr	r3, [r3, #0]
1a00249a:	b11b      	cbz	r3, 1a0024a4 <uartProcessIRQ+0x7c>
         (*txIsrCallbackUART2)(0);
1a00249c:	4b0b      	ldr	r3, [pc, #44]	; (1a0024cc <uartProcessIRQ+0xa4>)
1a00249e:	681b      	ldr	r3, [r3, #0]
1a0024a0:	2000      	movs	r0, #0
1a0024a2:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0024a4:	2c05      	cmp	r4, #5
1a0024a6:	d106      	bne.n	1a0024b6 <uartProcessIRQ+0x8e>
1a0024a8:	4b09      	ldr	r3, [pc, #36]	; (1a0024d0 <uartProcessIRQ+0xa8>)
1a0024aa:	681b      	ldr	r3, [r3, #0]
1a0024ac:	b11b      	cbz	r3, 1a0024b6 <uartProcessIRQ+0x8e>
         (*txIsrCallbackUART3)(0);
1a0024ae:	4b08      	ldr	r3, [pc, #32]	; (1a0024d0 <uartProcessIRQ+0xa8>)
1a0024b0:	681b      	ldr	r3, [r3, #0]
1a0024b2:	2000      	movs	r0, #0
1a0024b4:	4798      	blx	r3
1a0024b6:	bd70      	pop	{r4, r5, r6, pc}
1a0024b8:	1a0041d8 	.word	0x1a0041d8
1a0024bc:	10000564 	.word	0x10000564
1a0024c0:	10000574 	.word	0x10000574
1a0024c4:	10000578 	.word	0x10000578
1a0024c8:	10000568 	.word	0x10000568
1a0024cc:	1000056c 	.word	0x1000056c
1a0024d0:	10000570 	.word	0x10000570

1a0024d4 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0024d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0024d8:	0080      	lsls	r0, r0, #2
1a0024da:	4b03      	ldr	r3, [pc, #12]	; (1a0024e8 <uartTxReady+0x14>)
1a0024dc:	581b      	ldr	r3, [r3, r0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0024de:	6958      	ldr	r0, [r3, #20]
}
1a0024e0:	f000 0020 	and.w	r0, r0, #32
1a0024e4:	4770      	bx	lr
1a0024e6:	bf00      	nop
1a0024e8:	1a0041d8 	.word	0x1a0041d8

1a0024ec <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0024ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0024f0:	0080      	lsls	r0, r0, #2
1a0024f2:	4b02      	ldr	r3, [pc, #8]	; (1a0024fc <uartTxWrite+0x10>)
1a0024f4:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a0024f6:	6019      	str	r1, [r3, #0]
1a0024f8:	4770      	bx	lr
1a0024fa:	bf00      	nop
1a0024fc:	1a0041d8 	.word	0x1a0041d8

1a002500 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a002500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002504:	4607      	mov	r7, r0
1a002506:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a002508:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a002578 <uartInit+0x78>
1a00250c:	0044      	lsls	r4, r0, #1
1a00250e:	1823      	adds	r3, r4, r0
1a002510:	009b      	lsls	r3, r3, #2
1a002512:	eb08 0503 	add.w	r5, r8, r3
1a002516:	f858 6003 	ldr.w	r6, [r8, r3]
1a00251a:	4630      	mov	r0, r6
1a00251c:	f000 fb1e 	bl	1a002b5c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a002520:	4630      	mov	r0, r6
1a002522:	4649      	mov	r1, r9
1a002524:	f000 fb44 	bl	1a002bb0 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a002528:	2307      	movs	r3, #7
1a00252a:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00252c:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a00252e:	2301      	movs	r3, #1
1a002530:	65f3      	str	r3, [r6, #92]	; 0x5c
   // Dummy read
   Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a002532:	7929      	ldrb	r1, [r5, #4]
1a002534:	796b      	ldrb	r3, [r5, #5]
1a002536:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002538:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00253c:	480c      	ldr	r0, [pc, #48]	; (1a002570 <uartInit+0x70>)
1a00253e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002542:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002546:	79ee      	ldrb	r6, [r5, #7]
1a002548:	7a2a      	ldrb	r2, [r5, #8]
1a00254a:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00254c:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002550:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a002554:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a002558:	2f01      	cmp	r7, #1
1a00255a:	d107      	bne.n	1a00256c <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a00255c:	4a05      	ldr	r2, [pc, #20]	; (1a002574 <uartInit+0x74>)
1a00255e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002560:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002564:	64d3      	str	r3, [r2, #76]	; 0x4c
1a002566:	221a      	movs	r2, #26
1a002568:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a00256c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002570:	40086000 	.word	0x40086000
1a002574:	40081000 	.word	0x40081000
1a002578:	1a0041d8 	.word	0x1a0041d8

1a00257c <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a00257c:	b538      	push	{r3, r4, r5, lr}
1a00257e:	4604      	mov	r4, r0
1a002580:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a002582:	4620      	mov	r0, r4
1a002584:	f7ff ffa6 	bl	1a0024d4 <uartTxReady>
1a002588:	2800      	cmp	r0, #0
1a00258a:	d0fa      	beq.n	1a002582 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a00258c:	4620      	mov	r0, r4
1a00258e:	4629      	mov	r1, r5
1a002590:	f7ff ffac 	bl	1a0024ec <uartTxWrite>
1a002594:	bd38      	pop	{r3, r4, r5, pc}
1a002596:	bf00      	nop

1a002598 <uartWriteString>:
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a002598:	b538      	push	{r3, r4, r5, lr}
1a00259a:	4605      	mov	r5, r0
1a00259c:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a00259e:	e003      	b.n	1a0025a8 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a0025a0:	4628      	mov	r0, r5
1a0025a2:	f7ff ffeb 	bl	1a00257c <uartWriteByte>
      str++;
1a0025a6:	3401      	adds	r4, #1
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
   while( *str != 0 ) {
1a0025a8:	7821      	ldrb	r1, [r4, #0]
1a0025aa:	2900      	cmp	r1, #0
1a0025ac:	d1f8      	bne.n	1a0025a0 <uartWriteString+0x8>
      uartWriteByte( uart, (uint8_t)*str );
      str++;
   }
}
1a0025ae:	bd38      	pop	{r3, r4, r5, pc}

1a0025b0 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a0025b0:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a0025b2:	2003      	movs	r0, #3
1a0025b4:	f7ff ff38 	bl	1a002428 <uartProcessIRQ>
1a0025b8:	bd08      	pop	{r3, pc}
1a0025ba:	bf00      	nop

1a0025bc <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a0025bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a0025be:	2005      	movs	r0, #5
1a0025c0:	f7ff ff32 	bl	1a002428 <uartProcessIRQ>
1a0025c4:	bd08      	pop	{r3, pc}
1a0025c6:	bf00      	nop

1a0025c8 <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a0025c8:	b9e8      	cbnz	r0, 1a002606 <spiInit+0x3e>
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

bool_t spiInit( spiMap_t spi )
{
1a0025ca:	b510      	push	{r4, lr}
1a0025cc:	4b0f      	ldr	r3, [pc, #60]	; (1a00260c <spiInit+0x44>)
1a0025ce:	2200      	movs	r2, #0
1a0025d0:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
1a0025d4:	21c5      	movs	r1, #197	; 0xc5
1a0025d6:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
1a0025da:	2105      	movs	r1, #5
1a0025dc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
1a0025e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0025e4:	490a      	ldr	r1, [pc, #40]	; (1a002610 <spiInit+0x48>)
1a0025e6:	f242 020c 	movw	r2, #8204	; 0x200c
1a0025ea:	588b      	ldr	r3, [r1, r2]
1a0025ec:	f043 0301 	orr.w	r3, r3, #1
1a0025f0:	508b      	str	r3, [r1, r2]

      Chip_SCU_PinMuxSet(0x6, 1, (SCU_MODE_PULLUP | SCU_MODE_FUNC0)); // CS1 configured as GPIO
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, 3, 0);

      // Initialize SSP Peripheral
      Chip_SSP_Init( LPC_SSP1 );
1a0025f2:	4c08      	ldr	r4, [pc, #32]	; (1a002614 <spiInit+0x4c>)
1a0025f4:	4620      	mov	r0, r4
1a0025f6:	f001 f971 	bl	1a0038dc <Chip_SSP_Init>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0025fa:	6863      	ldr	r3, [r4, #4]
1a0025fc:	f043 0302 	orr.w	r3, r3, #2
1a002600:	6063      	str	r3, [r4, #4]
/*==================[external functions definition]==========================*/

bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;
1a002602:	2001      	movs	r0, #1
1a002604:	bd10      	pop	{r4, pc}
      // Initialize SSP Peripheral
      Chip_SSP_Init( LPC_SSP1 );
      Chip_SSP_Enable( LPC_SSP1 );

   } else {
      retVal = FALSE;
1a002606:	2000      	movs	r0, #0
1a002608:	4770      	bx	lr
1a00260a:	bf00      	nop
1a00260c:	40086000 	.word	0x40086000
1a002610:	400f4000 	.word	0x400f4000
1a002614:	400c5000 	.word	0x400c5000

1a002618 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a002618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00261c:	4680      	mov	r8, r0
1a00261e:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a002620:	f7ff fe9a 	bl	1a002358 <tickRead>
1a002624:	4606      	mov	r6, r0
1a002626:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a002628:	f7ff fe96 	bl	1a002358 <tickRead>
1a00262c:	1b84      	subs	r4, r0, r6
1a00262e:	eb61 0507 	sbc.w	r5, r1, r7
1a002632:	4640      	mov	r0, r8
1a002634:	4649      	mov	r1, r9
1a002636:	4b05      	ldr	r3, [pc, #20]	; (1a00264c <delay+0x34>)
1a002638:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00263c:	f001 f9e8 	bl	1a003a10 <__aeabi_uldivmod>
1a002640:	428d      	cmp	r5, r1
1a002642:	bf08      	it	eq
1a002644:	4284      	cmpeq	r4, r0
1a002646:	d3ef      	bcc.n	1a002628 <delay+0x10>
}
1a002648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00264c:	10000590 	.word	0x10000590

1a002650 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a002650:	b510      	push	{r4, lr}
1a002652:	4604      	mov	r4, r0
   delay->duration = duration/tickRateMS;
1a002654:	4610      	mov	r0, r2
1a002656:	4619      	mov	r1, r3
1a002658:	4b04      	ldr	r3, [pc, #16]	; (1a00266c <delayInit+0x1c>)
1a00265a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00265e:	f001 f9d7 	bl	1a003a10 <__aeabi_uldivmod>
1a002662:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a002666:	2300      	movs	r3, #0
1a002668:	7423      	strb	r3, [r4, #16]
1a00266a:	bd10      	pop	{r4, pc}
1a00266c:	10000590 	.word	0x10000590

1a002670 <delayRead>:
}

bool_t delayRead( delay_t * delay )
{
1a002670:	b510      	push	{r4, lr}
1a002672:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a002674:	7c03      	ldrb	r3, [r0, #16]
1a002676:	b93b      	cbnz	r3, 1a002688 <delayRead+0x18>
      delay->startTime = tickRead();
1a002678:	f7ff fe6e 	bl	1a002358 <tickRead>
1a00267c:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a002680:	2301      	movs	r3, #1
1a002682:	7423      	strb	r3, [r4, #16]
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a002684:	2000      	movs	r0, #0
1a002686:	bd10      	pop	{r4, pc}

   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a002688:	f7ff fe66 	bl	1a002358 <tickRead>
1a00268c:	e9d4 2300 	ldrd	r2, r3, [r4]
1a002690:	1a80      	subs	r0, r0, r2
1a002692:	eb61 0103 	sbc.w	r1, r1, r3
1a002696:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a00269a:	4299      	cmp	r1, r3
1a00269c:	bf08      	it	eq
1a00269e:	4290      	cmpeq	r0, r2
1a0026a0:	d303      	bcc.n	1a0026aa <delayRead+0x3a>
         timeArrived = 1;
         delay->running = 0;
1a0026a2:	2300      	movs	r3, #0
1a0026a4:	7423      	strb	r3, [r4, #16]
   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
         timeArrived = 1;
1a0026a6:	2001      	movs	r0, #1
1a0026a8:	bd10      	pop	{r4, pc}
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a0026aa:	2000      	movs	r0, #0
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a0026ac:	bd10      	pop	{r4, pc}
1a0026ae:	bf00      	nop

1a0026b0 <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration )
{
1a0026b0:	b510      	push	{r4, lr}
1a0026b2:	4604      	mov	r4, r0
   delay->duration = duration/tickRateMS;
1a0026b4:	4610      	mov	r0, r2
1a0026b6:	4619      	mov	r1, r3
1a0026b8:	4b03      	ldr	r3, [pc, #12]	; (1a0026c8 <delayWrite+0x18>)
1a0026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0026be:	f001 f9a7 	bl	1a003a10 <__aeabi_uldivmod>
1a0026c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
1a0026c6:	bd10      	pop	{r4, pc}
1a0026c8:	10000590 	.word	0x10000590

1a0026cc <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a0026cc:	e7fe      	b.n	1a0026cc <errorOcurred>
1a0026ce:	bf00      	nop

1a0026d0 <doNothing>:
}

static void doNothing( void* ptr )
{
1a0026d0:	4770      	bx	lr
1a0026d2:	bf00      	nop

1a0026d4 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0026d4:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0026d6:	2400      	movs	r4, #0
1a0026d8:	e013      	b.n	1a002702 <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0026da:	4b0b      	ldr	r3, [pc, #44]	; (1a002708 <TIMER0_IRQHandler+0x34>)
1a0026dc:	681a      	ldr	r2, [r3, #0]
1a0026de:	f004 010f 	and.w	r1, r4, #15
1a0026e2:	2301      	movs	r3, #1
1a0026e4:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0026e6:	421a      	tst	r2, r3
1a0026e8:	d009      	beq.n	1a0026fe <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0026ea:	4b08      	ldr	r3, [pc, #32]	; (1a00270c <TIMER0_IRQHandler+0x38>)
1a0026ec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0026f0:	2000      	movs	r0, #0
1a0026f2:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0026f4:	b262      	sxtb	r2, r4
1a0026f6:	2301      	movs	r3, #1
1a0026f8:	4093      	lsls	r3, r2
1a0026fa:	4a03      	ldr	r2, [pc, #12]	; (1a002708 <TIMER0_IRQHandler+0x34>)
1a0026fc:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0026fe:	3401      	adds	r4, #1
1a002700:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002702:	2c03      	cmp	r4, #3
1a002704:	d9e9      	bls.n	1a0026da <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002706:	bd10      	pop	{r4, pc}
1a002708:	40084000 	.word	0x40084000
1a00270c:	10000054 	.word	0x10000054

1a002710 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a002710:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002712:	2400      	movs	r4, #0
1a002714:	e014      	b.n	1a002740 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002716:	4b0c      	ldr	r3, [pc, #48]	; (1a002748 <TIMER1_IRQHandler+0x38>)
1a002718:	681a      	ldr	r2, [r3, #0]
1a00271a:	f004 010f 	and.w	r1, r4, #15
1a00271e:	2301      	movs	r3, #1
1a002720:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a002722:	421a      	tst	r2, r3
1a002724:	d00a      	beq.n	1a00273c <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002726:	1d23      	adds	r3, r4, #4
1a002728:	4a08      	ldr	r2, [pc, #32]	; (1a00274c <TIMER1_IRQHandler+0x3c>)
1a00272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00272e:	2000      	movs	r0, #0
1a002730:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002732:	b262      	sxtb	r2, r4
1a002734:	2301      	movs	r3, #1
1a002736:	4093      	lsls	r3, r2
1a002738:	4a03      	ldr	r2, [pc, #12]	; (1a002748 <TIMER1_IRQHandler+0x38>)
1a00273a:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00273c:	3401      	adds	r4, #1
1a00273e:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002740:	2c03      	cmp	r4, #3
1a002742:	d9e8      	bls.n	1a002716 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a002744:	bd10      	pop	{r4, pc}
1a002746:	bf00      	nop
1a002748:	40085000 	.word	0x40085000
1a00274c:	10000054 	.word	0x10000054

1a002750 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a002750:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002752:	2400      	movs	r4, #0
1a002754:	e015      	b.n	1a002782 <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002756:	4b0c      	ldr	r3, [pc, #48]	; (1a002788 <TIMER2_IRQHandler+0x38>)
1a002758:	681a      	ldr	r2, [r3, #0]
1a00275a:	f004 010f 	and.w	r1, r4, #15
1a00275e:	2301      	movs	r3, #1
1a002760:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a002762:	421a      	tst	r2, r3
1a002764:	d00b      	beq.n	1a00277e <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002766:	f104 0308 	add.w	r3, r4, #8
1a00276a:	4a08      	ldr	r2, [pc, #32]	; (1a00278c <TIMER2_IRQHandler+0x3c>)
1a00276c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002770:	2000      	movs	r0, #0
1a002772:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002774:	b262      	sxtb	r2, r4
1a002776:	2301      	movs	r3, #1
1a002778:	4093      	lsls	r3, r2
1a00277a:	4a03      	ldr	r2, [pc, #12]	; (1a002788 <TIMER2_IRQHandler+0x38>)
1a00277c:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00277e:	3401      	adds	r4, #1
1a002780:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002782:	2c03      	cmp	r4, #3
1a002784:	d9e7      	bls.n	1a002756 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a002786:	bd10      	pop	{r4, pc}
1a002788:	400c3000 	.word	0x400c3000
1a00278c:	10000054 	.word	0x10000054

1a002790 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a002790:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002792:	2400      	movs	r4, #0
1a002794:	e015      	b.n	1a0027c2 <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002796:	4b0c      	ldr	r3, [pc, #48]	; (1a0027c8 <TIMER3_IRQHandler+0x38>)
1a002798:	681a      	ldr	r2, [r3, #0]
1a00279a:	f004 010f 	and.w	r1, r4, #15
1a00279e:	2301      	movs	r3, #1
1a0027a0:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0027a2:	421a      	tst	r2, r3
1a0027a4:	d00b      	beq.n	1a0027be <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0027a6:	f104 030c 	add.w	r3, r4, #12
1a0027aa:	4a08      	ldr	r2, [pc, #32]	; (1a0027cc <TIMER3_IRQHandler+0x3c>)
1a0027ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0027b0:	2000      	movs	r0, #0
1a0027b2:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0027b4:	b262      	sxtb	r2, r4
1a0027b6:	2301      	movs	r3, #1
1a0027b8:	4093      	lsls	r3, r2
1a0027ba:	4a03      	ldr	r2, [pc, #12]	; (1a0027c8 <TIMER3_IRQHandler+0x38>)
1a0027bc:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0027be:	3401      	adds	r4, #1
1a0027c0:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0027c2:	2c03      	cmp	r4, #3
1a0027c4:	d9e7      	bls.n	1a002796 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0027c6:	bd10      	pop	{r4, pc}
1a0027c8:	400c4000 	.word	0x400c4000
1a0027cc:	10000054 	.word	0x10000054

1a0027d0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0027d0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0027d2:	f000 fb67 	bl	1a002ea4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0027d6:	4b3a      	ldr	r3, [pc, #232]	; (1a0028c0 <boardInit+0xf0>)
1a0027d8:	6818      	ldr	r0, [r3, #0]
1a0027da:	f7ff fbe3 	bl	1a001fa4 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a0027de:	2001      	movs	r0, #1
1a0027e0:	2100      	movs	r1, #0
1a0027e2:	f7ff fdcb 	bl	1a00237c <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a0027e6:	2000      	movs	r0, #0
1a0027e8:	2105      	movs	r1, #5
1a0027ea:	f7ff fcbb 	bl	1a002164 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a0027ee:	2024      	movs	r0, #36	; 0x24
1a0027f0:	2100      	movs	r1, #0
1a0027f2:	f7ff fcb7 	bl	1a002164 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a0027f6:	2025      	movs	r0, #37	; 0x25
1a0027f8:	2100      	movs	r1, #0
1a0027fa:	f7ff fcb3 	bl	1a002164 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a0027fe:	2026      	movs	r0, #38	; 0x26
1a002800:	2100      	movs	r1, #0
1a002802:	f7ff fcaf 	bl	1a002164 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a002806:	2027      	movs	r0, #39	; 0x27
1a002808:	2100      	movs	r1, #0
1a00280a:	f7ff fcab 	bl	1a002164 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00280e:	2028      	movs	r0, #40	; 0x28
1a002810:	2101      	movs	r1, #1
1a002812:	f7ff fca7 	bl	1a002164 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a002816:	2029      	movs	r0, #41	; 0x29
1a002818:	2101      	movs	r1, #1
1a00281a:	f7ff fca3 	bl	1a002164 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00281e:	202a      	movs	r0, #42	; 0x2a
1a002820:	2101      	movs	r1, #1
1a002822:	f7ff fc9f 	bl	1a002164 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a002826:	202b      	movs	r0, #43	; 0x2b
1a002828:	2101      	movs	r1, #1
1a00282a:	f7ff fc9b 	bl	1a002164 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00282e:	202c      	movs	r0, #44	; 0x2c
1a002830:	2101      	movs	r1, #1
1a002832:	f7ff fc97 	bl	1a002164 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a002836:	202d      	movs	r0, #45	; 0x2d
1a002838:	2101      	movs	r1, #1
1a00283a:	f7ff fc93 	bl	1a002164 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00283e:	202e      	movs	r0, #46	; 0x2e
1a002840:	2100      	movs	r1, #0
1a002842:	f7ff fc8f 	bl	1a002164 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a002846:	202f      	movs	r0, #47	; 0x2f
1a002848:	2100      	movs	r1, #0
1a00284a:	f7ff fc8b 	bl	1a002164 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00284e:	2030      	movs	r0, #48	; 0x30
1a002850:	2100      	movs	r1, #0
1a002852:	f7ff fc87 	bl	1a002164 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a002856:	2031      	movs	r0, #49	; 0x31
1a002858:	2100      	movs	r1, #0
1a00285a:	f7ff fc83 	bl	1a002164 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00285e:	2032      	movs	r0, #50	; 0x32
1a002860:	2100      	movs	r1, #0
1a002862:	f7ff fc7f 	bl	1a002164 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a002866:	2033      	movs	r0, #51	; 0x33
1a002868:	2100      	movs	r1, #0
1a00286a:	f7ff fc7b 	bl	1a002164 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a00286e:	2034      	movs	r0, #52	; 0x34
1a002870:	2100      	movs	r1, #0
1a002872:	f7ff fc77 	bl	1a002164 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a002876:	2035      	movs	r0, #53	; 0x35
1a002878:	2100      	movs	r1, #0
1a00287a:	f7ff fc73 	bl	1a002164 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00287e:	2036      	movs	r0, #54	; 0x36
1a002880:	2101      	movs	r1, #1
1a002882:	f7ff fc6f 	bl	1a002164 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a002886:	2037      	movs	r0, #55	; 0x37
1a002888:	2101      	movs	r1, #1
1a00288a:	f7ff fc6b 	bl	1a002164 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00288e:	2038      	movs	r0, #56	; 0x38
1a002890:	2101      	movs	r1, #1
1a002892:	f7ff fc67 	bl	1a002164 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a002896:	2039      	movs	r0, #57	; 0x39
1a002898:	2101      	movs	r1, #1
1a00289a:	f7ff fc63 	bl	1a002164 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a00289e:	203a      	movs	r0, #58	; 0x3a
1a0028a0:	2101      	movs	r1, #1
1a0028a2:	f7ff fc5f 	bl	1a002164 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0028a6:	203b      	movs	r0, #59	; 0x3b
1a0028a8:	2101      	movs	r1, #1
1a0028aa:	f7ff fc5b 	bl	1a002164 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0028ae:	203c      	movs	r0, #60	; 0x3c
1a0028b0:	2101      	movs	r1, #1
1a0028b2:	f7ff fc57 	bl	1a002164 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a0028b6:	203d      	movs	r0, #61	; 0x3d
1a0028b8:	2101      	movs	r1, #1
1a0028ba:	f7ff fc53 	bl	1a002164 <gpioInit>
1a0028be:	bd08      	pop	{r3, pc}
1a0028c0:	10000598 	.word	0x10000598

1a0028c4 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a0028c4:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0028c6:	2200      	movs	r2, #0
1a0028c8:	e014      	b.n	1a0028f4 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0028ca:	4b0c      	ldr	r3, [pc, #48]	; (1a0028fc <Board_LED_Init+0x38>)
1a0028cc:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a0028d0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a0028d4:	7859      	ldrb	r1, [r3, #1]
1a0028d6:	480a      	ldr	r0, [pc, #40]	; (1a002900 <Board_LED_Init+0x3c>)
1a0028d8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0028dc:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a0028e0:	2301      	movs	r3, #1
1a0028e2:	408b      	lsls	r3, r1
1a0028e4:	4333      	orrs	r3, r6
1a0028e6:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0028ea:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a0028ee:	2300      	movs	r3, #0
1a0028f0:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0028f2:	3201      	adds	r2, #1
1a0028f4:	2a05      	cmp	r2, #5
1a0028f6:	d9e8      	bls.n	1a0028ca <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0028f8:	bc70      	pop	{r4, r5, r6}
1a0028fa:	4770      	bx	lr
1a0028fc:	1a004244 	.word	0x1a004244
1a002900:	400f4000 	.word	0x400f4000

1a002904 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a002904:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002906:	2300      	movs	r3, #0
1a002908:	e011      	b.n	1a00292e <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00290a:	490b      	ldr	r1, [pc, #44]	; (1a002938 <Board_TEC_Init+0x34>)
1a00290c:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002910:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002914:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002916:	4c09      	ldr	r4, [pc, #36]	; (1a00293c <Board_TEC_Init+0x38>)
1a002918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00291c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a002920:	2101      	movs	r1, #1
1a002922:	40a9      	lsls	r1, r5
1a002924:	ea20 0101 	bic.w	r1, r0, r1
1a002928:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00292c:	3301      	adds	r3, #1
1a00292e:	2b03      	cmp	r3, #3
1a002930:	d9eb      	bls.n	1a00290a <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a002932:	bc30      	pop	{r4, r5}
1a002934:	4770      	bx	lr
1a002936:	bf00      	nop
1a002938:	1a00423c 	.word	0x1a00423c
1a00293c:	400f4000 	.word	0x400f4000

1a002940 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a002940:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002942:	2300      	movs	r3, #0
1a002944:	e011      	b.n	1a00296a <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002946:	490b      	ldr	r1, [pc, #44]	; (1a002974 <Board_GPIO_Init+0x34>)
1a002948:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00294c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002950:	784d      	ldrb	r5, [r1, #1]
1a002952:	4c09      	ldr	r4, [pc, #36]	; (1a002978 <Board_GPIO_Init+0x38>)
1a002954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002958:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a00295c:	2101      	movs	r1, #1
1a00295e:	40a9      	lsls	r1, r5
1a002960:	ea20 0101 	bic.w	r1, r0, r1
1a002964:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002968:	3301      	adds	r3, #1
1a00296a:	2b08      	cmp	r3, #8
1a00296c:	d9eb      	bls.n	1a002946 <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a00296e:	bc30      	pop	{r4, r5}
1a002970:	4770      	bx	lr
1a002972:	bf00      	nop
1a002974:	1a004220 	.word	0x1a004220
1a002978:	400f4000 	.word	0x400f4000

1a00297c <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a00297c:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00297e:	4c0b      	ldr	r4, [pc, #44]	; (1a0029ac <Board_SPI_Init+0x30>)
1a002980:	4620      	mov	r0, r4
1a002982:	f000 ffab 	bl	1a0038dc <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002986:	6863      	ldr	r3, [r4, #4]
1a002988:	f023 0304 	bic.w	r3, r3, #4
1a00298c:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00298e:	6823      	ldr	r3, [r4, #0]
1a002990:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002994:	f043 0307 	orr.w	r3, r3, #7
1a002998:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00299a:	4620      	mov	r0, r4
1a00299c:	4904      	ldr	r1, [pc, #16]	; (1a0029b0 <Board_SPI_Init+0x34>)
1a00299e:	f000 ff7d 	bl	1a00389c <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0029a2:	6863      	ldr	r3, [r4, #4]
1a0029a4:	f043 0302 	orr.w	r3, r3, #2
1a0029a8:	6063      	str	r3, [r4, #4]
1a0029aa:	bd10      	pop	{r4, pc}
1a0029ac:	400c5000 	.word	0x400c5000
1a0029b0:	000186a0 	.word	0x000186a0

1a0029b4 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a0029b4:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0029b6:	2000      	movs	r0, #0
1a0029b8:	f000 ffbc 	bl	1a003934 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0029bc:	f640 0208 	movw	r2, #2056	; 0x808
1a0029c0:	4b03      	ldr	r3, [pc, #12]	; (1a0029d0 <Board_I2C_Init+0x1c>)
1a0029c2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0029c6:	2000      	movs	r0, #0
1a0029c8:	4902      	ldr	r1, [pc, #8]	; (1a0029d4 <Board_I2C_Init+0x20>)
1a0029ca:	f000 ffc5 	bl	1a003958 <Chip_I2C_SetClockRate>
1a0029ce:	bd08      	pop	{r3, pc}
1a0029d0:	40086000 	.word	0x40086000
1a0029d4:	000f4240 	.word	0x000f4240

1a0029d8 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0029d8:	b510      	push	{r4, lr}
1a0029da:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a0029dc:	4c08      	ldr	r4, [pc, #32]	; (1a002a00 <Board_ADC_Init+0x28>)
1a0029de:	4620      	mov	r0, r4
1a0029e0:	4669      	mov	r1, sp
1a0029e2:	f000 f9ad 	bl	1a002d40 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0029e6:	4620      	mov	r0, r4
1a0029e8:	4669      	mov	r1, sp
1a0029ea:	4a06      	ldr	r2, [pc, #24]	; (1a002a04 <Board_ADC_Init+0x2c>)
1a0029ec:	f000 fa14 	bl	1a002e18 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0029f0:	4620      	mov	r0, r4
1a0029f2:	4669      	mov	r1, sp
1a0029f4:	2200      	movs	r2, #0
1a0029f6:	f000 fa29 	bl	1a002e4c <Chip_ADC_SetResolution>
}
1a0029fa:	b002      	add	sp, #8
1a0029fc:	bd10      	pop	{r4, pc}
1a0029fe:	bf00      	nop
1a002a00:	400e3000 	.word	0x400e3000
1a002a04:	00061a80 	.word	0x00061a80

1a002a08 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002a08:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002a0a:	4c07      	ldr	r4, [pc, #28]	; (1a002a28 <Board_Debug_Init+0x20>)
1a002a0c:	4620      	mov	r0, r4
1a002a0e:	f000 f8a5 	bl	1a002b5c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002a12:	4620      	mov	r0, r4
1a002a14:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002a18:	f000 f8ea 	bl	1a002bf0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002a1c:	2303      	movs	r3, #3
1a002a1e:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a002a20:	2301      	movs	r3, #1
1a002a22:	65e3      	str	r3, [r4, #92]	; 0x5c
1a002a24:	bd10      	pop	{r4, pc}
1a002a26:	bf00      	nop
1a002a28:	400c1000 	.word	0x400c1000

1a002a2c <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002a2c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002a2e:	f7ff ffeb 	bl	1a002a08 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002a32:	480b      	ldr	r0, [pc, #44]	; (1a002a60 <Board_Init+0x34>)
1a002a34:	f000 fe72 	bl	1a00371c <Chip_GPIO_Init>

   Board_LED_Init();
1a002a38:	f7ff ff44 	bl	1a0028c4 <Board_LED_Init>
   Board_TEC_Init();
1a002a3c:	f7ff ff62 	bl	1a002904 <Board_TEC_Init>
   Board_SPI_Init();
1a002a40:	f7ff ff9c 	bl	1a00297c <Board_SPI_Init>
   Board_GPIO_Init();
1a002a44:	f7ff ff7c 	bl	1a002940 <Board_GPIO_Init>
   Board_I2C_Init();
1a002a48:	f7ff ffb4 	bl	1a0029b4 <Board_I2C_Init>
   Board_ADC_Init();
1a002a4c:	f7ff ffc4 	bl	1a0029d8 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a002a50:	4a04      	ldr	r2, [pc, #16]	; (1a002a64 <Board_Init+0x38>)
1a002a52:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a002a56:	f043 0304 	orr.w	r3, r3, #4
1a002a5a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a002a5e:	bd08      	pop	{r3, pc}
1a002a60:	400f4000 	.word	0x400f4000
1a002a64:	40043000 	.word	0x40043000

1a002a68 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a002a68:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a002a6a:	4b04      	ldr	r3, [pc, #16]	; (1a002a7c <SystemInit+0x14>)
1a002a6c:	4a04      	ldr	r2, [pc, #16]	; (1a002a80 <SystemInit+0x18>)
1a002a6e:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a002a70:	f000 fda6 	bl	1a0035c0 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a002a74:	f000 f856 	bl	1a002b24 <Board_SystemInit>
1a002a78:	bd08      	pop	{r3, pc}
1a002a7a:	bf00      	nop
1a002a7c:	e000ed08 	.word	0xe000ed08
1a002a80:	1a000000 	.word	0x1a000000

1a002a84 <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a002a84:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002a86:	2300      	movs	r3, #0
1a002a88:	e00c      	b.n	1a002aa4 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002a8a:	4a09      	ldr	r2, [pc, #36]	; (1a002ab0 <Board_SetupMuxing+0x2c>)
1a002a8c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002a90:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002a94:	784a      	ldrb	r2, [r1, #1]
1a002a96:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002a98:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002a9c:	4905      	ldr	r1, [pc, #20]	; (1a002ab4 <Board_SetupMuxing+0x30>)
1a002a9e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002aa2:	3301      	adds	r3, #1
1a002aa4:	2b25      	cmp	r3, #37	; 0x25
1a002aa6:	d9f0      	bls.n	1a002a8a <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002aac:	4770      	bx	lr
1a002aae:	bf00      	nop
1a002ab0:	1a00425c 	.word	0x1a00425c
1a002ab4:	40086000 	.word	0x40086000

1a002ab8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002ab8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002aba:	4a17      	ldr	r2, [pc, #92]	; (1a002b18 <Board_SetupClocking+0x60>)
1a002abc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002ac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002ac4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002ac8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002acc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002ad0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002ad4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002ad8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002adc:	2006      	movs	r0, #6
1a002ade:	490f      	ldr	r1, [pc, #60]	; (1a002b1c <Board_SetupClocking+0x64>)
1a002ae0:	2201      	movs	r2, #1
1a002ae2:	f000 fcc5 	bl	1a003470 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002ae6:	2400      	movs	r4, #0
1a002ae8:	e00a      	b.n	1a002b00 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002aea:	4a0d      	ldr	r2, [pc, #52]	; (1a002b20 <Board_SetupClocking+0x68>)
1a002aec:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a002af0:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a002af4:	7859      	ldrb	r1, [r3, #1]
1a002af6:	789a      	ldrb	r2, [r3, #2]
1a002af8:	78db      	ldrb	r3, [r3, #3]
1a002afa:	f000 fbfb 	bl	1a0032f4 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002afe:	3401      	adds	r4, #1
1a002b00:	2c02      	cmp	r4, #2
1a002b02:	d9f2      	bls.n	1a002aea <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002b04:	4b04      	ldr	r3, [pc, #16]	; (1a002b18 <Board_SetupClocking+0x60>)
1a002b06:	685a      	ldr	r2, [r3, #4]
1a002b08:	f022 020c 	bic.w	r2, r2, #12
1a002b0c:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002b0e:	685a      	ldr	r2, [r3, #4]
1a002b10:	f042 0203 	orr.w	r2, r2, #3
1a002b14:	605a      	str	r2, [r3, #4]
1a002b16:	bd10      	pop	{r4, pc}
1a002b18:	40043000 	.word	0x40043000
1a002b1c:	0c28cb00 	.word	0x0c28cb00
1a002b20:	1a004250 	.word	0x1a004250

1a002b24 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002b24:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002b26:	f7ff ffad 	bl	1a002a84 <Board_SetupMuxing>
    Board_SetupClocking();
1a002b2a:	f7ff ffc5 	bl	1a002ab8 <Board_SetupClocking>
1a002b2e:	bd08      	pop	{r3, pc}

1a002b30 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002b30:	4b09      	ldr	r3, [pc, #36]	; (1a002b58 <Chip_UART_GetIndex+0x28>)
1a002b32:	4298      	cmp	r0, r3
1a002b34:	d009      	beq.n	1a002b4a <Chip_UART_GetIndex+0x1a>
1a002b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002b3a:	4298      	cmp	r0, r3
1a002b3c:	d007      	beq.n	1a002b4e <Chip_UART_GetIndex+0x1e>
1a002b3e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002b42:	4298      	cmp	r0, r3
1a002b44:	d005      	beq.n	1a002b52 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002b46:	2000      	movs	r0, #0
1a002b48:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002b4a:	2002      	movs	r0, #2
1a002b4c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002b4e:	2003      	movs	r0, #3
1a002b50:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a002b52:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a002b54:	4770      	bx	lr
1a002b56:	bf00      	nop
1a002b58:	400c1000 	.word	0x400c1000

1a002b5c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002b5c:	b510      	push	{r4, lr}
1a002b5e:	b082      	sub	sp, #8
1a002b60:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002b62:	f7ff ffe5 	bl	1a002b30 <Chip_UART_GetIndex>
1a002b66:	4b10      	ldr	r3, [pc, #64]	; (1a002ba8 <Chip_UART_Init+0x4c>)
1a002b68:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002b6c:	2101      	movs	r1, #1
1a002b6e:	460a      	mov	r2, r1
1a002b70:	460b      	mov	r3, r1
1a002b72:	f000 fbf9 	bl	1a003368 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a002b76:	2307      	movs	r3, #7
1a002b78:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a002b7a:	2300      	movs	r3, #0
1a002b7c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002b7e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002b80:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002b82:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002b84:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002b86:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002b88:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002b8a:	4b08      	ldr	r3, [pc, #32]	; (1a002bac <Chip_UART_Init+0x50>)
1a002b8c:	429c      	cmp	r4, r3
1a002b8e:	d103      	bne.n	1a002b98 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a002b90:	2300      	movs	r3, #0
1a002b92:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a002b94:	69a3      	ldr	r3, [r4, #24]
1a002b96:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002b98:	2303      	movs	r3, #3
1a002b9a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002b9c:	2310      	movs	r3, #16
1a002b9e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002ba0:	9b01      	ldr	r3, [sp, #4]
}
1a002ba2:	b002      	add	sp, #8
1a002ba4:	bd10      	pop	{r4, pc}
1a002ba6:	bf00      	nop
1a002ba8:	1a0042fc 	.word	0x1a0042fc
1a002bac:	40082000 	.word	0x40082000

1a002bb0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002bb0:	b538      	push	{r3, r4, r5, lr}
1a002bb2:	4605      	mov	r5, r0
1a002bb4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002bb6:	f7ff ffbb 	bl	1a002b30 <Chip_UART_GetIndex>
1a002bba:	4b0c      	ldr	r3, [pc, #48]	; (1a002bec <Chip_UART_SetBaud+0x3c>)
1a002bbc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002bc0:	f000 fc30 	bl	1a003424 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002bc4:	0124      	lsls	r4, r4, #4
1a002bc6:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002bca:	68ea      	ldr	r2, [r5, #12]
1a002bcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002bd0:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a002bd2:	b2da      	uxtb	r2, r3
1a002bd4:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a002bd6:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a002bda:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002bdc:	68ea      	ldr	r2, [r5, #12]
1a002bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002be2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002be4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002be8:	0900      	lsrs	r0, r0, #4
1a002bea:	bd38      	pop	{r3, r4, r5, pc}
1a002bec:	1a0042f4 	.word	0x1a0042f4

1a002bf0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002bf4:	b083      	sub	sp, #12
1a002bf6:	4683      	mov	fp, r0
1a002bf8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002bfa:	f7ff ff99 	bl	1a002b30 <Chip_UART_GetIndex>
1a002bfe:	4b34      	ldr	r3, [pc, #208]	; (1a002cd0 <Chip_UART_SetBaudFDR+0xe0>)
1a002c00:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002c04:	f000 fc0e 	bl	1a003424 <Chip_Clock_GetRate>
1a002c08:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a002c0a:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002c0e:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002c10:	2300      	movs	r3, #0
1a002c12:	9301      	str	r3, [sp, #4]
1a002c14:	46a2      	mov	sl, r4
1a002c16:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002c18:	e029      	b.n	1a002c6e <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002c1a:	2300      	movs	r3, #0
1a002c1c:	0932      	lsrs	r2, r6, #4
1a002c1e:	0730      	lsls	r0, r6, #28
1a002c20:	fba0 0104 	umull	r0, r1, r0, r4
1a002c24:	fb04 1102 	mla	r1, r4, r2, r1
1a002c28:	1962      	adds	r2, r4, r5
1a002c2a:	fb08 f202 	mul.w	r2, r8, r2
1a002c2e:	f000 feef 	bl	1a003a10 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a002c32:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a002c34:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a002c36:	2800      	cmp	r0, #0
1a002c38:	da01      	bge.n	1a002c3e <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a002c3a:	4243      	negs	r3, r0
				div ++;
1a002c3c:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002c3e:	429f      	cmp	r7, r3
1a002c40:	d30a      	bcc.n	1a002c58 <Chip_UART_SetBaudFDR+0x68>
1a002c42:	b14a      	cbz	r2, 1a002c58 <Chip_UART_SetBaudFDR+0x68>
1a002c44:	0c11      	lsrs	r1, r2, #16
1a002c46:	d107      	bne.n	1a002c58 <Chip_UART_SetBaudFDR+0x68>
1a002c48:	2a02      	cmp	r2, #2
1a002c4a:	d800      	bhi.n	1a002c4e <Chip_UART_SetBaudFDR+0x5e>
1a002c4c:	b925      	cbnz	r5, 1a002c58 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002c4e:	b14b      	cbz	r3, 1a002c64 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a002c50:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a002c52:	9501      	str	r5, [sp, #4]
			sm = m;
1a002c54:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a002c56:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a002c58:	3501      	adds	r5, #1
1a002c5a:	e000      	b.n	1a002c5e <Chip_UART_SetBaudFDR+0x6e>
1a002c5c:	2500      	movs	r5, #0
1a002c5e:	42a5      	cmp	r5, r4
1a002c60:	d3db      	bcc.n	1a002c1a <Chip_UART_SetBaudFDR+0x2a>
1a002c62:	e003      	b.n	1a002c6c <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a002c64:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a002c66:	9501      	str	r5, [sp, #4]
			sm = m;
1a002c68:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a002c6a:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002c6c:	3401      	adds	r4, #1
1a002c6e:	b10f      	cbz	r7, 1a002c74 <Chip_UART_SetBaudFDR+0x84>
1a002c70:	2c0f      	cmp	r4, #15
1a002c72:	d9f3      	bls.n	1a002c5c <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002c74:	f1b9 0f00 	cmp.w	r9, #0
1a002c78:	d026      	beq.n	1a002cc8 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002c7a:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002c82:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a002c86:	fa5f f389 	uxtb.w	r3, r9
1a002c8a:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a002c8e:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a002c92:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002c96:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002c9e:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002ca2:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002ca6:	b2da      	uxtb	r2, r3
1a002ca8:	9901      	ldr	r1, [sp, #4]
1a002caa:	f001 030f 	and.w	r3, r1, #15
1a002cae:	4313      	orrs	r3, r2
1a002cb0:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002cb4:	0933      	lsrs	r3, r6, #4
1a002cb6:	fb0a f303 	mul.w	r3, sl, r3
1a002cba:	eb0a 0001 	add.w	r0, sl, r1
1a002cbe:	fb09 f000 	mul.w	r0, r9, r0
1a002cc2:	fbb3 f0f0 	udiv	r0, r3, r0
1a002cc6:	e000      	b.n	1a002cca <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a002cc8:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a002cca:	b003      	add	sp, #12
1a002ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002cd0:	1a0042f4 	.word	0x1a0042f4

1a002cd4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002cd4:	4b03      	ldr	r3, [pc, #12]	; (1a002ce4 <Chip_ADC_GetClockIndex+0x10>)
1a002cd6:	4298      	cmp	r0, r3
1a002cd8:	d101      	bne.n	1a002cde <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a002cda:	2004      	movs	r0, #4
1a002cdc:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002cde:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002ce0:	4770      	bx	lr
1a002ce2:	bf00      	nop
1a002ce4:	400e4000 	.word	0x400e4000

1a002ce8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002ce8:	b570      	push	{r4, r5, r6, lr}
1a002cea:	460d      	mov	r5, r1
1a002cec:	4614      	mov	r4, r2
1a002cee:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002cf0:	f7ff fff0 	bl	1a002cd4 <Chip_ADC_GetClockIndex>
1a002cf4:	f000 fb96 	bl	1a003424 <Chip_Clock_GetRate>
	if (burstMode) {
1a002cf8:	b115      	cbz	r5, 1a002d00 <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a002cfa:	fb04 f406 	mul.w	r4, r4, r6
1a002cfe:	e003      	b.n	1a002d08 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002d00:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002d04:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002d08:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002d0c:	0064      	lsls	r4, r4, #1
1a002d0e:	fbb0 f4f4 	udiv	r4, r0, r4
1a002d12:	1e60      	subs	r0, r4, #1
	return div;
}
1a002d14:	b2c0      	uxtb	r0, r0
1a002d16:	bd70      	pop	{r4, r5, r6, pc}

1a002d18 <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a002d18:	6803      	ldr	r3, [r0, #0]
1a002d1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a002d1e:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a002d22:	6001      	str	r1, [r0, #0]
1a002d24:	4770      	bx	lr
1a002d26:	bf00      	nop

1a002d28 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a002d28:	3104      	adds	r1, #4
1a002d2a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a002d2e:	2b00      	cmp	r3, #0
1a002d30:	da04      	bge.n	1a002d3c <readAdcVal+0x14>
		return ERROR;
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a002d32:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a002d36:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a002d38:	2001      	movs	r0, #1
1a002d3a:	4770      	bx	lr
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
	if (!ADC_DR_DONE(temp)) {
		return ERROR;
1a002d3c:	2000      	movs	r0, #0
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
	return SUCCESS;
}
1a002d3e:	4770      	bx	lr

1a002d40 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002d40:	b538      	push	{r3, r4, r5, lr}
1a002d42:	4605      	mov	r5, r0
1a002d44:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002d46:	f7ff ffc5 	bl	1a002cd4 <Chip_ADC_GetClockIndex>
1a002d4a:	2101      	movs	r1, #1
1a002d4c:	460a      	mov	r2, r1
1a002d4e:	460b      	mov	r3, r1
1a002d50:	f000 fb0a 	bl	1a003368 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002d54:	2100      	movs	r1, #0
1a002d56:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002d58:	4a08      	ldr	r2, [pc, #32]	; (1a002d7c <Chip_ADC_Init+0x3c>)
1a002d5a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002d5c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002d5e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002d60:	4628      	mov	r0, r5
1a002d62:	230b      	movs	r3, #11
1a002d64:	f7ff ffc0 	bl	1a002ce8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002d68:	0200      	lsls	r0, r0, #8
1a002d6a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002d6e:	7920      	ldrb	r0, [r4, #4]
1a002d70:	f000 0007 	and.w	r0, r0, #7
1a002d74:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a002d78:	6028      	str	r0, [r5, #0]
1a002d7a:	bd38      	pop	{r3, r4, r5, pc}
1a002d7c:	00061a80 	.word	0x00061a80

1a002d80 <Chip_ADC_DeInit>:
}

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a002d80:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a002d82:	f44f 7280 	mov.w	r2, #256	; 0x100
1a002d86:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a002d88:	2200      	movs	r2, #0
1a002d8a:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a002d8c:	f7ff ffa2 	bl	1a002cd4 <Chip_ADC_GetClockIndex>
1a002d90:	f000 fb2e 	bl	1a0033f0 <Chip_Clock_Disable>
1a002d94:	bd08      	pop	{r3, pc}
1a002d96:	bf00      	nop

1a002d98 <Chip_ADC_ReadValue>:
}

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a002d98:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a002d9a:	f7ff ffc5 	bl	1a002d28 <readAdcVal>
}
1a002d9e:	bd08      	pop	{r3, pc}

1a002da0 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a002da0:	2a01      	cmp	r2, #1
1a002da2:	d009      	beq.n	1a002db8 <Chip_ADC_ReadStatus+0x18>
1a002da4:	b112      	cbz	r2, 1a002dac <Chip_ADC_ReadStatus+0xc>
1a002da6:	2a02      	cmp	r2, #2
1a002da8:	d00e      	beq.n	1a002dc8 <Chip_ADC_ReadStatus+0x28>
1a002daa:	e013      	b.n	1a002dd4 <Chip_ADC_ReadStatus+0x34>
	case ADC_DR_DONE_STAT:
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a002dac:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002dae:	40c8      	lsrs	r0, r1
1a002db0:	f000 0001 	and.w	r0, r0, #1
1a002db4:	b2c0      	uxtb	r0, r0
1a002db6:	4770      	bx	lr

	case ADC_DR_OVERRUN_STAT:
		channel += 8;
1a002db8:	3108      	adds	r1, #8
1a002dba:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a002dbc:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002dbe:	40c8      	lsrs	r0, r1
1a002dc0:	f000 0001 	and.w	r0, r0, #1
1a002dc4:	b2c0      	uxtb	r0, r0
1a002dc6:	4770      	bx	lr

	case ADC_DR_ADINT_STAT:
		return pADC->STAT >> 16 ? SET : RESET;
1a002dc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a002dca:	0c1b      	lsrs	r3, r3, #16
1a002dcc:	bf14      	ite	ne
1a002dce:	2001      	movne	r0, #1
1a002dd0:	2000      	moveq	r0, #0
1a002dd2:	4770      	bx	lr

	default:
		break;
	}
	return RESET;
1a002dd4:	2000      	movs	r0, #0
}
1a002dd6:	4770      	bx	lr

1a002dd8 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a002dd8:	2a01      	cmp	r2, #1
1a002dda:	d105      	bne.n	1a002de8 <Chip_ADC_Int_SetChannelCmd+0x10>
		pADC->INTEN |= (1UL << channel);
1a002ddc:	68c2      	ldr	r2, [r0, #12]
1a002dde:	2301      	movs	r3, #1
1a002de0:	408b      	lsls	r3, r1
1a002de2:	4313      	orrs	r3, r2
1a002de4:	60c3      	str	r3, [r0, #12]
1a002de6:	4770      	bx	lr
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a002de8:	68c2      	ldr	r2, [r0, #12]
1a002dea:	2301      	movs	r3, #1
1a002dec:	408b      	lsls	r3, r1
1a002dee:	ea22 0303 	bic.w	r3, r2, r3
1a002df2:	60c3      	str	r3, [r0, #12]
1a002df4:	4770      	bx	lr
1a002df6:	bf00      	nop

1a002df8 <Chip_ADC_SetStartMode>:
	}
}

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a002df8:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a002dfa:	2901      	cmp	r1, #1
1a002dfc:	d909      	bls.n	1a002e12 <Chip_ADC_SetStartMode+0x1a>
		if (EdgeOption) {
1a002dfe:	b122      	cbz	r2, 1a002e0a <Chip_ADC_SetStartMode+0x12>
			pADC->CR |= ADC_CR_EDGE;
1a002e00:	6803      	ldr	r3, [r0, #0]
1a002e02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a002e06:	6003      	str	r3, [r0, #0]
1a002e08:	e003      	b.n	1a002e12 <Chip_ADC_SetStartMode+0x1a>
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a002e0a:	6803      	ldr	r3, [r0, #0]
1a002e0c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a002e10:	6003      	str	r3, [r0, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a002e12:	f7ff ff81 	bl	1a002d18 <setStartMode>
1a002e16:	bd08      	pop	{r3, pc}

1a002e18 <Chip_ADC_SetSampleRate>:
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002e18:	b570      	push	{r4, r5, r6, lr}
1a002e1a:	4606      	mov	r6, r0
1a002e1c:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002e1e:	6804      	ldr	r4, [r0, #0]
1a002e20:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002e24:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002e28:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002e2a:	790b      	ldrb	r3, [r1, #4]
1a002e2c:	f1c3 030b 	rsb	r3, r3, #11
1a002e30:	7949      	ldrb	r1, [r1, #5]
1a002e32:	b2db      	uxtb	r3, r3
1a002e34:	f7ff ff58 	bl	1a002ce8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002e38:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002e3c:	792c      	ldrb	r4, [r5, #4]
1a002e3e:	f004 0407 	and.w	r4, r4, #7
1a002e42:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a002e46:	6030      	str	r0, [r6, #0]
1a002e48:	bd70      	pop	{r4, r5, r6, pc}
1a002e4a:	bf00      	nop

1a002e4c <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002e4c:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002e4e:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002e50:	680a      	ldr	r2, [r1, #0]
1a002e52:	f7ff ffe1 	bl	1a002e18 <Chip_ADC_SetSampleRate>
1a002e56:	bd08      	pop	{r3, pc}

1a002e58 <Chip_ADC_EnableChannel>:
}

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a002e58:	2a01      	cmp	r2, #1
1a002e5a:	d105      	bne.n	1a002e68 <Chip_ADC_EnableChannel+0x10>
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a002e5c:	6802      	ldr	r2, [r0, #0]
1a002e5e:	2301      	movs	r3, #1
1a002e60:	408b      	lsls	r3, r1
1a002e62:	4313      	orrs	r3, r2
1a002e64:	6003      	str	r3, [r0, #0]
1a002e66:	4770      	bx	lr
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a002e68:	6803      	ldr	r3, [r0, #0]
1a002e6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a002e6e:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a002e70:	6802      	ldr	r2, [r0, #0]
1a002e72:	2301      	movs	r3, #1
1a002e74:	408b      	lsls	r3, r1
1a002e76:	ea22 0303 	bic.w	r3, r2, r3
1a002e7a:	6003      	str	r3, [r0, #0]
1a002e7c:	4770      	bx	lr
1a002e7e:	bf00      	nop

1a002e80 <Chip_ADC_SetBurstCmd>:
	}
}

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a002e80:	b538      	push	{r3, r4, r5, lr}
1a002e82:	4604      	mov	r4, r0
1a002e84:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a002e86:	2100      	movs	r1, #0
1a002e88:	f7ff ff46 	bl	1a002d18 <setStartMode>
	
    if (NewState == DISABLE) {
1a002e8c:	b925      	cbnz	r5, 1a002e98 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
1a002e8e:	6823      	ldr	r3, [r4, #0]
1a002e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a002e94:	6023      	str	r3, [r4, #0]
1a002e96:	bd38      	pop	{r3, r4, r5, pc}
	}
	else {
		pADC->CR |= ADC_CR_BURST;
1a002e98:	6823      	ldr	r3, [r4, #0]
1a002e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a002e9e:	6023      	str	r3, [r4, #0]
1a002ea0:	bd38      	pop	{r3, r4, r5, pc}
1a002ea2:	bf00      	nop

1a002ea4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002ea4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002ea6:	2069      	movs	r0, #105	; 0x69
1a002ea8:	f000 fabc 	bl	1a003424 <Chip_Clock_GetRate>
1a002eac:	4b01      	ldr	r3, [pc, #4]	; (1a002eb4 <SystemCoreClockUpdate+0x10>)
1a002eae:	6018      	str	r0, [r3, #0]
1a002eb0:	bd08      	pop	{r3, pc}
1a002eb2:	bf00      	nop
1a002eb4:	10000598 	.word	0x10000598

1a002eb8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002eb8:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002eba:	680b      	ldr	r3, [r1, #0]
1a002ebc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002ec0:	d002      	beq.n	1a002ec8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002ec6:	600b      	str	r3, [r1, #0]
1a002ec8:	4686      	mov	lr, r0
1a002eca:	2601      	movs	r6, #1
1a002ecc:	e041      	b.n	1a002f52 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a002ece:	680d      	ldr	r5, [r1, #0]
1a002ed0:	f015 0f40 	tst.w	r5, #64	; 0x40
1a002ed4:	d008      	beq.n	1a002ee8 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002ed6:	1c7b      	adds	r3, r7, #1
1a002ed8:	fa04 f203 	lsl.w	r2, r4, r3
1a002edc:	694b      	ldr	r3, [r1, #20]
1a002ede:	fb03 f302 	mul.w	r3, r3, r2
1a002ee2:	fbb3 f3f6 	udiv	r3, r3, r6
1a002ee6:	e004      	b.n	1a002ef2 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a002ee8:	694b      	ldr	r3, [r1, #20]
1a002eea:	fb04 f303 	mul.w	r3, r4, r3
1a002eee:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002ef2:	4a19      	ldr	r2, [pc, #100]	; (1a002f58 <pll_calc_divs+0xa0>)
1a002ef4:	4293      	cmp	r3, r2
1a002ef6:	d920      	bls.n	1a002f3a <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002ef8:	4a18      	ldr	r2, [pc, #96]	; (1a002f5c <pll_calc_divs+0xa4>)
1a002efa:	4293      	cmp	r3, r2
1a002efc:	d823      	bhi.n	1a002f46 <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a002efe:	f015 0f80 	tst.w	r5, #128	; 0x80
1a002f02:	d103      	bne.n	1a002f0c <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a002f04:	1c7a      	adds	r2, r7, #1
1a002f06:	fa23 f202 	lsr.w	r2, r3, r2
1a002f0a:	e000      	b.n	1a002f0e <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002f0c:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002f0e:	1a85      	subs	r5, r0, r2
1a002f10:	d502      	bpl.n	1a002f18 <pll_calc_divs+0x60>
		return -val;
1a002f12:	f1c5 0c00 	rsb	ip, r5, #0
1a002f16:	e000      	b.n	1a002f1a <pll_calc_divs+0x62>
	return val;
1a002f18:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a002f1a:	45e6      	cmp	lr, ip
1a002f1c:	d90d      	bls.n	1a002f3a <pll_calc_divs+0x82>
					ppll->nsel = n;
1a002f1e:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a002f20:	f107 0e01 	add.w	lr, r7, #1
1a002f24:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a002f28:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a002f2a:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a002f2c:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002f2e:	2d00      	cmp	r5, #0
1a002f30:	da02      	bge.n	1a002f38 <pll_calc_divs+0x80>
		return -val;
1a002f32:	f1c5 0e00 	rsb	lr, r5, #0
1a002f36:	e000      	b.n	1a002f3a <pll_calc_divs+0x82>
	return val;
1a002f38:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a002f3a:	3401      	adds	r4, #1
1a002f3c:	e000      	b.n	1a002f40 <pll_calc_divs+0x88>
1a002f3e:	2401      	movs	r4, #1
1a002f40:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a002f44:	ddc3      	ble.n	1a002ece <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002f46:	3701      	adds	r7, #1
1a002f48:	e000      	b.n	1a002f4c <pll_calc_divs+0x94>
1a002f4a:	2700      	movs	r7, #0
1a002f4c:	2f03      	cmp	r7, #3
1a002f4e:	ddf6      	ble.n	1a002f3e <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a002f50:	3601      	adds	r6, #1
1a002f52:	2e04      	cmp	r6, #4
1a002f54:	ddf9      	ble.n	1a002f4a <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a002f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002f58:	094c5eff 	.word	0x094c5eff
1a002f5c:	1312d000 	.word	0x1312d000

1a002f60 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002f60:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002f62:	b099      	sub	sp, #100	; 0x64
1a002f64:	4605      	mov	r5, r0
1a002f66:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002f68:	4668      	mov	r0, sp
1a002f6a:	2100      	movs	r1, #0
1a002f6c:	2260      	movs	r2, #96	; 0x60
1a002f6e:	f001 f843 	bl	1a003ff8 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002f72:	2380      	movs	r3, #128	; 0x80
1a002f74:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002f76:	6963      	ldr	r3, [r4, #20]
1a002f78:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002f7a:	7923      	ldrb	r3, [r4, #4]
1a002f7c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002f80:	4628      	mov	r0, r5
1a002f82:	4669      	mov	r1, sp
1a002f84:	f7ff ff98 	bl	1a002eb8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002f88:	9b06      	ldr	r3, [sp, #24]
1a002f8a:	42ab      	cmp	r3, r5
1a002f8c:	d107      	bne.n	1a002f9e <pll_get_frac+0x3e>
		*ppll = pll[0];
1a002f8e:	466d      	mov	r5, sp
1a002f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002f94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002f9c:	e05e      	b.n	1a00305c <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002f9e:	1aeb      	subs	r3, r5, r3
1a002fa0:	d500      	bpl.n	1a002fa4 <pll_get_frac+0x44>
		return -val;
1a002fa2:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002fa4:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002fa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002fac:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002fae:	6963      	ldr	r3, [r4, #20]
1a002fb0:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002fb2:	7923      	ldrb	r3, [r4, #4]
1a002fb4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002fb8:	4628      	mov	r0, r5
1a002fba:	a910      	add	r1, sp, #64	; 0x40
1a002fbc:	f7ff ff7c 	bl	1a002eb8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002fc0:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002fc2:	42ab      	cmp	r3, r5
1a002fc4:	d107      	bne.n	1a002fd6 <pll_get_frac+0x76>
		*ppll = pll[2];
1a002fc6:	ad10      	add	r5, sp, #64	; 0x40
1a002fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002fcc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002fd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002fd4:	e042      	b.n	1a00305c <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002fd6:	1aeb      	subs	r3, r5, r3
1a002fd8:	d500      	bpl.n	1a002fdc <pll_get_frac+0x7c>
		return -val;
1a002fda:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002fdc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002fde:	4b20      	ldr	r3, [pc, #128]	; (1a003060 <pll_get_frac+0x100>)
1a002fe0:	429d      	cmp	r5, r3
1a002fe2:	d812      	bhi.n	1a00300a <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a002fe4:	2340      	movs	r3, #64	; 0x40
1a002fe6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002fe8:	6963      	ldr	r3, [r4, #20]
1a002fea:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002fec:	4628      	mov	r0, r5
1a002fee:	a908      	add	r1, sp, #32
1a002ff0:	f7ff ff62 	bl	1a002eb8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002ff6:	42ab      	cmp	r3, r5
1a002ff8:	d107      	bne.n	1a00300a <pll_get_frac+0xaa>
			*ppll = pll[1];
1a002ffa:	ad08      	add	r5, sp, #32
1a002ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003000:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003008:	e028      	b.n	1a00305c <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a00300a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00300c:	1aed      	subs	r5, r5, r3
1a00300e:	d500      	bpl.n	1a003012 <pll_get_frac+0xb2>
		return -val;
1a003010:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a003012:	42ae      	cmp	r6, r5
1a003014:	dc11      	bgt.n	1a00303a <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a003016:	42be      	cmp	r6, r7
1a003018:	dc07      	bgt.n	1a00302a <pll_get_frac+0xca>
			*ppll = pll[0];
1a00301a:	466d      	mov	r5, sp
1a00301c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00301e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003020:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003028:	e018      	b.n	1a00305c <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a00302a:	ad10      	add	r5, sp, #64	; 0x40
1a00302c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00302e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003030:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003038:	e010      	b.n	1a00305c <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a00303a:	42af      	cmp	r7, r5
1a00303c:	db07      	blt.n	1a00304e <pll_get_frac+0xee>
			*ppll = pll[1];
1a00303e:	ad08      	add	r5, sp, #32
1a003040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003044:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00304c:	e006      	b.n	1a00305c <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a00304e:	ad10      	add	r5, sp, #64	; 0x40
1a003050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003054:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a00305c:	b019      	add	sp, #100	; 0x64
1a00305e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a003060:	068e7780 	.word	0x068e7780

1a003064 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003064:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003066:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003068:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00306a:	e010      	b.n	1a00308e <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00306c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003070:	0052      	lsls	r2, r2, #1
1a003072:	4d0d      	ldr	r5, [pc, #52]	; (1a0030a8 <Chip_Clock_FindBaseClock+0x44>)
1a003074:	5aaa      	ldrh	r2, [r5, r2]
1a003076:	4282      	cmp	r2, r0
1a003078:	d806      	bhi.n	1a003088 <Chip_Clock_FindBaseClock+0x24>
1a00307a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00307e:	0052      	lsls	r2, r2, #1
1a003080:	442a      	add	r2, r5
1a003082:	8852      	ldrh	r2, [r2, #2]
1a003084:	4282      	cmp	r2, r0
1a003086:	d201      	bcs.n	1a00308c <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a003088:	3301      	adds	r3, #1
1a00308a:	e000      	b.n	1a00308e <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a00308c:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00308e:	291c      	cmp	r1, #28
1a003090:	d107      	bne.n	1a0030a2 <Chip_Clock_FindBaseClock+0x3e>
1a003092:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003096:	0052      	lsls	r2, r2, #1
1a003098:	4c03      	ldr	r4, [pc, #12]	; (1a0030a8 <Chip_Clock_FindBaseClock+0x44>)
1a00309a:	4422      	add	r2, r4
1a00309c:	7914      	ldrb	r4, [r2, #4]
1a00309e:	428c      	cmp	r4, r1
1a0030a0:	d1e4      	bne.n	1a00306c <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a0030a2:	4608      	mov	r0, r1
1a0030a4:	bc30      	pop	{r4, r5}
1a0030a6:	4770      	bx	lr
1a0030a8:	1a004310 	.word	0x1a004310

1a0030ac <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0030ac:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0030ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0030b2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0030b4:	4a0d      	ldr	r2, [pc, #52]	; (1a0030ec <Chip_Clock_EnableCrystal+0x40>)
1a0030b6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0030b8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0030bc:	6992      	ldr	r2, [r2, #24]
1a0030be:	428a      	cmp	r2, r1
1a0030c0:	d001      	beq.n	1a0030c6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0030c2:	4a0a      	ldr	r2, [pc, #40]	; (1a0030ec <Chip_Clock_EnableCrystal+0x40>)
1a0030c4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0030c6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0030ca:	4a09      	ldr	r2, [pc, #36]	; (1a0030f0 <Chip_Clock_EnableCrystal+0x44>)
1a0030cc:	6811      	ldr	r1, [r2, #0]
1a0030ce:	4a09      	ldr	r2, [pc, #36]	; (1a0030f4 <Chip_Clock_EnableCrystal+0x48>)
1a0030d0:	4291      	cmp	r1, r2
1a0030d2:	d901      	bls.n	1a0030d8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0030d4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0030d8:	4a04      	ldr	r2, [pc, #16]	; (1a0030ec <Chip_Clock_EnableCrystal+0x40>)
1a0030da:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0030dc:	9b01      	ldr	r3, [sp, #4]
1a0030de:	1e5a      	subs	r2, r3, #1
1a0030e0:	9201      	str	r2, [sp, #4]
1a0030e2:	2b00      	cmp	r3, #0
1a0030e4:	d1fa      	bne.n	1a0030dc <Chip_Clock_EnableCrystal+0x30>
}
1a0030e6:	b002      	add	sp, #8
1a0030e8:	4770      	bx	lr
1a0030ea:	bf00      	nop
1a0030ec:	40050000 	.word	0x40050000
1a0030f0:	1a004234 	.word	0x1a004234
1a0030f4:	01312cff 	.word	0x01312cff

1a0030f8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0030f8:	3012      	adds	r0, #18
1a0030fa:	4b05      	ldr	r3, [pc, #20]	; (1a003110 <Chip_Clock_GetDividerSource+0x18>)
1a0030fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003100:	f010 0f01 	tst.w	r0, #1
1a003104:	d102      	bne.n	1a00310c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003106:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00310a:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a00310c:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a00310e:	4770      	bx	lr
1a003110:	40050000 	.word	0x40050000

1a003114 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003114:	f100 0212 	add.w	r2, r0, #18
1a003118:	4b03      	ldr	r3, [pc, #12]	; (1a003128 <Chip_Clock_GetDividerDivisor+0x14>)
1a00311a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00311e:	4b03      	ldr	r3, [pc, #12]	; (1a00312c <Chip_Clock_GetDividerDivisor+0x18>)
1a003120:	5c18      	ldrb	r0, [r3, r0]
}
1a003122:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a003126:	4770      	bx	lr
1a003128:	40050000 	.word	0x40050000
1a00312c:	1a004308 	.word	0x1a004308

1a003130 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003130:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003132:	2810      	cmp	r0, #16
1a003134:	d80a      	bhi.n	1a00314c <Chip_Clock_GetClockInputHz+0x1c>
1a003136:	e8df f000 	tbb	[pc, r0]
1a00313a:	0b42      	.short	0x0b42
1a00313c:	091f160d 	.word	0x091f160d
1a003140:	2b282522 	.word	0x2b282522
1a003144:	322e0909 	.word	0x322e0909
1a003148:	3a36      	.short	0x3a36
1a00314a:	3e          	.byte	0x3e
1a00314b:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a00314c:	2000      	movs	r0, #0
1a00314e:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003150:	481e      	ldr	r0, [pc, #120]	; (1a0031cc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003152:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003154:	4b1e      	ldr	r3, [pc, #120]	; (1a0031d0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003156:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00315a:	f003 0307 	and.w	r3, r3, #7
1a00315e:	2b04      	cmp	r3, #4
1a003160:	d130      	bne.n	1a0031c4 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a003162:	2000      	movs	r0, #0
1a003164:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003166:	4b1a      	ldr	r3, [pc, #104]	; (1a0031d0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003168:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00316c:	f003 0307 	and.w	r3, r3, #7
1a003170:	2b04      	cmp	r3, #4
1a003172:	d029      	beq.n	1a0031c8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003174:	4817      	ldr	r0, [pc, #92]	; (1a0031d4 <Chip_Clock_GetClockInputHz+0xa4>)
1a003176:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003178:	4b17      	ldr	r3, [pc, #92]	; (1a0031d8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00317a:	6818      	ldr	r0, [r3, #0]
		break;
1a00317c:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00317e:	4b17      	ldr	r3, [pc, #92]	; (1a0031dc <Chip_Clock_GetClockInputHz+0xac>)
1a003180:	6818      	ldr	r0, [r3, #0]
		break;
1a003182:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003184:	4b16      	ldr	r3, [pc, #88]	; (1a0031e0 <Chip_Clock_GetClockInputHz+0xb0>)
1a003186:	6818      	ldr	r0, [r3, #0]
		break;
1a003188:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00318a:	4b15      	ldr	r3, [pc, #84]	; (1a0031e0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00318c:	6858      	ldr	r0, [r3, #4]
		break;
1a00318e:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003190:	f000 f86a 	bl	1a003268 <Chip_Clock_GetMainPLLHz>
		break;
1a003194:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003196:	2100      	movs	r1, #0
1a003198:	f000 f89a 	bl	1a0032d0 <Chip_Clock_GetDivRate>
		break;
1a00319c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00319e:	2101      	movs	r1, #1
1a0031a0:	f000 f896 	bl	1a0032d0 <Chip_Clock_GetDivRate>
		break;
1a0031a4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0031a6:	2102      	movs	r1, #2
1a0031a8:	f000 f892 	bl	1a0032d0 <Chip_Clock_GetDivRate>
		break;
1a0031ac:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0031ae:	2103      	movs	r1, #3
1a0031b0:	f000 f88e 	bl	1a0032d0 <Chip_Clock_GetDivRate>
		break;
1a0031b4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0031b6:	2104      	movs	r1, #4
1a0031b8:	f000 f88a 	bl	1a0032d0 <Chip_Clock_GetDivRate>
		break;
1a0031bc:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a0031be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a0031c2:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0031c4:	4803      	ldr	r0, [pc, #12]	; (1a0031d4 <Chip_Clock_GetClockInputHz+0xa4>)
1a0031c6:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a0031c8:	4806      	ldr	r0, [pc, #24]	; (1a0031e4 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a0031ca:	bd08      	pop	{r3, pc}
1a0031cc:	00b71b00 	.word	0x00b71b00
1a0031d0:	40043000 	.word	0x40043000
1a0031d4:	017d7840 	.word	0x017d7840
1a0031d8:	1a004238 	.word	0x1a004238
1a0031dc:	1a004234 	.word	0x1a004234
1a0031e0:	1000057c 	.word	0x1000057c
1a0031e4:	02faf080 	.word	0x02faf080

1a0031e8 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0031e8:	b538      	push	{r3, r4, r5, lr}
1a0031ea:	4605      	mov	r5, r0
1a0031ec:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0031ee:	7908      	ldrb	r0, [r1, #4]
1a0031f0:	f7ff ff9e 	bl	1a003130 <Chip_Clock_GetClockInputHz>
1a0031f4:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0031f6:	4b19      	ldr	r3, [pc, #100]	; (1a00325c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0031f8:	442b      	add	r3, r5
1a0031fa:	4a19      	ldr	r2, [pc, #100]	; (1a003260 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0031fc:	4293      	cmp	r3, r2
1a0031fe:	d821      	bhi.n	1a003244 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003200:	b318      	cbz	r0, 1a00324a <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003202:	2380      	movs	r3, #128	; 0x80
1a003204:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a003206:	2300      	movs	r3, #0
1a003208:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00320a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00320c:	fbb5 f3f0 	udiv	r3, r5, r0
1a003210:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003212:	4a14      	ldr	r2, [pc, #80]	; (1a003264 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003214:	4295      	cmp	r5, r2
1a003216:	d903      	bls.n	1a003220 <Chip_Clock_CalcMainPLLValue+0x38>
1a003218:	fb03 f000 	mul.w	r0, r3, r0
1a00321c:	42a8      	cmp	r0, r5
1a00321e:	d007      	beq.n	1a003230 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003220:	4628      	mov	r0, r5
1a003222:	4621      	mov	r1, r4
1a003224:	f7ff fe9c 	bl	1a002f60 <pll_get_frac>
		if (!ppll->nsel) {
1a003228:	68a3      	ldr	r3, [r4, #8]
1a00322a:	b18b      	cbz	r3, 1a003250 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a00322c:	3b01      	subs	r3, #1
1a00322e:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a003230:	6923      	ldr	r3, [r4, #16]
1a003232:	b183      	cbz	r3, 1a003256 <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a003234:	68e2      	ldr	r2, [r4, #12]
1a003236:	b10a      	cbz	r2, 1a00323c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003238:	3a01      	subs	r2, #1
1a00323a:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a00323c:	3b01      	subs	r3, #1
1a00323e:	6123      	str	r3, [r4, #16]

	return 0;
1a003240:	2000      	movs	r0, #0
1a003242:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a003244:	f04f 30ff 	mov.w	r0, #4294967295
1a003248:	bd38      	pop	{r3, r4, r5, pc}
1a00324a:	f04f 30ff 	mov.w	r0, #4294967295
1a00324e:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a003250:	f04f 30ff 	mov.w	r0, #4294967295
1a003254:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a003256:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a00325a:	bd38      	pop	{r3, r4, r5, pc}
1a00325c:	ff6b3a10 	.word	0xff6b3a10
1a003260:	0b940510 	.word	0x0b940510
1a003264:	094c5eff 	.word	0x094c5eff

1a003268 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a003268:	b570      	push	{r4, r5, r6, lr}
1a00326a:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00326c:	4d16      	ldr	r5, [pc, #88]	; (1a0032c8 <Chip_Clock_GetMainPLLHz+0x60>)
1a00326e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003270:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003274:	f7ff ff5c 	bl	1a003130 <Chip_Clock_GetClockInputHz>
1a003278:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00327a:	4b14      	ldr	r3, [pc, #80]	; (1a0032cc <Chip_Clock_GetMainPLLHz+0x64>)
1a00327c:	6818      	ldr	r0, [r3, #0]
1a00327e:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003280:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a003282:	f010 0001 	ands.w	r0, r0, #1
1a003286:	d01d      	beq.n	1a0032c4 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a003288:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00328c:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003290:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a003294:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a003298:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a00329a:	3201      	adds	r2, #1
	p = ptab[psel];
1a00329c:	a802      	add	r0, sp, #8
1a00329e:	4401      	add	r1, r0
1a0032a0:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a0032a4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0032a8:	d100      	bne.n	1a0032ac <Chip_Clock_GetMainPLLHz+0x44>
1a0032aa:	b125      	cbz	r5, 1a0032b6 <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a0032ac:	fbb6 f0f2 	udiv	r0, r6, r2
1a0032b0:	fb03 f000 	mul.w	r0, r3, r0
1a0032b4:	e006      	b.n	1a0032c4 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a0032b6:	0040      	lsls	r0, r0, #1
1a0032b8:	fbb3 f3f0 	udiv	r3, r3, r0
1a0032bc:	fbb6 f0f2 	udiv	r0, r6, r2
1a0032c0:	fb00 f003 	mul.w	r0, r0, r3
}
1a0032c4:	b002      	add	sp, #8
1a0032c6:	bd70      	pop	{r4, r5, r6, pc}
1a0032c8:	40050000 	.word	0x40050000
1a0032cc:	1a004304 	.word	0x1a004304

1a0032d0 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a0032d0:	b538      	push	{r3, r4, r5, lr}
1a0032d2:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a0032d4:	4608      	mov	r0, r1
1a0032d6:	f7ff ff0f 	bl	1a0030f8 <Chip_Clock_GetDividerSource>
1a0032da:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0032dc:	4620      	mov	r0, r4
1a0032de:	f7ff ff19 	bl	1a003114 <Chip_Clock_GetDividerDivisor>
1a0032e2:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0032e4:	4628      	mov	r0, r5
1a0032e6:	f7ff ff23 	bl	1a003130 <Chip_Clock_GetClockInputHz>
1a0032ea:	3401      	adds	r4, #1
}
1a0032ec:	fbb0 f0f4 	udiv	r0, r0, r4
1a0032f0:	bd38      	pop	{r3, r4, r5, pc}
1a0032f2:	bf00      	nop

1a0032f4 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0032f4:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0032f6:	0085      	lsls	r5, r0, #2
1a0032f8:	4c0d      	ldr	r4, [pc, #52]	; (1a003330 <Chip_Clock_SetBaseClock+0x3c>)
1a0032fa:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a0032fc:	281b      	cmp	r0, #27
1a0032fe:	d80f      	bhi.n	1a003320 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a003300:	2911      	cmp	r1, #17
1a003302:	d012      	beq.n	1a00332a <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003304:	4c0b      	ldr	r4, [pc, #44]	; (1a003334 <Chip_Clock_SetBaseClock+0x40>)
1a003306:	402c      	ands	r4, r5

			if (autoblocken) {
1a003308:	b10a      	cbz	r2, 1a00330e <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a00330a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a00330e:	b10b      	cbz	r3, 1a003314 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a003310:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003314:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003318:	0080      	lsls	r0, r0, #2
1a00331a:	4b05      	ldr	r3, [pc, #20]	; (1a003330 <Chip_Clock_SetBaseClock+0x3c>)
1a00331c:	501c      	str	r4, [r3, r0]
1a00331e:	e004      	b.n	1a00332a <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003320:	f045 0501 	orr.w	r5, r5, #1
1a003324:	0080      	lsls	r0, r0, #2
1a003326:	4b02      	ldr	r3, [pc, #8]	; (1a003330 <Chip_Clock_SetBaseClock+0x3c>)
1a003328:	501d      	str	r5, [r3, r0]
	}
}
1a00332a:	bc30      	pop	{r4, r5}
1a00332c:	4770      	bx	lr
1a00332e:	bf00      	nop
1a003330:	4005005c 	.word	0x4005005c
1a003334:	e0fff7fe 	.word	0xe0fff7fe

1a003338 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003338:	281b      	cmp	r0, #27
1a00333a:	d808      	bhi.n	1a00334e <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a00333c:	0080      	lsls	r0, r0, #2
1a00333e:	4b06      	ldr	r3, [pc, #24]	; (1a003358 <Chip_Clock_GetBaseClock+0x20>)
1a003340:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a003342:	f010 0f01 	tst.w	r0, #1
1a003346:	d104      	bne.n	1a003352 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003348:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00334c:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a00334e:	2011      	movs	r0, #17
1a003350:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a003352:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a003354:	4770      	bx	lr
1a003356:	bf00      	nop
1a003358:	4005005c 	.word	0x4005005c

1a00335c <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a00335c:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00335e:	f7ff ffeb 	bl	1a003338 <Chip_Clock_GetBaseClock>
1a003362:	f7ff fee5 	bl	1a003130 <Chip_Clock_GetClockInputHz>
}
1a003366:	bd08      	pop	{r3, pc}

1a003368 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003368:	b909      	cbnz	r1, 1a00336e <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a00336a:	2101      	movs	r1, #1
1a00336c:	e000      	b.n	1a003370 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a00336e:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a003370:	b10a      	cbz	r2, 1a003376 <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a003372:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003376:	2b02      	cmp	r3, #2
1a003378:	d101      	bne.n	1a00337e <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a00337a:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00337e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003382:	d305      	bcc.n	1a003390 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003384:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003388:	4b04      	ldr	r3, [pc, #16]	; (1a00339c <Chip_Clock_EnableOpts+0x34>)
1a00338a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00338e:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003390:	3020      	adds	r0, #32
1a003392:	4b03      	ldr	r3, [pc, #12]	; (1a0033a0 <Chip_Clock_EnableOpts+0x38>)
1a003394:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003398:	4770      	bx	lr
1a00339a:	bf00      	nop
1a00339c:	40052000 	.word	0x40052000
1a0033a0:	40051000 	.word	0x40051000

1a0033a4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0033a4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0033a8:	d309      	bcc.n	1a0033be <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0033aa:	4a09      	ldr	r2, [pc, #36]	; (1a0033d0 <Chip_Clock_Enable+0x2c>)
1a0033ac:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0033b0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0033b4:	f043 0301 	orr.w	r3, r3, #1
1a0033b8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0033bc:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0033be:	4a05      	ldr	r2, [pc, #20]	; (1a0033d4 <Chip_Clock_Enable+0x30>)
1a0033c0:	3020      	adds	r0, #32
1a0033c2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0033c6:	f043 0301 	orr.w	r3, r3, #1
1a0033ca:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0033ce:	4770      	bx	lr
1a0033d0:	40052000 	.word	0x40052000
1a0033d4:	40051000 	.word	0x40051000

1a0033d8 <Chip_Clock_RTCEnable>:
}

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a0033d8:	4b04      	ldr	r3, [pc, #16]	; (1a0033ec <Chip_Clock_RTCEnable+0x14>)
1a0033da:	685a      	ldr	r2, [r3, #4]
1a0033dc:	f022 020c 	bic.w	r2, r2, #12
1a0033e0:	605a      	str	r2, [r3, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a0033e2:	685a      	ldr	r2, [r3, #4]
1a0033e4:	f042 0203 	orr.w	r2, r2, #3
1a0033e8:	605a      	str	r2, [r3, #4]
1a0033ea:	4770      	bx	lr
1a0033ec:	40043000 	.word	0x40043000

1a0033f0 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a0033f0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0033f4:	d309      	bcc.n	1a00340a <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a0033f6:	4a09      	ldr	r2, [pc, #36]	; (1a00341c <Chip_Clock_Disable+0x2c>)
1a0033f8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0033fc:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003400:	f023 0301 	bic.w	r3, r3, #1
1a003404:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003408:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a00340a:	4a05      	ldr	r2, [pc, #20]	; (1a003420 <Chip_Clock_Disable+0x30>)
1a00340c:	3020      	adds	r0, #32
1a00340e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003412:	f023 0301 	bic.w	r3, r3, #1
1a003416:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00341a:	4770      	bx	lr
1a00341c:	40052000 	.word	0x40052000
1a003420:	40051000 	.word	0x40051000

1a003424 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003424:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003426:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00342a:	d305      	bcc.n	1a003438 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00342c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003430:	4a0d      	ldr	r2, [pc, #52]	; (1a003468 <Chip_Clock_GetRate+0x44>)
1a003432:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003436:	e004      	b.n	1a003442 <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003438:	f100 0320 	add.w	r3, r0, #32
1a00343c:	4a0b      	ldr	r2, [pc, #44]	; (1a00346c <Chip_Clock_GetRate+0x48>)
1a00343e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003442:	f014 0f01 	tst.w	r4, #1
1a003446:	d00c      	beq.n	1a003462 <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003448:	f7ff fe0c 	bl	1a003064 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00344c:	f7ff ff86 	bl	1a00335c <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a003450:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003454:	d101      	bne.n	1a00345a <Chip_Clock_GetRate+0x36>
			div = 1;
1a003456:	2301      	movs	r3, #1
1a003458:	e000      	b.n	1a00345c <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a00345a:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a00345c:	fbb0 f0f3 	udiv	r0, r0, r3
1a003460:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a003462:	2000      	movs	r0, #0
	}

	return rate;
}
1a003464:	bd10      	pop	{r4, pc}
1a003466:	bf00      	nop
1a003468:	40052000 	.word	0x40052000
1a00346c:	40051000 	.word	0x40051000

1a003470 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003470:	b570      	push	{r4, r5, r6, lr}
1a003472:	b08a      	sub	sp, #40	; 0x28
1a003474:	4605      	mov	r5, r0
1a003476:	460e      	mov	r6, r1
1a003478:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00347a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00347e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003480:	2806      	cmp	r0, #6
1a003482:	d101      	bne.n	1a003488 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a003484:	f7ff fe12 	bl	1a0030ac <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003488:	2004      	movs	r0, #4
1a00348a:	4629      	mov	r1, r5
1a00348c:	2201      	movs	r2, #1
1a00348e:	2300      	movs	r3, #0
1a003490:	f7ff ff30 	bl	1a0032f4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003494:	4a47      	ldr	r2, [pc, #284]	; (1a0035b4 <Chip_SetupCoreClock+0x144>)
1a003496:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003498:	f043 0301 	orr.w	r3, r3, #1
1a00349c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00349e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0034a2:	4630      	mov	r0, r6
1a0034a4:	a901      	add	r1, sp, #4
1a0034a6:	f7ff fe9f 	bl	1a0031e8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0034aa:	4b43      	ldr	r3, [pc, #268]	; (1a0035b8 <Chip_SetupCoreClock+0x148>)
1a0034ac:	429e      	cmp	r6, r3
1a0034ae:	d913      	bls.n	1a0034d8 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a0034b0:	9b01      	ldr	r3, [sp, #4]
1a0034b2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0034b6:	d000      	beq.n	1a0034ba <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0034b8:	e7fe      	b.n	1a0034b8 <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a0034ba:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0034be:	d005      	beq.n	1a0034cc <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0034c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0034c4:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a0034c6:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a0034c8:	2601      	movs	r6, #1
1a0034ca:	e007      	b.n	1a0034dc <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a0034cc:	9b04      	ldr	r3, [sp, #16]
1a0034ce:	3301      	adds	r3, #1
1a0034d0:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a0034d2:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a0034d4:	2600      	movs	r6, #0
1a0034d6:	e001      	b.n	1a0034dc <Chip_SetupCoreClock+0x6c>
1a0034d8:	2500      	movs	r5, #0
1a0034da:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0034dc:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0034e0:	9b01      	ldr	r3, [sp, #4]
1a0034e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0034e6:	9a05      	ldr	r2, [sp, #20]
1a0034e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0034ec:	9a03      	ldr	r2, [sp, #12]
1a0034ee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0034f2:	9a04      	ldr	r2, [sp, #16]
1a0034f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0034f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0034fc:	4a2d      	ldr	r2, [pc, #180]	; (1a0035b4 <Chip_SetupCoreClock+0x144>)
1a0034fe:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003500:	4b2c      	ldr	r3, [pc, #176]	; (1a0035b4 <Chip_SetupCoreClock+0x144>)
1a003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003504:	f013 0f01 	tst.w	r3, #1
1a003508:	d0fa      	beq.n	1a003500 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00350a:	2004      	movs	r0, #4
1a00350c:	2109      	movs	r1, #9
1a00350e:	2201      	movs	r2, #1
1a003510:	2300      	movs	r3, #0
1a003512:	f7ff feef 	bl	1a0032f4 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003516:	b1ee      	cbz	r6, 1a003554 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003518:	f242 7310 	movw	r3, #10000	; 0x2710
1a00351c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00351e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003520:	1e5a      	subs	r2, r3, #1
1a003522:	9209      	str	r2, [sp, #36]	; 0x24
1a003524:	2b00      	cmp	r3, #0
1a003526:	d1fa      	bne.n	1a00351e <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a003528:	9b01      	ldr	r3, [sp, #4]
1a00352a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00352e:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003530:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003534:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003538:	9a05      	ldr	r2, [sp, #20]
1a00353a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00353e:	9a03      	ldr	r2, [sp, #12]
1a003540:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003544:	9a04      	ldr	r2, [sp, #16]
1a003546:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00354a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00354e:	4a19      	ldr	r2, [pc, #100]	; (1a0035b4 <Chip_SetupCoreClock+0x144>)
1a003550:	6453      	str	r3, [r2, #68]	; 0x44
1a003552:	e01c      	b.n	1a00358e <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a003554:	b1dd      	cbz	r5, 1a00358e <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003556:	f242 7310 	movw	r3, #10000	; 0x2710
1a00355a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00355c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00355e:	1e5a      	subs	r2, r3, #1
1a003560:	9209      	str	r2, [sp, #36]	; 0x24
1a003562:	2b00      	cmp	r3, #0
1a003564:	d1fa      	bne.n	1a00355c <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a003566:	9b04      	ldr	r3, [sp, #16]
1a003568:	1e59      	subs	r1, r3, #1
1a00356a:	9104      	str	r1, [sp, #16]
1a00356c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003570:	9b01      	ldr	r3, [sp, #4]
1a003572:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a003576:	9b05      	ldr	r3, [sp, #20]
1a003578:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a00357c:	9b03      	ldr	r3, [sp, #12]
1a00357e:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a003582:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a003586:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00358a:	4a0a      	ldr	r2, [pc, #40]	; (1a0035b4 <Chip_SetupCoreClock+0x144>)
1a00358c:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00358e:	b964      	cbnz	r4, 1a0035aa <Chip_SetupCoreClock+0x13a>
1a003590:	e00e      	b.n	1a0035b0 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003592:	4a0a      	ldr	r2, [pc, #40]	; (1a0035bc <Chip_SetupCoreClock+0x14c>)
1a003594:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a003598:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a00359c:	7859      	ldrb	r1, [r3, #1]
1a00359e:	789a      	ldrb	r2, [r3, #2]
1a0035a0:	78db      	ldrb	r3, [r3, #3]
1a0035a2:	f7ff fea7 	bl	1a0032f4 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0035a6:	3401      	adds	r4, #1
1a0035a8:	e000      	b.n	1a0035ac <Chip_SetupCoreClock+0x13c>
1a0035aa:	2400      	movs	r4, #0
1a0035ac:	2c11      	cmp	r4, #17
1a0035ae:	d9f0      	bls.n	1a003592 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0035b0:	b00a      	add	sp, #40	; 0x28
1a0035b2:	bd70      	pop	{r4, r5, r6, pc}
1a0035b4:	40050000 	.word	0x40050000
1a0035b8:	068e7780 	.word	0x068e7780
1a0035bc:	1a00437c 	.word	0x1a00437c

1a0035c0 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a0035c0:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a0035c2:	4b10      	ldr	r3, [pc, #64]	; (1a003604 <fpuInit+0x44>)
1a0035c4:	681b      	ldr	r3, [r3, #0]
1a0035c6:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a0035c8:	4b0f      	ldr	r3, [pc, #60]	; (1a003608 <fpuInit+0x48>)
1a0035ca:	681b      	ldr	r3, [r3, #0]
1a0035cc:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0035ce:	9a02      	ldr	r2, [sp, #8]
1a0035d0:	4b0e      	ldr	r3, [pc, #56]	; (1a00360c <fpuInit+0x4c>)
1a0035d2:	429a      	cmp	r2, r3
1a0035d4:	d105      	bne.n	1a0035e2 <fpuInit+0x22>
1a0035d6:	9a01      	ldr	r2, [sp, #4]
1a0035d8:	4b0d      	ldr	r3, [pc, #52]	; (1a003610 <fpuInit+0x50>)
1a0035da:	429a      	cmp	r2, r3
1a0035dc:	d003      	beq.n	1a0035e6 <fpuInit+0x26>
1a0035de:	2300      	movs	r3, #0
1a0035e0:	e002      	b.n	1a0035e8 <fpuInit+0x28>
1a0035e2:	2300      	movs	r3, #0
1a0035e4:	e000      	b.n	1a0035e8 <fpuInit+0x28>
1a0035e6:	2301      	movs	r3, #1

	if (vfpPresent) {
1a0035e8:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0035ec:	d008      	beq.n	1a003600 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a0035ee:	4a09      	ldr	r2, [pc, #36]	; (1a003614 <fpuInit+0x54>)
1a0035f0:	6813      	ldr	r3, [r2, #0]
1a0035f2:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a0035f4:	9b03      	ldr	r3, [sp, #12]
1a0035f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0035fa:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a0035fc:	9b03      	ldr	r3, [sp, #12]
1a0035fe:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a003600:	b004      	add	sp, #16
1a003602:	4770      	bx	lr
1a003604:	e000ef40 	.word	0xe000ef40
1a003608:	e000ef44 	.word	0xe000ef44
1a00360c:	10110021 	.word	0x10110021
1a003610:	11000011 	.word	0x11000011
1a003614:	e000ed88 	.word	0xe000ed88

1a003618 <Chip_RTC_ResetClockTickCounter>:

/* Reset clock tick counter in the RTC peripheral */
void Chip_RTC_ResetClockTickCounter(LPC_RTC_T *pRTC)
{
	/* Reset RTC clock*/
	pRTC->CCR |= RTC_CCR_CTCRST;
1a003618:	6883      	ldr	r3, [r0, #8]
1a00361a:	f043 0302 	orr.w	r3, r3, #2
1a00361e:	6083      	str	r3, [r0, #8]
	while (!(pRTC->CCR & RTC_CCR_CTCRST)) {}
1a003620:	6883      	ldr	r3, [r0, #8]
1a003622:	f013 0f02 	tst.w	r3, #2
1a003626:	d0fb      	beq.n	1a003620 <Chip_RTC_ResetClockTickCounter+0x8>

	/* Finish resetting RTC clock */
	pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
1a003628:	6883      	ldr	r3, [r0, #8]
1a00362a:	f003 0311 	and.w	r3, r3, #17
1a00362e:	6083      	str	r3, [r0, #8]
	while (pRTC->CCR & RTC_CCR_CTCRST) {}
1a003630:	6883      	ldr	r3, [r0, #8]
1a003632:	f013 0f02 	tst.w	r3, #2
1a003636:	d1fb      	bne.n	1a003630 <Chip_RTC_ResetClockTickCounter+0x18>
}
1a003638:	4770      	bx	lr
1a00363a:	bf00      	nop

1a00363c <Chip_RTC_Enable>:

/* Start/Stop RTC peripheral */
void Chip_RTC_Enable(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a00363c:	2901      	cmp	r1, #1
1a00363e:	d104      	bne.n	1a00364a <Chip_RTC_Enable+0xe>
		pRTC->CCR |= RTC_CCR_CLKEN;
1a003640:	6883      	ldr	r3, [r0, #8]
1a003642:	f043 0301 	orr.w	r3, r3, #1
1a003646:	6083      	str	r3, [r0, #8]
1a003648:	4770      	bx	lr
	} else {
		pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a00364a:	6883      	ldr	r3, [r0, #8]
1a00364c:	f003 0312 	and.w	r3, r3, #18
1a003650:	6083      	str	r3, [r0, #8]
1a003652:	4770      	bx	lr

1a003654 <Chip_RTC_SetFullTime>:
	}
}

/* Set full time in the RTC peripheral */
void Chip_RTC_SetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a003654:	b430      	push	{r4, r5}
	RTC_TIMEINDEX_T i;
	uint32_t ccr_val = pRTC->CCR;
1a003656:	6885      	ldr	r5, [r0, #8]

	/* Temporarily disable */
	if (ccr_val & RTC_CCR_CLKEN) {
1a003658:	f015 0f01 	tst.w	r5, #1
1a00365c:	d002      	beq.n	1a003664 <Chip_RTC_SetFullTime+0x10>
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a00365e:	f005 0312 	and.w	r3, r5, #18
1a003662:	6083      	str	r3, [r0, #8]
	}
}

/* Set full time in the RTC peripheral */
void Chip_RTC_SetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a003664:	2300      	movs	r3, #0
1a003666:	e007      	b.n	1a003678 <Chip_RTC_SetFullTime+0x24>
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
		pRTC->TIME[i] = pFullTime->time[i];
1a003668:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
1a00366c:	f103 0208 	add.w	r2, r3, #8
1a003670:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	if (ccr_val & RTC_CCR_CLKEN) {
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
1a003674:	3301      	adds	r3, #1
1a003676:	b2db      	uxtb	r3, r3
1a003678:	2b07      	cmp	r3, #7
1a00367a:	d9f5      	bls.n	1a003668 <Chip_RTC_SetFullTime+0x14>
		pRTC->TIME[i] = pFullTime->time[i];
	}

	/* Restore to old setting */
	pRTC->CCR = ccr_val;
1a00367c:	6085      	str	r5, [r0, #8]
}
1a00367e:	bc30      	pop	{r4, r5}
1a003680:	4770      	bx	lr
1a003682:	bf00      	nop

1a003684 <Chip_RTC_GetFullTime>:

/* Get full time from the RTC peripheral */
void Chip_RTC_GetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a003684:	b410      	push	{r4}
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;
1a003686:	24ff      	movs	r4, #255	; 0xff

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a003688:	e00e      	b.n	1a0036a8 <Chip_RTC_GetFullTime+0x24>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
1a00368a:	6a03      	ldr	r3, [r0, #32]
1a00368c:	600b      	str	r3, [r1, #0]
1a00368e:	461c      	mov	r4, r3
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a003690:	2301      	movs	r3, #1
1a003692:	e007      	b.n	1a0036a4 <Chip_RTC_GetFullTime+0x20>
			pFullTime->time[i] = pRTC->TIME[i];
1a003694:	f103 0208 	add.w	r2, r3, #8
1a003698:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
1a00369c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a0036a0:	3301      	adds	r3, #1
1a0036a2:	b2db      	uxtb	r3, r3
1a0036a4:	2b07      	cmp	r3, #7
1a0036a6:	d9f5      	bls.n	1a003694 <Chip_RTC_GetFullTime+0x10>
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a0036a8:	6a03      	ldr	r3, [r0, #32]
1a0036aa:	42a3      	cmp	r3, r4
1a0036ac:	d1ed      	bne.n	1a00368a <Chip_RTC_GetFullTime+0x6>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
			pFullTime->time[i] = pRTC->TIME[i];
		}
	}
}
1a0036ae:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0036b2:	4770      	bx	lr

1a0036b4 <Chip_RTC_CalibCounterCmd>:
}

/* Enable/Disable calibration counter in the RTC peripheral */
void Chip_RTC_CalibCounterCmd(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a0036b4:	2901      	cmp	r1, #1
1a0036b6:	d108      	bne.n	1a0036ca <Chip_RTC_CalibCounterCmd+0x16>
		do {
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
1a0036b8:	6883      	ldr	r3, [r0, #8]
1a0036ba:	f003 0303 	and.w	r3, r3, #3
1a0036be:	6083      	str	r3, [r0, #8]
		} while (pRTC->CCR & RTC_CCR_CCALEN);
1a0036c0:	6883      	ldr	r3, [r0, #8]
1a0036c2:	f013 0f10 	tst.w	r3, #16
1a0036c6:	d1f7      	bne.n	1a0036b8 <Chip_RTC_CalibCounterCmd+0x4>
1a0036c8:	4770      	bx	lr
	}
	else {
		pRTC->CCR |= RTC_CCR_CCALEN;
1a0036ca:	6883      	ldr	r3, [r0, #8]
1a0036cc:	f043 0310 	orr.w	r3, r3, #16
1a0036d0:	6083      	str	r3, [r0, #8]
1a0036d2:	4770      	bx	lr

1a0036d4 <Chip_RTC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the RTC peripheral */
void Chip_RTC_Init(LPC_RTC_T *pRTC)
{
1a0036d4:	b510      	push	{r4, lr}
1a0036d6:	4604      	mov	r4, r0
	Chip_Clock_RTCEnable();
1a0036d8:	f7ff fe7e 	bl	1a0033d8 <Chip_Clock_RTCEnable>

	/* 2-Second delay after enabling RTC clock */
	LPC_ATIMER->DOWNCOUNTER = 2048;
1a0036dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
1a0036e0:	4b0d      	ldr	r3, [pc, #52]	; (1a003718 <Chip_RTC_Init+0x44>)
1a0036e2:	601a      	str	r2, [r3, #0]
	while (LPC_ATIMER->DOWNCOUNTER);
1a0036e4:	4b0c      	ldr	r3, [pc, #48]	; (1a003718 <Chip_RTC_Init+0x44>)
1a0036e6:	681b      	ldr	r3, [r3, #0]
1a0036e8:	2b00      	cmp	r3, #0
1a0036ea:	d1fb      	bne.n	1a0036e4 <Chip_RTC_Init+0x10>

	/* Disable RTC */
	Chip_RTC_Enable(pRTC, DISABLE);
1a0036ec:	4620      	mov	r0, r4
1a0036ee:	2100      	movs	r1, #0
1a0036f0:	f7ff ffa4 	bl	1a00363c <Chip_RTC_Enable>

	/* Disable Calibration */
	Chip_RTC_CalibCounterCmd(pRTC, DISABLE);
1a0036f4:	4620      	mov	r0, r4
1a0036f6:	2100      	movs	r1, #0
1a0036f8:	f7ff ffdc 	bl	1a0036b4 <Chip_RTC_CalibCounterCmd>

	/* Reset RTC Clock */
	Chip_RTC_ResetClockTickCounter(pRTC);
1a0036fc:	4620      	mov	r0, r4
1a0036fe:	f7ff ff8b 	bl	1a003618 <Chip_RTC_ResetClockTickCounter>

	/* Clear counter increment and alarm interrupt */
	pRTC->ILR = RTC_IRL_RTCCIF | RTC_IRL_RTCALF;
1a003702:	2303      	movs	r3, #3
1a003704:	6023      	str	r3, [r4, #0]
	while (pRTC->ILR != 0) {}
1a003706:	6823      	ldr	r3, [r4, #0]
1a003708:	2b00      	cmp	r3, #0
1a00370a:	d1fc      	bne.n	1a003706 <Chip_RTC_Init+0x32>

	/* Clear all register to be default */
	pRTC->CIIR = 0x00;
1a00370c:	60e3      	str	r3, [r4, #12]
	pRTC->AMR = 0xFF;
1a00370e:	22ff      	movs	r2, #255	; 0xff
1a003710:	6122      	str	r2, [r4, #16]
	pRTC->CALIBRATION = 0x00;
1a003712:	6423      	str	r3, [r4, #64]	; 0x40
1a003714:	bd10      	pop	{r4, pc}
1a003716:	bf00      	nop
1a003718:	40040000 	.word	0x40040000

1a00371c <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a00371c:	4770      	bx	lr
1a00371e:	bf00      	nop

1a003720 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a003720:	680b      	ldr	r3, [r1, #0]
1a003722:	b11b      	cbz	r3, 1a00372c <SSP_Write2BFifo+0xc>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a003724:	684a      	ldr	r2, [r1, #4]
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a003726:	5a9b      	ldrh	r3, [r3, r2]
 * @param	tx_data	: SSP 16-bit data to be transmited
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_SendFrame(LPC_SSP_T *pSSP, uint16_t tx_data)
{
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a003728:	6083      	str	r3, [r0, #8]
1a00372a:	e002      	b.n	1a003732 <SSP_Write2BFifo+0x12>
1a00372c:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a003730:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a003732:	684b      	ldr	r3, [r1, #4]
1a003734:	3302      	adds	r3, #2
1a003736:	604b      	str	r3, [r1, #4]
1a003738:	4770      	bx	lr
1a00373a:	bf00      	nop

1a00373c <SSP_Write1BFifo>:
}

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a00373c:	680b      	ldr	r3, [r1, #0]
1a00373e:	b11b      	cbz	r3, 1a003748 <SSP_Write1BFifo+0xc>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a003740:	684a      	ldr	r2, [r1, #4]
1a003742:	5c9b      	ldrb	r3, [r3, r2]
1a003744:	6083      	str	r3, [r0, #8]
1a003746:	e001      	b.n	1a00374c <SSP_Write1BFifo+0x10>
1a003748:	23ff      	movs	r3, #255	; 0xff
1a00374a:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a00374c:	684b      	ldr	r3, [r1, #4]
1a00374e:	3301      	adds	r3, #1
1a003750:	604b      	str	r3, [r1, #4]
1a003752:	4770      	bx	lr

1a003754 <SSP_Read2BFifo>:
}

/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a003754:	b410      	push	{r4}
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a003756:	e007      	b.n	1a003768 <SSP_Read2BFifo+0x14>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 SSP 16-bit data received
 */
STATIC INLINE uint16_t Chip_SSP_ReceiveFrame(LPC_SSP_T *pSSP)
{
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a003758:	6883      	ldr	r3, [r0, #8]
1a00375a:	b29b      	uxth	r3, r3
		   (xf_setup->rx_cnt < xf_setup->length)) {
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
1a00375c:	688c      	ldr	r4, [r1, #8]
1a00375e:	b104      	cbz	r4, 1a003762 <SSP_Read2BFifo+0xe>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a003760:	5313      	strh	r3, [r2, r4]
		}

		xf_setup->rx_cnt += 2;
1a003762:	68cb      	ldr	r3, [r1, #12]
1a003764:	3302      	adds	r3, #2
1a003766:	60cb      	str	r3, [r1, #12]
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a003768:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00376a:	f013 0f04 	tst.w	r3, #4
1a00376e:	d003      	beq.n	1a003778 <SSP_Read2BFifo+0x24>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a003770:	68ca      	ldr	r2, [r1, #12]
1a003772:	690b      	ldr	r3, [r1, #16]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a003774:	429a      	cmp	r2, r3
1a003776:	d3ef      	bcc.n	1a003758 <SSP_Read2BFifo+0x4>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
	}
}
1a003778:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00377c:	4770      	bx	lr
1a00377e:	bf00      	nop

1a003780 <SSP_Read1BFifo>:

/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a003780:	b410      	push	{r4}
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a003782:	e007      	b.n	1a003794 <SSP_Read1BFifo+0x14>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 SSP 16-bit data received
 */
STATIC INLINE uint16_t Chip_SSP_ReceiveFrame(LPC_SSP_T *pSSP)
{
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a003784:	6883      	ldr	r3, [r0, #8]
1a003786:	b29b      	uxth	r3, r3
		   (xf_setup->rx_cnt < xf_setup->length)) {
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
1a003788:	688c      	ldr	r4, [r1, #8]
1a00378a:	b104      	cbz	r4, 1a00378e <SSP_Read1BFifo+0xe>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a00378c:	5513      	strb	r3, [r2, r4]
		}

		xf_setup->rx_cnt++;
1a00378e:	68cb      	ldr	r3, [r1, #12]
1a003790:	3301      	adds	r3, #1
1a003792:	60cb      	str	r3, [r1, #12]
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a003794:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a003796:	f013 0f04 	tst.w	r3, #4
1a00379a:	d003      	beq.n	1a0037a4 <SSP_Read1BFifo+0x24>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00379c:	68ca      	ldr	r2, [r1, #12]
1a00379e:	690b      	ldr	r3, [r1, #16]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0037a0:	429a      	cmp	r2, r3
1a0037a2:	d3ef      	bcc.n	1a003784 <SSP_Read1BFifo+0x4>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
	}
}
1a0037a4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0037a8:	4770      	bx	lr
1a0037aa:	bf00      	nop

1a0037ac <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0037ac:	4b03      	ldr	r3, [pc, #12]	; (1a0037bc <Chip_SSP_GetClockIndex+0x10>)
1a0037ae:	4298      	cmp	r0, r3
1a0037b0:	d101      	bne.n	1a0037b6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a0037b2:	20a5      	movs	r0, #165	; 0xa5
1a0037b4:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0037b6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0037b8:	4770      	bx	lr
1a0037ba:	bf00      	nop
1a0037bc:	400c5000 	.word	0x400c5000

1a0037c0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0037c0:	4b04      	ldr	r3, [pc, #16]	; (1a0037d4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0037c2:	4298      	cmp	r0, r3
1a0037c4:	d102      	bne.n	1a0037cc <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a0037c6:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0037ca:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0037cc:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0037d0:	4770      	bx	lr
1a0037d2:	bf00      	nop
1a0037d4:	400c5000 	.word	0x400c5000

1a0037d8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0037d8:	6803      	ldr	r3, [r0, #0]
1a0037da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0037de:	0209      	lsls	r1, r1, #8
1a0037e0:	b289      	uxth	r1, r1
1a0037e2:	430b      	orrs	r3, r1
1a0037e4:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a0037e6:	6102      	str	r2, [r0, #16]
1a0037e8:	4770      	bx	lr
1a0037ea:	bf00      	nop

1a0037ec <Chip_SSP_RWFrames_Blocking>:
}

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a0037ec:	b538      	push	{r3, r4, r5, lr}
1a0037ee:	4604      	mov	r4, r0
1a0037f0:	460d      	mov	r5, r1
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a0037f2:	e000      	b.n	1a0037f6 <Chip_SSP_RWFrames_Blocking+0xa>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 SSP 16-bit data received
 */
STATIC INLINE uint16_t Chip_SSP_ReceiveFrame(LPC_SSP_T *pSSP)
{
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a0037f4:	68a3      	ldr	r3, [r4, #8]
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a0037f6:	68e3      	ldr	r3, [r4, #12]
1a0037f8:	f013 0f04 	tst.w	r3, #4
1a0037fc:	d1fa      	bne.n	1a0037f4 <Chip_SSP_RWFrames_Blocking+0x8>
 * @return	 Nothing
 * @note	Software can clear one or more interrupt condition(s) in the SSP controller
 */
STATIC INLINE void Chip_SSP_ClearIntPending(LPC_SSP_T *pSSP, SSP_INTCLEAR_T IntClear)
{
	pSSP->ICR = IntClear;
1a0037fe:	2303      	movs	r3, #3
1a003800:	6223      	str	r3, [r4, #32]
 * @return	 the number of bits transferred in each frame minus one
 * @note	The return value is 0x03 -> 0xF corresponding to 4bit -> 16bit transfer
 */
STATIC INLINE uint8_t Chip_SSP_GetDataSize(LPC_SSP_T *pSSP)
{
	return SSP_CR0_DSS(pSSP->CR0);
1a003802:	6823      	ldr	r3, [r4, #0]
1a003804:	f003 030f 	and.w	r3, r3, #15
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a003808:	2b07      	cmp	r3, #7
1a00380a:	d815      	bhi.n	1a003838 <Chip_SSP_RWFrames_Blocking+0x4c>
1a00380c:	e031      	b.n	1a003872 <Chip_SSP_RWFrames_Blocking+0x86>
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a00380e:	68e2      	ldr	r2, [r4, #12]
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
			/* write data to buffer */
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a003810:	f012 0f02 	tst.w	r2, #2
1a003814:	d006      	beq.n	1a003824 <Chip_SSP_RWFrames_Blocking+0x38>
1a003816:	686a      	ldr	r2, [r5, #4]
1a003818:	4293      	cmp	r3, r2
1a00381a:	d903      	bls.n	1a003824 <Chip_SSP_RWFrames_Blocking+0x38>
				SSP_Write2BFifo(pSSP, xf_setup);
1a00381c:	4620      	mov	r0, r4
1a00381e:	4629      	mov	r1, r5
1a003820:	f7ff ff7e 	bl	1a003720 <SSP_Write2BFifo>
 * @return	 Raw interrupt status corresponding to interrupt condition , SET or RESET
 * @note	Get the status of each interrupt condition ,regardless of whether or not the interrupt is enabled
 */
STATIC INLINE IntStatus Chip_SSP_GetRawIntStatus(LPC_SSP_T *pSSP, SSP_RAWINTSTATUS_T RawInt)
{
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a003824:	69a3      	ldr	r3, [r4, #24]
1a003826:	f003 0301 	and.w	r3, r3, #1
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a00382a:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00382e:	d12f      	bne.n	1a003890 <Chip_SSP_RWFrames_Blocking+0xa4>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a003830:	4620      	mov	r0, r4
1a003832:	4629      	mov	r1, r5
1a003834:	f7ff ff8e 	bl	1a003754 <SSP_Read2BFifo>

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a003838:	68ea      	ldr	r2, [r5, #12]
1a00383a:	692b      	ldr	r3, [r5, #16]
1a00383c:	429a      	cmp	r2, r3
1a00383e:	d3e6      	bcc.n	1a00380e <Chip_SSP_RWFrames_Blocking+0x22>
1a003840:	686a      	ldr	r2, [r5, #4]
1a003842:	4293      	cmp	r3, r2
1a003844:	d8e3      	bhi.n	1a00380e <Chip_SSP_RWFrames_Blocking+0x22>
1a003846:	e01b      	b.n	1a003880 <Chip_SSP_RWFrames_Blocking+0x94>
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a003848:	68e2      	ldr	r2, [r4, #12]
		}
	}
	else {
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
			/* write data to buffer */
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a00384a:	f012 0f02 	tst.w	r2, #2
1a00384e:	d006      	beq.n	1a00385e <Chip_SSP_RWFrames_Blocking+0x72>
1a003850:	686a      	ldr	r2, [r5, #4]
1a003852:	4293      	cmp	r3, r2
1a003854:	d903      	bls.n	1a00385e <Chip_SSP_RWFrames_Blocking+0x72>
				SSP_Write1BFifo(pSSP, xf_setup);
1a003856:	4620      	mov	r0, r4
1a003858:	4629      	mov	r1, r5
1a00385a:	f7ff ff6f 	bl	1a00373c <SSP_Write1BFifo>
 * @return	 Raw interrupt status corresponding to interrupt condition , SET or RESET
 * @note	Get the status of each interrupt condition ,regardless of whether or not the interrupt is enabled
 */
STATIC INLINE IntStatus Chip_SSP_GetRawIntStatus(LPC_SSP_T *pSSP, SSP_RAWINTSTATUS_T RawInt)
{
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a00385e:	69a3      	ldr	r3, [r4, #24]
1a003860:	f003 0301 	and.w	r3, r3, #1
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a003864:	f013 0fff 	tst.w	r3, #255	; 0xff
1a003868:	d114      	bne.n	1a003894 <Chip_SSP_RWFrames_Blocking+0xa8>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a00386a:	4620      	mov	r0, r4
1a00386c:	4629      	mov	r1, r5
1a00386e:	f7ff ff87 	bl	1a003780 <SSP_Read1BFifo>
			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
		}
	}
	else {
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a003872:	68ea      	ldr	r2, [r5, #12]
1a003874:	692b      	ldr	r3, [r5, #16]
1a003876:	429a      	cmp	r2, r3
1a003878:	d3e6      	bcc.n	1a003848 <Chip_SSP_RWFrames_Blocking+0x5c>
1a00387a:	686a      	ldr	r2, [r5, #4]
1a00387c:	4293      	cmp	r3, r2
1a00387e:	d8e3      	bhi.n	1a003848 <Chip_SSP_RWFrames_Blocking+0x5c>

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
		}
	}
	if (xf_setup->tx_data) {
1a003880:	682b      	ldr	r3, [r5, #0]
1a003882:	b10b      	cbz	r3, 1a003888 <Chip_SSP_RWFrames_Blocking+0x9c>
		return xf_setup->tx_cnt;
1a003884:	6868      	ldr	r0, [r5, #4]
1a003886:	bd38      	pop	{r3, r4, r5, pc}
	}
	else if (xf_setup->rx_data) {
1a003888:	68ab      	ldr	r3, [r5, #8]
1a00388a:	b12b      	cbz	r3, 1a003898 <Chip_SSP_RWFrames_Blocking+0xac>
		return xf_setup->rx_cnt;
1a00388c:	68e8      	ldr	r0, [r5, #12]
1a00388e:	bd38      	pop	{r3, r4, r5, pc}
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
				return ERROR;
1a003890:	2000      	movs	r0, #0
1a003892:	bd38      	pop	{r3, r4, r5, pc}
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
				return ERROR;
1a003894:	2000      	movs	r0, #0
1a003896:	bd38      	pop	{r3, r4, r5, pc}
	}
	else if (xf_setup->rx_data) {
		return xf_setup->rx_cnt;
	}

	return 0;
1a003898:	2000      	movs	r0, #0
}
1a00389a:	bd38      	pop	{r3, r4, r5, pc}

1a00389c <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00389c:	b570      	push	{r4, r5, r6, lr}
1a00389e:	4606      	mov	r6, r0
1a0038a0:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0038a2:	f7ff ff8d 	bl	1a0037c0 <Chip_SSP_GetPeriphClockIndex>
1a0038a6:	f7ff fdbd 	bl	1a003424 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0038aa:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a0038ac:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a0038b0:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a0038b2:	e00c      	b.n	1a0038ce <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0038b4:	1c4c      	adds	r4, r1, #1
1a0038b6:	fb02 f304 	mul.w	r3, r2, r4
1a0038ba:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0038be:	42ab      	cmp	r3, r5
1a0038c0:	d905      	bls.n	1a0038ce <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a0038c2:	2cff      	cmp	r4, #255	; 0xff
1a0038c4:	d902      	bls.n	1a0038cc <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a0038c6:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a0038c8:	2100      	movs	r1, #0
1a0038ca:	e000      	b.n	1a0038ce <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0038cc:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a0038ce:	42ab      	cmp	r3, r5
1a0038d0:	d8f0      	bhi.n	1a0038b4 <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0038d2:	4630      	mov	r0, r6
1a0038d4:	f7ff ff80 	bl	1a0037d8 <Chip_SSP_SetClockRate>
1a0038d8:	bd70      	pop	{r4, r5, r6, pc}
1a0038da:	bf00      	nop

1a0038dc <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0038dc:	b510      	push	{r4, lr}
1a0038de:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0038e0:	f7ff ff64 	bl	1a0037ac <Chip_SSP_GetClockIndex>
1a0038e4:	f7ff fd5e 	bl	1a0033a4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0038e8:	4620      	mov	r0, r4
1a0038ea:	f7ff ff69 	bl	1a0037c0 <Chip_SSP_GetPeriphClockIndex>
1a0038ee:	f7ff fd59 	bl	1a0033a4 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0038f2:	6863      	ldr	r3, [r4, #4]
1a0038f4:	f023 0304 	bic.w	r3, r3, #4
1a0038f8:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0038fa:	6823      	ldr	r3, [r4, #0]
1a0038fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003900:	f043 0307 	orr.w	r3, r3, #7
1a003904:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003906:	4620      	mov	r0, r4
1a003908:	4901      	ldr	r1, [pc, #4]	; (1a003910 <Chip_SSP_Init+0x34>)
1a00390a:	f7ff ffc7 	bl	1a00389c <Chip_SSP_SetBitRate>
1a00390e:	bd10      	pop	{r4, pc}
1a003910:	000186a0 	.word	0x000186a0

1a003914 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003914:	2901      	cmp	r1, #1
1a003916:	d109      	bne.n	1a00392c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a003918:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00391c:	0080      	lsls	r0, r0, #2
1a00391e:	4b04      	ldr	r3, [pc, #16]	; (1a003930 <Chip_I2C_EventHandler+0x1c>)
1a003920:	4418      	add	r0, r3
1a003922:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a003924:	7d13      	ldrb	r3, [r2, #20]
1a003926:	b2db      	uxtb	r3, r3
1a003928:	2b04      	cmp	r3, #4
1a00392a:	d0fb      	beq.n	1a003924 <Chip_I2C_EventHandler+0x10>
1a00392c:	4770      	bx	lr
1a00392e:	bf00      	nop
1a003930:	10000094 	.word	0x10000094

1a003934 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003934:	b570      	push	{r4, r5, r6, lr}
1a003936:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a003938:	4e06      	ldr	r6, [pc, #24]	; (1a003954 <Chip_I2C_Init+0x20>)
1a00393a:	00c4      	lsls	r4, r0, #3
1a00393c:	1a23      	subs	r3, r4, r0
1a00393e:	009b      	lsls	r3, r3, #2
1a003940:	4433      	add	r3, r6
1a003942:	8898      	ldrh	r0, [r3, #4]
1a003944:	f7ff fd2e 	bl	1a0033a4 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003948:	1b60      	subs	r0, r4, r5
1a00394a:	0080      	lsls	r0, r0, #2
1a00394c:	5833      	ldr	r3, [r6, r0]
1a00394e:	226c      	movs	r2, #108	; 0x6c
1a003950:	619a      	str	r2, [r3, #24]
1a003952:	bd70      	pop	{r4, r5, r6, pc}
1a003954:	10000094 	.word	0x10000094

1a003958 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00395c:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a00395e:	4f09      	ldr	r7, [pc, #36]	; (1a003984 <Chip_I2C_SetClockRate+0x2c>)
1a003960:	00c5      	lsls	r5, r0, #3
1a003962:	1a2e      	subs	r6, r5, r0
1a003964:	00b6      	lsls	r6, r6, #2
1a003966:	19bb      	adds	r3, r7, r6
1a003968:	8898      	ldrh	r0, [r3, #4]
1a00396a:	f7ff fd5b 	bl	1a003424 <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00396e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003972:	59bb      	ldr	r3, [r7, r6]
1a003974:	0842      	lsrs	r2, r0, #1
1a003976:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003978:	59bb      	ldr	r3, [r7, r6]
1a00397a:	691a      	ldr	r2, [r3, #16]
1a00397c:	1a80      	subs	r0, r0, r2
1a00397e:	6158      	str	r0, [r3, #20]
1a003980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003984:	10000094 	.word	0x10000094

1a003988 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a003988:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00398a:	4a19      	ldr	r2, [pc, #100]	; (1a0039f0 <ResetISR+0x68>)
1a00398c:	4b19      	ldr	r3, [pc, #100]	; (1a0039f4 <ResetISR+0x6c>)
1a00398e:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a003990:	4a19      	ldr	r2, [pc, #100]	; (1a0039f8 <ResetISR+0x70>)
1a003992:	3304      	adds	r3, #4
1a003994:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003996:	2300      	movs	r3, #0
1a003998:	e005      	b.n	1a0039a6 <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00399a:	f04f 31ff 	mov.w	r1, #4294967295
1a00399e:	4a17      	ldr	r2, [pc, #92]	; (1a0039fc <ResetISR+0x74>)
1a0039a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0039a4:	3301      	adds	r3, #1
1a0039a6:	2b07      	cmp	r3, #7
1a0039a8:	d9f7      	bls.n	1a00399a <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a0039aa:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a0039ac:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a0039ae:	f7ff f85b 	bl	1a002a68 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a0039b2:	4b13      	ldr	r3, [pc, #76]	; (1a003a00 <ResetISR+0x78>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0039b4:	e007      	b.n	1a0039c6 <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0039b6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0039ba:	6818      	ldr	r0, [r3, #0]
1a0039bc:	6859      	ldr	r1, [r3, #4]
1a0039be:	689a      	ldr	r2, [r3, #8]
1a0039c0:	f7fc fbf4 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0039c4:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0039c6:	4a0f      	ldr	r2, [pc, #60]	; (1a003a04 <ResetISR+0x7c>)
1a0039c8:	4293      	cmp	r3, r2
1a0039ca:	d3f4      	bcc.n	1a0039b6 <ResetISR+0x2e>
1a0039cc:	e006      	b.n	1a0039dc <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a0039ce:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a0039d0:	f854 0b08 	ldr.w	r0, [r4], #8
1a0039d4:	6859      	ldr	r1, [r3, #4]
1a0039d6:	f7fc fbf7 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0039da:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a0039dc:	4a0a      	ldr	r2, [pc, #40]	; (1a003a08 <ResetISR+0x80>)
1a0039de:	4293      	cmp	r3, r2
1a0039e0:	d3f5      	bcc.n	1a0039ce <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a0039e2:	f000 fae3 	bl	1a003fac <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a0039e6:	f7ff f821 	bl	1a002a2c <Board_Init>
    main();
1a0039ea:	f7fc fe0b 	bl	1a000604 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a0039ee:	e7fe      	b.n	1a0039ee <ResetISR+0x66>
1a0039f0:	10df1000 	.word	0x10df1000
1a0039f4:	40053100 	.word	0x40053100
1a0039f8:	01dff7ff 	.word	0x01dff7ff
1a0039fc:	e000e280 	.word	0xe000e280
1a003a00:	1a000114 	.word	0x1a000114
1a003a04:	1a000150 	.word	0x1a000150
1a003a08:	1a000178 	.word	0x1a000178

1a003a0c <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a003a0c:	4770      	bx	lr
1a003a0e:	bf00      	nop

1a003a10 <__aeabi_uldivmod>:
1a003a10:	b953      	cbnz	r3, 1a003a28 <__aeabi_uldivmod+0x18>
1a003a12:	b94a      	cbnz	r2, 1a003a28 <__aeabi_uldivmod+0x18>
1a003a14:	2900      	cmp	r1, #0
1a003a16:	bf08      	it	eq
1a003a18:	2800      	cmpeq	r0, #0
1a003a1a:	bf1c      	itt	ne
1a003a1c:	f04f 31ff 	movne.w	r1, #4294967295
1a003a20:	f04f 30ff 	movne.w	r0, #4294967295
1a003a24:	f000 b83c 	b.w	1a003aa0 <__aeabi_idiv0>
1a003a28:	b082      	sub	sp, #8
1a003a2a:	46ec      	mov	ip, sp
1a003a2c:	e92d 5000 	stmdb	sp!, {ip, lr}
1a003a30:	f000 f81e 	bl	1a003a70 <__gnu_uldivmod_helper>
1a003a34:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003a38:	b002      	add	sp, #8
1a003a3a:	bc0c      	pop	{r2, r3}
1a003a3c:	4770      	bx	lr
1a003a3e:	bf00      	nop

1a003a40 <__gnu_ldivmod_helper>:
1a003a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003a44:	9c06      	ldr	r4, [sp, #24]
1a003a46:	4615      	mov	r5, r2
1a003a48:	4606      	mov	r6, r0
1a003a4a:	460f      	mov	r7, r1
1a003a4c:	4698      	mov	r8, r3
1a003a4e:	f000 f829 	bl	1a003aa4 <__divdi3>
1a003a52:	fb05 f301 	mul.w	r3, r5, r1
1a003a56:	fb00 3808 	mla	r8, r0, r8, r3
1a003a5a:	fba5 2300 	umull	r2, r3, r5, r0
1a003a5e:	1ab2      	subs	r2, r6, r2
1a003a60:	4443      	add	r3, r8
1a003a62:	eb67 0303 	sbc.w	r3, r7, r3
1a003a66:	e9c4 2300 	strd	r2, r3, [r4]
1a003a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003a6e:	bf00      	nop

1a003a70 <__gnu_uldivmod_helper>:
1a003a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003a74:	9c06      	ldr	r4, [sp, #24]
1a003a76:	4690      	mov	r8, r2
1a003a78:	4606      	mov	r6, r0
1a003a7a:	460f      	mov	r7, r1
1a003a7c:	461d      	mov	r5, r3
1a003a7e:	f000 f95f 	bl	1a003d40 <__udivdi3>
1a003a82:	fb00 f505 	mul.w	r5, r0, r5
1a003a86:	fba0 2308 	umull	r2, r3, r0, r8
1a003a8a:	fb08 5501 	mla	r5, r8, r1, r5
1a003a8e:	1ab2      	subs	r2, r6, r2
1a003a90:	442b      	add	r3, r5
1a003a92:	eb67 0303 	sbc.w	r3, r7, r3
1a003a96:	e9c4 2300 	strd	r2, r3, [r4]
1a003a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003a9e:	bf00      	nop

1a003aa0 <__aeabi_idiv0>:
1a003aa0:	4770      	bx	lr
1a003aa2:	bf00      	nop

1a003aa4 <__divdi3>:
1a003aa4:	2900      	cmp	r1, #0
1a003aa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a003aaa:	f2c0 80a6 	blt.w	1a003bfa <__divdi3+0x156>
1a003aae:	2600      	movs	r6, #0
1a003ab0:	2b00      	cmp	r3, #0
1a003ab2:	f2c0 809c 	blt.w	1a003bee <__divdi3+0x14a>
1a003ab6:	4688      	mov	r8, r1
1a003ab8:	4694      	mov	ip, r2
1a003aba:	469e      	mov	lr, r3
1a003abc:	4615      	mov	r5, r2
1a003abe:	4604      	mov	r4, r0
1a003ac0:	460f      	mov	r7, r1
1a003ac2:	2b00      	cmp	r3, #0
1a003ac4:	d13d      	bne.n	1a003b42 <__divdi3+0x9e>
1a003ac6:	428a      	cmp	r2, r1
1a003ac8:	d959      	bls.n	1a003b7e <__divdi3+0xda>
1a003aca:	fab2 f382 	clz	r3, r2
1a003ace:	b13b      	cbz	r3, 1a003ae0 <__divdi3+0x3c>
1a003ad0:	f1c3 0220 	rsb	r2, r3, #32
1a003ad4:	409f      	lsls	r7, r3
1a003ad6:	fa20 f202 	lsr.w	r2, r0, r2
1a003ada:	409d      	lsls	r5, r3
1a003adc:	4317      	orrs	r7, r2
1a003ade:	409c      	lsls	r4, r3
1a003ae0:	0c29      	lsrs	r1, r5, #16
1a003ae2:	0c22      	lsrs	r2, r4, #16
1a003ae4:	fbb7 fef1 	udiv	lr, r7, r1
1a003ae8:	b2a8      	uxth	r0, r5
1a003aea:	fb01 771e 	mls	r7, r1, lr, r7
1a003aee:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a003af2:	fb00 f30e 	mul.w	r3, r0, lr
1a003af6:	42bb      	cmp	r3, r7
1a003af8:	d90a      	bls.n	1a003b10 <__divdi3+0x6c>
1a003afa:	197f      	adds	r7, r7, r5
1a003afc:	f10e 32ff 	add.w	r2, lr, #4294967295
1a003b00:	f080 8105 	bcs.w	1a003d0e <__divdi3+0x26a>
1a003b04:	42bb      	cmp	r3, r7
1a003b06:	f240 8102 	bls.w	1a003d0e <__divdi3+0x26a>
1a003b0a:	f1ae 0e02 	sub.w	lr, lr, #2
1a003b0e:	442f      	add	r7, r5
1a003b10:	1aff      	subs	r7, r7, r3
1a003b12:	b2a4      	uxth	r4, r4
1a003b14:	fbb7 f3f1 	udiv	r3, r7, r1
1a003b18:	fb01 7713 	mls	r7, r1, r3, r7
1a003b1c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003b20:	fb00 f003 	mul.w	r0, r0, r3
1a003b24:	42b8      	cmp	r0, r7
1a003b26:	d908      	bls.n	1a003b3a <__divdi3+0x96>
1a003b28:	197f      	adds	r7, r7, r5
1a003b2a:	f103 32ff 	add.w	r2, r3, #4294967295
1a003b2e:	f080 80f0 	bcs.w	1a003d12 <__divdi3+0x26e>
1a003b32:	42b8      	cmp	r0, r7
1a003b34:	f240 80ed 	bls.w	1a003d12 <__divdi3+0x26e>
1a003b38:	3b02      	subs	r3, #2
1a003b3a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a003b3e:	2200      	movs	r2, #0
1a003b40:	e003      	b.n	1a003b4a <__divdi3+0xa6>
1a003b42:	428b      	cmp	r3, r1
1a003b44:	d90f      	bls.n	1a003b66 <__divdi3+0xc2>
1a003b46:	2200      	movs	r2, #0
1a003b48:	4613      	mov	r3, r2
1a003b4a:	1c34      	adds	r4, r6, #0
1a003b4c:	bf18      	it	ne
1a003b4e:	2401      	movne	r4, #1
1a003b50:	4260      	negs	r0, r4
1a003b52:	f04f 0500 	mov.w	r5, #0
1a003b56:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a003b5a:	4058      	eors	r0, r3
1a003b5c:	4051      	eors	r1, r2
1a003b5e:	1900      	adds	r0, r0, r4
1a003b60:	4169      	adcs	r1, r5
1a003b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a003b66:	fab3 f283 	clz	r2, r3
1a003b6a:	2a00      	cmp	r2, #0
1a003b6c:	f040 8086 	bne.w	1a003c7c <__divdi3+0x1d8>
1a003b70:	428b      	cmp	r3, r1
1a003b72:	d302      	bcc.n	1a003b7a <__divdi3+0xd6>
1a003b74:	4584      	cmp	ip, r0
1a003b76:	f200 80db 	bhi.w	1a003d30 <__divdi3+0x28c>
1a003b7a:	2301      	movs	r3, #1
1a003b7c:	e7e5      	b.n	1a003b4a <__divdi3+0xa6>
1a003b7e:	b912      	cbnz	r2, 1a003b86 <__divdi3+0xe2>
1a003b80:	2301      	movs	r3, #1
1a003b82:	fbb3 f5f2 	udiv	r5, r3, r2
1a003b86:	fab5 f085 	clz	r0, r5
1a003b8a:	2800      	cmp	r0, #0
1a003b8c:	d13b      	bne.n	1a003c06 <__divdi3+0x162>
1a003b8e:	1b78      	subs	r0, r7, r5
1a003b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003b94:	fa1f fc85 	uxth.w	ip, r5
1a003b98:	2201      	movs	r2, #1
1a003b9a:	fbb0 f8fe 	udiv	r8, r0, lr
1a003b9e:	0c21      	lsrs	r1, r4, #16
1a003ba0:	fb0e 0718 	mls	r7, lr, r8, r0
1a003ba4:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a003ba8:	fb0c f308 	mul.w	r3, ip, r8
1a003bac:	42bb      	cmp	r3, r7
1a003bae:	d907      	bls.n	1a003bc0 <__divdi3+0x11c>
1a003bb0:	197f      	adds	r7, r7, r5
1a003bb2:	f108 31ff 	add.w	r1, r8, #4294967295
1a003bb6:	d202      	bcs.n	1a003bbe <__divdi3+0x11a>
1a003bb8:	42bb      	cmp	r3, r7
1a003bba:	f200 80bd 	bhi.w	1a003d38 <__divdi3+0x294>
1a003bbe:	4688      	mov	r8, r1
1a003bc0:	1aff      	subs	r7, r7, r3
1a003bc2:	b2a4      	uxth	r4, r4
1a003bc4:	fbb7 f3fe 	udiv	r3, r7, lr
1a003bc8:	fb0e 7713 	mls	r7, lr, r3, r7
1a003bcc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003bd0:	fb0c fc03 	mul.w	ip, ip, r3
1a003bd4:	45bc      	cmp	ip, r7
1a003bd6:	d907      	bls.n	1a003be8 <__divdi3+0x144>
1a003bd8:	197f      	adds	r7, r7, r5
1a003bda:	f103 31ff 	add.w	r1, r3, #4294967295
1a003bde:	d202      	bcs.n	1a003be6 <__divdi3+0x142>
1a003be0:	45bc      	cmp	ip, r7
1a003be2:	f200 80a7 	bhi.w	1a003d34 <__divdi3+0x290>
1a003be6:	460b      	mov	r3, r1
1a003be8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003bec:	e7ad      	b.n	1a003b4a <__divdi3+0xa6>
1a003bee:	4252      	negs	r2, r2
1a003bf0:	ea6f 0606 	mvn.w	r6, r6
1a003bf4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003bf8:	e75d      	b.n	1a003ab6 <__divdi3+0x12>
1a003bfa:	4240      	negs	r0, r0
1a003bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003c00:	f04f 36ff 	mov.w	r6, #4294967295
1a003c04:	e754      	b.n	1a003ab0 <__divdi3+0xc>
1a003c06:	f1c0 0220 	rsb	r2, r0, #32
1a003c0a:	fa24 f102 	lsr.w	r1, r4, r2
1a003c0e:	fa07 f300 	lsl.w	r3, r7, r0
1a003c12:	4085      	lsls	r5, r0
1a003c14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003c18:	40d7      	lsrs	r7, r2
1a003c1a:	4319      	orrs	r1, r3
1a003c1c:	fbb7 f2fe 	udiv	r2, r7, lr
1a003c20:	0c0b      	lsrs	r3, r1, #16
1a003c22:	fb0e 7712 	mls	r7, lr, r2, r7
1a003c26:	fa1f fc85 	uxth.w	ip, r5
1a003c2a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a003c2e:	fb0c f702 	mul.w	r7, ip, r2
1a003c32:	429f      	cmp	r7, r3
1a003c34:	fa04 f400 	lsl.w	r4, r4, r0
1a003c38:	d907      	bls.n	1a003c4a <__divdi3+0x1a6>
1a003c3a:	195b      	adds	r3, r3, r5
1a003c3c:	f102 30ff 	add.w	r0, r2, #4294967295
1a003c40:	d274      	bcs.n	1a003d2c <__divdi3+0x288>
1a003c42:	429f      	cmp	r7, r3
1a003c44:	d972      	bls.n	1a003d2c <__divdi3+0x288>
1a003c46:	3a02      	subs	r2, #2
1a003c48:	442b      	add	r3, r5
1a003c4a:	1bdf      	subs	r7, r3, r7
1a003c4c:	b289      	uxth	r1, r1
1a003c4e:	fbb7 f8fe 	udiv	r8, r7, lr
1a003c52:	fb0e 7318 	mls	r3, lr, r8, r7
1a003c56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a003c5a:	fb0c f708 	mul.w	r7, ip, r8
1a003c5e:	429f      	cmp	r7, r3
1a003c60:	d908      	bls.n	1a003c74 <__divdi3+0x1d0>
1a003c62:	195b      	adds	r3, r3, r5
1a003c64:	f108 31ff 	add.w	r1, r8, #4294967295
1a003c68:	d25c      	bcs.n	1a003d24 <__divdi3+0x280>
1a003c6a:	429f      	cmp	r7, r3
1a003c6c:	d95a      	bls.n	1a003d24 <__divdi3+0x280>
1a003c6e:	f1a8 0802 	sub.w	r8, r8, #2
1a003c72:	442b      	add	r3, r5
1a003c74:	1bd8      	subs	r0, r3, r7
1a003c76:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a003c7a:	e78e      	b.n	1a003b9a <__divdi3+0xf6>
1a003c7c:	f1c2 0320 	rsb	r3, r2, #32
1a003c80:	fa2c f103 	lsr.w	r1, ip, r3
1a003c84:	fa0e fe02 	lsl.w	lr, lr, r2
1a003c88:	fa20 f703 	lsr.w	r7, r0, r3
1a003c8c:	ea41 0e0e 	orr.w	lr, r1, lr
1a003c90:	fa08 f002 	lsl.w	r0, r8, r2
1a003c94:	fa28 f103 	lsr.w	r1, r8, r3
1a003c98:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a003c9c:	4338      	orrs	r0, r7
1a003c9e:	fbb1 f8f5 	udiv	r8, r1, r5
1a003ca2:	0c03      	lsrs	r3, r0, #16
1a003ca4:	fb05 1118 	mls	r1, r5, r8, r1
1a003ca8:	fa1f f78e 	uxth.w	r7, lr
1a003cac:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003cb0:	fb07 f308 	mul.w	r3, r7, r8
1a003cb4:	428b      	cmp	r3, r1
1a003cb6:	fa0c fc02 	lsl.w	ip, ip, r2
1a003cba:	d909      	bls.n	1a003cd0 <__divdi3+0x22c>
1a003cbc:	eb11 010e 	adds.w	r1, r1, lr
1a003cc0:	f108 39ff 	add.w	r9, r8, #4294967295
1a003cc4:	d230      	bcs.n	1a003d28 <__divdi3+0x284>
1a003cc6:	428b      	cmp	r3, r1
1a003cc8:	d92e      	bls.n	1a003d28 <__divdi3+0x284>
1a003cca:	f1a8 0802 	sub.w	r8, r8, #2
1a003cce:	4471      	add	r1, lr
1a003cd0:	1ac9      	subs	r1, r1, r3
1a003cd2:	b280      	uxth	r0, r0
1a003cd4:	fbb1 f3f5 	udiv	r3, r1, r5
1a003cd8:	fb05 1113 	mls	r1, r5, r3, r1
1a003cdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a003ce0:	fb07 f703 	mul.w	r7, r7, r3
1a003ce4:	428f      	cmp	r7, r1
1a003ce6:	d908      	bls.n	1a003cfa <__divdi3+0x256>
1a003ce8:	eb11 010e 	adds.w	r1, r1, lr
1a003cec:	f103 30ff 	add.w	r0, r3, #4294967295
1a003cf0:	d216      	bcs.n	1a003d20 <__divdi3+0x27c>
1a003cf2:	428f      	cmp	r7, r1
1a003cf4:	d914      	bls.n	1a003d20 <__divdi3+0x27c>
1a003cf6:	3b02      	subs	r3, #2
1a003cf8:	4471      	add	r1, lr
1a003cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003cfe:	1bc9      	subs	r1, r1, r7
1a003d00:	fba3 890c 	umull	r8, r9, r3, ip
1a003d04:	4549      	cmp	r1, r9
1a003d06:	d309      	bcc.n	1a003d1c <__divdi3+0x278>
1a003d08:	d005      	beq.n	1a003d16 <__divdi3+0x272>
1a003d0a:	2200      	movs	r2, #0
1a003d0c:	e71d      	b.n	1a003b4a <__divdi3+0xa6>
1a003d0e:	4696      	mov	lr, r2
1a003d10:	e6fe      	b.n	1a003b10 <__divdi3+0x6c>
1a003d12:	4613      	mov	r3, r2
1a003d14:	e711      	b.n	1a003b3a <__divdi3+0x96>
1a003d16:	4094      	lsls	r4, r2
1a003d18:	4544      	cmp	r4, r8
1a003d1a:	d2f6      	bcs.n	1a003d0a <__divdi3+0x266>
1a003d1c:	3b01      	subs	r3, #1
1a003d1e:	e7f4      	b.n	1a003d0a <__divdi3+0x266>
1a003d20:	4603      	mov	r3, r0
1a003d22:	e7ea      	b.n	1a003cfa <__divdi3+0x256>
1a003d24:	4688      	mov	r8, r1
1a003d26:	e7a5      	b.n	1a003c74 <__divdi3+0x1d0>
1a003d28:	46c8      	mov	r8, r9
1a003d2a:	e7d1      	b.n	1a003cd0 <__divdi3+0x22c>
1a003d2c:	4602      	mov	r2, r0
1a003d2e:	e78c      	b.n	1a003c4a <__divdi3+0x1a6>
1a003d30:	4613      	mov	r3, r2
1a003d32:	e70a      	b.n	1a003b4a <__divdi3+0xa6>
1a003d34:	3b02      	subs	r3, #2
1a003d36:	e757      	b.n	1a003be8 <__divdi3+0x144>
1a003d38:	f1a8 0802 	sub.w	r8, r8, #2
1a003d3c:	442f      	add	r7, r5
1a003d3e:	e73f      	b.n	1a003bc0 <__divdi3+0x11c>

1a003d40 <__udivdi3>:
1a003d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003d44:	2b00      	cmp	r3, #0
1a003d46:	d144      	bne.n	1a003dd2 <__udivdi3+0x92>
1a003d48:	428a      	cmp	r2, r1
1a003d4a:	4615      	mov	r5, r2
1a003d4c:	4604      	mov	r4, r0
1a003d4e:	d94f      	bls.n	1a003df0 <__udivdi3+0xb0>
1a003d50:	fab2 f782 	clz	r7, r2
1a003d54:	460e      	mov	r6, r1
1a003d56:	b14f      	cbz	r7, 1a003d6c <__udivdi3+0x2c>
1a003d58:	f1c7 0320 	rsb	r3, r7, #32
1a003d5c:	40b9      	lsls	r1, r7
1a003d5e:	fa20 f603 	lsr.w	r6, r0, r3
1a003d62:	fa02 f507 	lsl.w	r5, r2, r7
1a003d66:	430e      	orrs	r6, r1
1a003d68:	fa00 f407 	lsl.w	r4, r0, r7
1a003d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003d70:	0c23      	lsrs	r3, r4, #16
1a003d72:	fbb6 f0fe 	udiv	r0, r6, lr
1a003d76:	b2af      	uxth	r7, r5
1a003d78:	fb0e 6110 	mls	r1, lr, r0, r6
1a003d7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003d80:	fb07 f100 	mul.w	r1, r7, r0
1a003d84:	4299      	cmp	r1, r3
1a003d86:	d909      	bls.n	1a003d9c <__udivdi3+0x5c>
1a003d88:	195b      	adds	r3, r3, r5
1a003d8a:	f100 32ff 	add.w	r2, r0, #4294967295
1a003d8e:	f080 80ec 	bcs.w	1a003f6a <__udivdi3+0x22a>
1a003d92:	4299      	cmp	r1, r3
1a003d94:	f240 80e9 	bls.w	1a003f6a <__udivdi3+0x22a>
1a003d98:	3802      	subs	r0, #2
1a003d9a:	442b      	add	r3, r5
1a003d9c:	1a5a      	subs	r2, r3, r1
1a003d9e:	b2a4      	uxth	r4, r4
1a003da0:	fbb2 f3fe 	udiv	r3, r2, lr
1a003da4:	fb0e 2213 	mls	r2, lr, r3, r2
1a003da8:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a003dac:	fb07 f703 	mul.w	r7, r7, r3
1a003db0:	4297      	cmp	r7, r2
1a003db2:	d908      	bls.n	1a003dc6 <__udivdi3+0x86>
1a003db4:	1952      	adds	r2, r2, r5
1a003db6:	f103 31ff 	add.w	r1, r3, #4294967295
1a003dba:	f080 80d8 	bcs.w	1a003f6e <__udivdi3+0x22e>
1a003dbe:	4297      	cmp	r7, r2
1a003dc0:	f240 80d5 	bls.w	1a003f6e <__udivdi3+0x22e>
1a003dc4:	3b02      	subs	r3, #2
1a003dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003dca:	2600      	movs	r6, #0
1a003dcc:	4631      	mov	r1, r6
1a003dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003dd2:	428b      	cmp	r3, r1
1a003dd4:	d847      	bhi.n	1a003e66 <__udivdi3+0x126>
1a003dd6:	fab3 f683 	clz	r6, r3
1a003dda:	2e00      	cmp	r6, #0
1a003ddc:	d148      	bne.n	1a003e70 <__udivdi3+0x130>
1a003dde:	428b      	cmp	r3, r1
1a003de0:	d302      	bcc.n	1a003de8 <__udivdi3+0xa8>
1a003de2:	4282      	cmp	r2, r0
1a003de4:	f200 80cd 	bhi.w	1a003f82 <__udivdi3+0x242>
1a003de8:	2001      	movs	r0, #1
1a003dea:	4631      	mov	r1, r6
1a003dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003df0:	b912      	cbnz	r2, 1a003df8 <__udivdi3+0xb8>
1a003df2:	2501      	movs	r5, #1
1a003df4:	fbb5 f5f2 	udiv	r5, r5, r2
1a003df8:	fab5 f885 	clz	r8, r5
1a003dfc:	f1b8 0f00 	cmp.w	r8, #0
1a003e00:	d177      	bne.n	1a003ef2 <__udivdi3+0x1b2>
1a003e02:	1b4a      	subs	r2, r1, r5
1a003e04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003e08:	b2af      	uxth	r7, r5
1a003e0a:	2601      	movs	r6, #1
1a003e0c:	fbb2 f0fe 	udiv	r0, r2, lr
1a003e10:	0c23      	lsrs	r3, r4, #16
1a003e12:	fb0e 2110 	mls	r1, lr, r0, r2
1a003e16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003e1a:	fb07 f300 	mul.w	r3, r7, r0
1a003e1e:	428b      	cmp	r3, r1
1a003e20:	d907      	bls.n	1a003e32 <__udivdi3+0xf2>
1a003e22:	1949      	adds	r1, r1, r5
1a003e24:	f100 32ff 	add.w	r2, r0, #4294967295
1a003e28:	d202      	bcs.n	1a003e30 <__udivdi3+0xf0>
1a003e2a:	428b      	cmp	r3, r1
1a003e2c:	f200 80ba 	bhi.w	1a003fa4 <__udivdi3+0x264>
1a003e30:	4610      	mov	r0, r2
1a003e32:	1ac9      	subs	r1, r1, r3
1a003e34:	b2a4      	uxth	r4, r4
1a003e36:	fbb1 f3fe 	udiv	r3, r1, lr
1a003e3a:	fb0e 1113 	mls	r1, lr, r3, r1
1a003e3e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a003e42:	fb07 f703 	mul.w	r7, r7, r3
1a003e46:	42a7      	cmp	r7, r4
1a003e48:	d908      	bls.n	1a003e5c <__udivdi3+0x11c>
1a003e4a:	1964      	adds	r4, r4, r5
1a003e4c:	f103 32ff 	add.w	r2, r3, #4294967295
1a003e50:	f080 808f 	bcs.w	1a003f72 <__udivdi3+0x232>
1a003e54:	42a7      	cmp	r7, r4
1a003e56:	f240 808c 	bls.w	1a003f72 <__udivdi3+0x232>
1a003e5a:	3b02      	subs	r3, #2
1a003e5c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003e60:	4631      	mov	r1, r6
1a003e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003e66:	2600      	movs	r6, #0
1a003e68:	4630      	mov	r0, r6
1a003e6a:	4631      	mov	r1, r6
1a003e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003e70:	f1c6 0420 	rsb	r4, r6, #32
1a003e74:	fa22 f504 	lsr.w	r5, r2, r4
1a003e78:	40b3      	lsls	r3, r6
1a003e7a:	432b      	orrs	r3, r5
1a003e7c:	fa20 fc04 	lsr.w	ip, r0, r4
1a003e80:	fa01 f706 	lsl.w	r7, r1, r6
1a003e84:	fa21 f504 	lsr.w	r5, r1, r4
1a003e88:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a003e8c:	ea4c 0707 	orr.w	r7, ip, r7
1a003e90:	fbb5 f8fe 	udiv	r8, r5, lr
1a003e94:	0c39      	lsrs	r1, r7, #16
1a003e96:	fb0e 5518 	mls	r5, lr, r8, r5
1a003e9a:	fa1f fc83 	uxth.w	ip, r3
1a003e9e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a003ea2:	fb0c f108 	mul.w	r1, ip, r8
1a003ea6:	42a9      	cmp	r1, r5
1a003ea8:	fa02 f206 	lsl.w	r2, r2, r6
1a003eac:	d904      	bls.n	1a003eb8 <__udivdi3+0x178>
1a003eae:	18ed      	adds	r5, r5, r3
1a003eb0:	f108 34ff 	add.w	r4, r8, #4294967295
1a003eb4:	d367      	bcc.n	1a003f86 <__udivdi3+0x246>
1a003eb6:	46a0      	mov	r8, r4
1a003eb8:	1a6d      	subs	r5, r5, r1
1a003eba:	b2bf      	uxth	r7, r7
1a003ebc:	fbb5 f4fe 	udiv	r4, r5, lr
1a003ec0:	fb0e 5514 	mls	r5, lr, r4, r5
1a003ec4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a003ec8:	fb0c fc04 	mul.w	ip, ip, r4
1a003ecc:	458c      	cmp	ip, r1
1a003ece:	d904      	bls.n	1a003eda <__udivdi3+0x19a>
1a003ed0:	18c9      	adds	r1, r1, r3
1a003ed2:	f104 35ff 	add.w	r5, r4, #4294967295
1a003ed6:	d35c      	bcc.n	1a003f92 <__udivdi3+0x252>
1a003ed8:	462c      	mov	r4, r5
1a003eda:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a003ede:	ebcc 0101 	rsb	r1, ip, r1
1a003ee2:	fba4 2302 	umull	r2, r3, r4, r2
1a003ee6:	4299      	cmp	r1, r3
1a003ee8:	d348      	bcc.n	1a003f7c <__udivdi3+0x23c>
1a003eea:	d044      	beq.n	1a003f76 <__udivdi3+0x236>
1a003eec:	4620      	mov	r0, r4
1a003eee:	2600      	movs	r6, #0
1a003ef0:	e76c      	b.n	1a003dcc <__udivdi3+0x8c>
1a003ef2:	f1c8 0420 	rsb	r4, r8, #32
1a003ef6:	fa01 f308 	lsl.w	r3, r1, r8
1a003efa:	fa05 f508 	lsl.w	r5, r5, r8
1a003efe:	fa20 f704 	lsr.w	r7, r0, r4
1a003f02:	40e1      	lsrs	r1, r4
1a003f04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003f08:	431f      	orrs	r7, r3
1a003f0a:	fbb1 f6fe 	udiv	r6, r1, lr
1a003f0e:	0c3a      	lsrs	r2, r7, #16
1a003f10:	fb0e 1116 	mls	r1, lr, r6, r1
1a003f14:	fa1f fc85 	uxth.w	ip, r5
1a003f18:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a003f1c:	fb0c f206 	mul.w	r2, ip, r6
1a003f20:	429a      	cmp	r2, r3
1a003f22:	fa00 f408 	lsl.w	r4, r0, r8
1a003f26:	d907      	bls.n	1a003f38 <__udivdi3+0x1f8>
1a003f28:	195b      	adds	r3, r3, r5
1a003f2a:	f106 31ff 	add.w	r1, r6, #4294967295
1a003f2e:	d237      	bcs.n	1a003fa0 <__udivdi3+0x260>
1a003f30:	429a      	cmp	r2, r3
1a003f32:	d935      	bls.n	1a003fa0 <__udivdi3+0x260>
1a003f34:	3e02      	subs	r6, #2
1a003f36:	442b      	add	r3, r5
1a003f38:	1a9b      	subs	r3, r3, r2
1a003f3a:	b2bf      	uxth	r7, r7
1a003f3c:	fbb3 f0fe 	udiv	r0, r3, lr
1a003f40:	fb0e 3310 	mls	r3, lr, r0, r3
1a003f44:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a003f48:	fb0c f100 	mul.w	r1, ip, r0
1a003f4c:	4299      	cmp	r1, r3
1a003f4e:	d907      	bls.n	1a003f60 <__udivdi3+0x220>
1a003f50:	195b      	adds	r3, r3, r5
1a003f52:	f100 32ff 	add.w	r2, r0, #4294967295
1a003f56:	d221      	bcs.n	1a003f9c <__udivdi3+0x25c>
1a003f58:	4299      	cmp	r1, r3
1a003f5a:	d91f      	bls.n	1a003f9c <__udivdi3+0x25c>
1a003f5c:	3802      	subs	r0, #2
1a003f5e:	442b      	add	r3, r5
1a003f60:	1a5a      	subs	r2, r3, r1
1a003f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a003f66:	4667      	mov	r7, ip
1a003f68:	e750      	b.n	1a003e0c <__udivdi3+0xcc>
1a003f6a:	4610      	mov	r0, r2
1a003f6c:	e716      	b.n	1a003d9c <__udivdi3+0x5c>
1a003f6e:	460b      	mov	r3, r1
1a003f70:	e729      	b.n	1a003dc6 <__udivdi3+0x86>
1a003f72:	4613      	mov	r3, r2
1a003f74:	e772      	b.n	1a003e5c <__udivdi3+0x11c>
1a003f76:	40b0      	lsls	r0, r6
1a003f78:	4290      	cmp	r0, r2
1a003f7a:	d2b7      	bcs.n	1a003eec <__udivdi3+0x1ac>
1a003f7c:	1e60      	subs	r0, r4, #1
1a003f7e:	2600      	movs	r6, #0
1a003f80:	e724      	b.n	1a003dcc <__udivdi3+0x8c>
1a003f82:	4630      	mov	r0, r6
1a003f84:	e722      	b.n	1a003dcc <__udivdi3+0x8c>
1a003f86:	42a9      	cmp	r1, r5
1a003f88:	d995      	bls.n	1a003eb6 <__udivdi3+0x176>
1a003f8a:	f1a8 0802 	sub.w	r8, r8, #2
1a003f8e:	441d      	add	r5, r3
1a003f90:	e792      	b.n	1a003eb8 <__udivdi3+0x178>
1a003f92:	458c      	cmp	ip, r1
1a003f94:	d9a0      	bls.n	1a003ed8 <__udivdi3+0x198>
1a003f96:	3c02      	subs	r4, #2
1a003f98:	4419      	add	r1, r3
1a003f9a:	e79e      	b.n	1a003eda <__udivdi3+0x19a>
1a003f9c:	4610      	mov	r0, r2
1a003f9e:	e7df      	b.n	1a003f60 <__udivdi3+0x220>
1a003fa0:	460e      	mov	r6, r1
1a003fa2:	e7c9      	b.n	1a003f38 <__udivdi3+0x1f8>
1a003fa4:	3802      	subs	r0, #2
1a003fa6:	4429      	add	r1, r5
1a003fa8:	e743      	b.n	1a003e32 <__udivdi3+0xf2>
1a003faa:	bf00      	nop

1a003fac <__libc_init_array>:
1a003fac:	b570      	push	{r4, r5, r6, lr}
1a003fae:	4b0e      	ldr	r3, [pc, #56]	; (1a003fe8 <__libc_init_array+0x3c>)
1a003fb0:	4c0e      	ldr	r4, [pc, #56]	; (1a003fec <__libc_init_array+0x40>)
1a003fb2:	1ae4      	subs	r4, r4, r3
1a003fb4:	10a4      	asrs	r4, r4, #2
1a003fb6:	2500      	movs	r5, #0
1a003fb8:	461e      	mov	r6, r3
1a003fba:	42a5      	cmp	r5, r4
1a003fbc:	d004      	beq.n	1a003fc8 <__libc_init_array+0x1c>
1a003fbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003fc2:	4798      	blx	r3
1a003fc4:	3501      	adds	r5, #1
1a003fc6:	e7f8      	b.n	1a003fba <__libc_init_array+0xe>
1a003fc8:	f7ff fd20 	bl	1a003a0c <_init>
1a003fcc:	4c08      	ldr	r4, [pc, #32]	; (1a003ff0 <__libc_init_array+0x44>)
1a003fce:	4b09      	ldr	r3, [pc, #36]	; (1a003ff4 <__libc_init_array+0x48>)
1a003fd0:	1ae4      	subs	r4, r4, r3
1a003fd2:	10a4      	asrs	r4, r4, #2
1a003fd4:	2500      	movs	r5, #0
1a003fd6:	461e      	mov	r6, r3
1a003fd8:	42a5      	cmp	r5, r4
1a003fda:	d004      	beq.n	1a003fe6 <__libc_init_array+0x3a>
1a003fdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003fe0:	4798      	blx	r3
1a003fe2:	3501      	adds	r5, #1
1a003fe4:	e7f8      	b.n	1a003fd8 <__libc_init_array+0x2c>
1a003fe6:	bd70      	pop	{r4, r5, r6, pc}
1a003fe8:	1a0043c4 	.word	0x1a0043c4
1a003fec:	1a0043c4 	.word	0x1a0043c4
1a003ff0:	1a0043c4 	.word	0x1a0043c4
1a003ff4:	1a0043c4 	.word	0x1a0043c4

1a003ff8 <memset>:
1a003ff8:	4402      	add	r2, r0
1a003ffa:	4603      	mov	r3, r0
1a003ffc:	4293      	cmp	r3, r2
1a003ffe:	d002      	beq.n	1a004006 <memset+0xe>
1a004000:	f803 1b01 	strb.w	r1, [r3], #1
1a004004:	e7fa      	b.n	1a003ffc <memset+0x4>
1a004006:	4770      	bx	lr
1a004008:	7778797a 	.word	0x7778797a
1a00400c:	73747576 	.word	0x73747576
1a004010:	6f707172 	.word	0x6f707172
1a004014:	6b6c6d6e 	.word	0x6b6c6d6e
1a004018:	6768696a 	.word	0x6768696a
1a00401c:	63646566 	.word	0x63646566
1a004020:	38396162 	.word	0x38396162
1a004024:	34353637 	.word	0x34353637
1a004028:	30313233 	.word	0x30313233
1a00402c:	34333231 	.word	0x34333231
1a004030:	38373635 	.word	0x38373635
1a004034:	63626139 	.word	0x63626139
1a004038:	67666564 	.word	0x67666564
1a00403c:	6b6a6968 	.word	0x6b6a6968
1a004040:	6f6e6d6c 	.word	0x6f6e6d6c
1a004044:	73727170 	.word	0x73727170
1a004048:	77767574 	.word	0x77767574
1a00404c:	007a7978 	.word	0x007a7978
1a004050:	0000202c 	.word	0x0000202c
1a004054:	00000a0d 	.word	0x00000a0d
1a004058:	7365754d 	.word	0x7365754d
1a00405c:	73617274 	.word	0x73617274
1a004060:	7478742e 	.word	0x7478742e
1a004064:	00000000 	.word	0x00000000
1a004068:	0000093b 	.word	0x0000093b
1a00406c:	09314843 	.word	0x09314843
1a004070:	00000000 	.word	0x00000000
1a004074:	09324843 	.word	0x09324843
1a004078:	00000000 	.word	0x00000000
1a00407c:	09334843 	.word	0x09334843
1a004080:	00000000 	.word	0x00000000
1a004084:	41524f48 	.word	0x41524f48
1a004088:	00000009 	.word	0x00000009
1a00408c:	2c2b2a22 	.word	0x2c2b2a22
1a004090:	3d3c3b3a 	.word	0x3d3c3b3a
1a004094:	5d5b3f3e 	.word	0x5d5b3f3e
1a004098:	00007f7c 	.word	0x00007f7c

1a00409c <ultrasonicSensorsIrqMap>:
1a00409c:	00020100                                ....

1a0040a0 <gpioPinsInit>:
1a0040a0:	02000104 00050701 05010d03 04080100     ................
1a0040b0:	02020002 02000304 00000403 04070002     ................
1a0040c0:	030c0300 09050402 05040103 04030208     ................
1a0040d0:	04020305 06040504 0802000c 03000b06     ................
1a0040e0:	00090607 07060503 060f0504 03030004     ................
1a0040f0:	02000404 00050404 06040502 04060200     ................
1a004100:	0c050408 05040a04 0003010e 14010a00     ................
1a004110:	010f0000 0d000012 00001101 0010010c     ................
1a004120:	07070300 000f0300 01000001 00000000     ................
1a004130:	000a0600 08060603 06100504 04030005     ................
1a004140:	03000106 04090400 04010d05 010b0000     ................
1a004150:	0200000f 00000001 00010104 02010800     ................
1a004160:	01090000 09010006 05040002 04010200     ................
1a004170:	02020105 02020504 0e00000a 01000b02     ................
1a004180:	000c020b 00040c01 04000200 01020001     ................
1a004190:	02000204 00030402 03070302 070b0300     ................
1a0041a0:	0c030004 03000507 0006070d 01020e03     ................
1a0041b0:	04010504 06020006 02000504 00040405     ................
1a0041c0:	08040402 040c0504 0d050409 05040a04     ................
1a0041d0:	0005010e 00000801                       ........

1a0041d8 <lpcUarts>:
1a0041d8:	40081000 06020406 00180205 40081000     ...@...........@
1a0041e8:	09070509 00180706 40082000 00000000     ......... .@....
1a0041f8:	00190000 400c1000 07060107 001a0602     .......@........
1a004208:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004218:	02020302 001b0204                       ........

1a004220 <GpioPorts>:
1a004220:	03030003 0f050403 05031005 07030603     ................
1a004230:	00000802                                ....

1a004234 <OscRateIn>:
1a004234:	00b71b00                                ....

1a004238 <ExtRateIn>:
1a004238:	00000000                                ....

1a00423c <GpioButtons>:
1a00423c:	08000400 09010900                       ........

1a004244 <GpioLeds>:
1a004244:	01050005 0e000205 0c010b01              ............

1a004250 <InitClkStates>:
1a004250:	00010308 00010307 01010f01              ............

1a00425c <pinmuxing>:
1a00425c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00426c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00427c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00428c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00429c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0042ac:	00d50301 00d50401 00160107 00560207     ..............V.
1a0042bc:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0042cc:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a0042dc:	00b31201 00f01301 00b31401 00b60707     ................
1a0042ec:	00f20000 00b60100                       ........

1a0042f4 <UART_BClock>:
1a0042f4:	01a201c2 01620182                       ......b.

1a0042fc <UART_PClock>:
1a0042fc:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00430c:	000000ff                                ....

1a004310 <periph_to_base>:
1a004310:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004320:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004330:	000100e0 01000100 01200003 00060120     .......... . ...
1a004340:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004350:	01820013 00120182 01a201a2 01c20011     ................
1a004360:	001001c2 01e201e2 0202000f 000e0202     ................
1a004370:	02220222 0223000d 001c0223              "."...#.#...

1a00437c <InitClkStates>:
1a00437c:	00010100 00010909 0001090a 01010701     ................
1a00438c:	00010902 00010906 0101090c 0001090d     ................
1a00439c:	0001090e 0001090f 00010910 00010911     ................
1a0043ac:	00010912 00010913 00011114 00011119     ................
1a0043bc:	0001111a 0001111b                       ........
